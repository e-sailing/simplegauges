/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*******************!*\
  !*** ./gauges.js ***!
  \*******************/
/***/ function(module, exports, __webpack_require__) {

	steelseries = __webpack_require__(/*! ./lib/steelseries.js */ 1);
	simplegauges = __webpack_require__(/*! ./lib/simplegauges.js */ 2);
	WebSocket = __webpack_require__(/*! ws */ 3);
	SignalK = __webpack_require__(/*! signalk-client */ 4);


/***/ },
/* 1 */
/*!****************************!*\
  !*** ./lib/steelseries.js ***!
  \****************************/
/***/ function(module, exports) {

	/*!
	 * Name          : steelseries.js
	 * Authors       : Gerrit Grunwald, Mark Crossley
	 * Last modified : 29.01.2014
	 * Revision      : 0.14.7
	 *
	 * Copyright (c) 2011, Gerrit Grunwald, Mark Crossley
	 * All rights reserved.
	 *
	 *  Redistribution and use in source and binary forms, with or without modification, are permitted
	 *  provided that the following conditions are met:
	 *
	 *  # Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	 *  # Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided with the distribution.
	 *
	 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
	 *   BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
	 *   SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
	 *   OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	/*globals Tween */
	/*jshint onevar:false,plusplus:false,nomen:false,bitwise:false*/
	'option strict';
	
	var steelseries = (function () {
	
	    // Constants
	    var HALF_PI     = Math.PI * 0.5,
	        TWO_PI      = Math.PI * 2,
	        PI          = Math.PI,
	        RAD_FACTOR  = Math.PI / 180,
	        DEG_FACTOR  = 180 / Math.PI,
	        doc         = document,
	        lcdFontName = 'LCDMono2Ultra,Arial,Verdana,sans-serif',
	        stdFontName = 'Arial,Verdana,sans-serif';
	
	    //*************************************   C O M P O N O N E N T S   ************************************************
	    var radial = function (canvas, parameters) {
	        parameters = parameters || {};
	        var gaugeType = (undefined === parameters.gaugeType ? steelseries.GaugeType.TYPE4 : parameters.gaugeType),
	            size = (undefined === parameters.size ? 0 : parameters.size),
	            minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),
	            maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),
	            niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),
	            threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue: parameters.threshold),
	            thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),
	            section = (undefined === parameters.section ? null : parameters.section),
	            area = (undefined === parameters.area ? null : parameters.area),
	            titleString = (undefined === parameters.titleString ? '' : parameters.titleString),
	            unitString = (undefined === parameters.unitString ? '' : parameters.unitString),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            pointerType = (undefined === parameters.pointerType ? steelseries.PointerType.TYPE1 : parameters.pointerType),
	            pointerColor = (undefined === parameters.pointerColor ? steelseries.ColorDef.RED : parameters.pointerColor),
	            knobType = (undefined === parameters.knobType ? steelseries.KnobType.STANDARD_KNOB : parameters.knobType),
	            knobStyle = (undefined === parameters.knobStyle ? steelseries.KnobStyle.SILVER : parameters.knobStyle),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.STANDARD : parameters.lcdColor),
	            lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),
	            lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            fractionalScaleDecimals = (undefined === parameters.fractionalScaleDecimals ? 1 : parameters.fractionalScaleDecimals),
	            ledColor = (undefined === parameters.ledColor ? steelseries.LedColor.RED_LED : parameters.ledColor),
	            ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),
	            userLedColor = (undefined === parameters.userLedColor ? steelseries.LedColor.GREEN_LED : parameters.userLedColor),
	            userLedVisible = (undefined === parameters.userLedVisible ? false : parameters.userLedVisible),
	            thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),
	            minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),
	            maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            labelNumberFormat = (undefined === parameters.labelNumberFormat ? steelseries.LabelNumberFormat.STANDARD : parameters.labelNumberFormat),
	            playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),
	            alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),
	            customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),
	            tickLabelOrientation = (undefined === parameters.tickLabelOrientation ? (gaugeType === steelseries.GaugeType.TYPE1 ? steelseries.TickLabelOrientation.TANGENT : steelseries.TickLabelOrientation.NORMAL) : parameters.tickLabelOrientation),
	            trendVisible = (undefined === parameters.trendVisible ? false : parameters.trendVisible),
	            trendColors = (undefined === parameters.trendColors ? [steelseries.LedColor.RED_LED, steelseries.LedColor.GREEN_LED, steelseries.LedColor.CYAN_LED] : parameters.trendColors),
	            useOdometer = (undefined === parameters.useOdometer ? false : parameters.useOdometer),
	            odometerParams = (undefined === parameters.odometerParams ? {} : parameters.odometerParams),
	            odometerUseValue = (undefined === parameters.odometerUseValue ? false : parameters.odometerUseValue),
	            fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        // Create audio tag for alarm sound
	        var audioElement;
	        if (playAlarm && alarmSound !== false) {
	            audioElement = doc.createElement('audio');
	            audioElement.setAttribute('src', alarmSound);
	            audioElement.setAttribute('preload', 'auto');
	        }
	
	        var value = minValue;
	        var odoValue = minValue;
	        var self = this;
	
	        // Properties
	        var minMeasuredValue = maxValue;
	        var maxMeasuredValue = minValue;
	
	        var ledBlinking = false;
	        var userLedBlinking = false;
	
	        var ledTimerId = 0;
	        var userLedTimerId = 0;
	        var tween;
	        var repainting = false;
	
	        var trendIndicator = steelseries.TrendState.OFF;
	        var trendSize = size * 0.06;
	        var trendPosX = size * 0.29;
	        var trendPosY = size * 0.36;
	
	        // GaugeType specific private variables
	        var freeAreaAngle;
	        var rotationOffset;
	        var tickmarkOffset;
	        var angleRange;
	        var angleStep;
	
	        var angle = rotationOffset + (value - minValue) * angleStep;
	
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight / 2;
	
	        // Misc
	        var ledSize = size * 0.093457;
	        var ledPosX = 0.6 * imageWidth;
	        var ledPosY = 0.4 * imageHeight;
	        var userLedPosX = gaugeType === steelseries.GaugeType.TYPE3 ? 0.6 * imageWidth : centerX - ledSize / 2;
	        var userLedPosY = gaugeType === steelseries.GaugeType.TYPE3 ? 0.72 * imageHeight : 0.75 * imageHeight;
	        var lcdFontHeight = Math.floor(imageWidth / 10);
	        var stdFont = lcdFontHeight + 'px ' + stdFontName;
	        var lcdFont = lcdFontHeight + 'px ' + lcdFontName;
	        var lcdHeight = imageHeight * 0.13;
	        var lcdWidth = imageWidth * 0.4;
	        var lcdPosX = (imageWidth - lcdWidth) / 2;
	        var lcdPosY = imageHeight * 0.57;
	        var odoPosX, odoPosY = imageHeight * 0.61;
	        var shadowOffset = imageWidth * 0.006;
	
	        // Constants
	        var initialized = false;
	
	        // Tickmark specific private variables
	        var niceMinValue = minValue;
	        var niceMaxValue = maxValue;
	        var niceRange = maxValue - minValue;
	        var range = niceMaxValue - niceMinValue;
	        var minorTickSpacing = 0;
	        var majorTickSpacing = 0;
	        var maxNoOfMinorTicks = 10;
	        var maxNoOfMajorTicks = 10;
	
	        // Method to calculate nice values for min, max and range for the tickmarks
	        var calculate = function calculate() {
	            if (niceScale) {
	                niceRange = calcNiceNumber(maxValue - minValue, false);
	                majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);
	                niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;
	                niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;
	                minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);
	                minValue = niceMinValue;
	                maxValue = niceMaxValue;
	                range = maxValue - minValue;
	            } else {
	                niceRange = (maxValue - minValue);
	                niceMinValue = minValue;
	                niceMaxValue = maxValue;
	                range = niceRange;
	                majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);
	                minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);
	            }
	
	            switch (gaugeType.type) {
	            case 'type1':
	                freeAreaAngle = 0;
	                rotationOffset = PI;
	                tickmarkOffset = HALF_PI;
	                angleRange = HALF_PI;
	                angleStep = angleRange / range;
	                break;
	
	            case 'type2':
	                freeAreaAngle = 0;
	                rotationOffset = PI;
	                tickmarkOffset = HALF_PI;
	                angleRange = PI;
	                angleStep = angleRange / range;
	                break;
	
	            case 'type3':
	                freeAreaAngle = 0;
	                rotationOffset = HALF_PI;
	                tickmarkOffset = 0;
	                angleRange = 1.5 * PI;
	                angleStep = angleRange / range;
	                break;
	
	            case 'type4':
	            /* falls through */
	            default:
	                freeAreaAngle = 60 * RAD_FACTOR;
	                rotationOffset = HALF_PI + (freeAreaAngle / 2);
	                tickmarkOffset = 0;
	                angleRange = TWO_PI - freeAreaAngle;
	                angleStep = angleRange / range;
	                break;
	            }
	            angle = rotationOffset + (value - minValue) * angleStep;
	        };
	
	        // **************   Buffer creation  ********************
	        // Buffer for the frame
	        var frameBuffer = createBuffer(size, size);
	        var frameContext = frameBuffer.getContext('2d');
	
	        // Buffer for the background
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        var lcdBuffer;
	
	        // Buffer for led on painting code
	        var ledBufferOn = createBuffer(ledSize, ledSize);
	        var ledContextOn = ledBufferOn.getContext('2d');
	
	        // Buffer for led off painting code
	        var ledBufferOff = createBuffer(ledSize, ledSize);
	        var ledContextOff = ledBufferOff.getContext('2d');
	
	        // Buffer for current led painting code
	        var ledBuffer = ledBufferOff;
	
	        // Buffer for user led on painting code
	        var userLedBufferOn = createBuffer(ledSize, ledSize);
	        var userLedContextOn = userLedBufferOn.getContext('2d');
	
	        // Buffer for user led off painting code
	        var userLedBufferOff = createBuffer(ledSize, ledSize);
	        var userLedContextOff = userLedBufferOff.getContext('2d');
	
	        // Buffer for current user led painting code
	        var userLedBuffer = userLedBufferOff;
	
	        // Buffer for the minMeasuredValue indicator
	        var minMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));
	        var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for the maxMeasuredValue indicator
	        var maxMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));
	        var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for pointer image painting code
	        var pointerBuffer = createBuffer(size, size);
	        var pointerContext = pointerBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // Buffers for trend indicators
	        var trendUpBuffer, trendSteadyBuffer, trendDownBuffer, trendOffBuffer;
	
	        // Buffer for odometer
	        var odoGauge, odoBuffer, odoContext;
	        if (useOdometer && lcdVisible) {
	            odoBuffer = createBuffer(10, 10);          // size doesn't matter, it will get reset by odometer code
	            odoContext = odoBuffer.getContext('2d');
	        }
	
	        // **************   Image creation  ********************
	        var drawLcdText = function (ctx, value) {
	            ctx.restore();
	            ctx.save();
	            ctx.textAlign = 'right';
	            ctx.strokeStyle = lcdColor.textColor;
	            ctx.fillStyle = lcdColor.textColor;
	
	            if (lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) {
	                ctx.shadowColor = 'gray';
	                ctx.shadowOffsetX = imageWidth * 0.007;
	                ctx.shadowOffsetY = imageWidth * 0.007;
	                ctx.shadowBlur = imageWidth * 0.007;
	            }
	            if (digitalFont) {
	                ctx.font = lcdFont;
	            } else {
	                ctx.font = stdFont;
	            }
	            ctx.fillText(value.toFixed(lcdDecimals), lcdPosX + lcdWidth - lcdWidth * 0.05, lcdPosY + lcdHeight * 0.5 + lcdFontHeight * 0.38, lcdWidth * 0.9);
	
	            ctx.restore();
	        };
	
	        var drawPostsImage = function (ctx) {
	            ctx.save();
	
	            if ('type1' === gaugeType.type) {
	                // Draw max center top post
	                ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.523364, imageHeight * 0.130841);
	            }
	
	            if ('type1' === gaugeType.type || 'type2' === gaugeType.type) {
	                // Draw min left post
	                ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.130841, imageHeight * 0.514018);
	            }
	
	            if ('type2' === gaugeType.type || 'type3' === gaugeType.type) {
	                // Draw max right post
	                ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.831775, imageHeight * 0.514018);
	            }
	
	            if ('type3' === gaugeType.type) {
	                // Draw min center bottom post
	                ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.523364, imageHeight * 0.831775);
	            }
	
	            if ('type4' === gaugeType.type) {
	                // Min post
	                ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.336448, imageHeight * 0.803738);
	
	                // Max post
	                ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.626168, imageHeight * 0.803738);
	            }
	
	            ctx.restore();
	
	        };
	
	        var createThresholdImage = function () {
	            var thresholdBuffer = doc.createElement('canvas');
	            thresholdBuffer.width = Math.ceil(size * 0.046728);
	            thresholdBuffer.height = Math.ceil(thresholdBuffer.width * 0.9);
	            var thresholdCtx = thresholdBuffer.getContext('2d');
	
	            thresholdCtx.save();
	            var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);
	            gradThreshold.addColorStop(0, '#520000');
	            gradThreshold.addColorStop(0.3, '#fc1d00');
	            gradThreshold.addColorStop(0.59, '#fc1d00');
	            gradThreshold.addColorStop(1, '#520000');
	            thresholdCtx.fillStyle = gradThreshold;
	
	            thresholdCtx.beginPath();
	            thresholdCtx.moveTo(thresholdBuffer.width * 0.5, 0.1);
	            thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);
	            thresholdCtx.lineTo(thresholdBuffer.width * 0.1, thresholdBuffer.height * 0.9);
	            thresholdCtx.lineTo(thresholdBuffer.width * 0.5, 0.1);
	            thresholdCtx.closePath();
	
	            thresholdCtx.fill();
	            thresholdCtx.strokeStyle = '#FFFFFF';
	            thresholdCtx.stroke();
	
	            thresholdCtx.restore();
	
	            return thresholdBuffer;
	        };
	
	        var drawAreaSectionImage = function (ctx, start, stop, color, filled) {
	            if (start < minValue) {
	                start = minValue;
	            } else if (start > maxValue) {
	                start = maxValue;
	            }
	            if (stop < minValue) {
	                stop = minValue;
	            } else if (stop > maxValue) {
	                stop = maxValue;
	            }
	            if (start >= stop) {
	                return;
	            }
	            ctx.save();
	            ctx.strokeStyle = color;
	            ctx.fillStyle = color;
	            ctx.lineWidth = imageWidth * 0.035;
	            var startAngle = (angleRange / range * start - angleRange / range * minValue);
	            var stopAngle = startAngle + (stop - start) / (range / angleRange);
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset);
	            ctx.beginPath();
	            if (filled) {
	                ctx.moveTo(0, 0);
	                ctx.arc(0, 0, imageWidth * 0.365 - ctx.lineWidth / 2, startAngle, stopAngle, false);
	            } else {
	                ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false);
	            }
	            if (filled) {
	                ctx.moveTo(0, 0);
	                ctx.fill();
	            } else {
	                ctx.stroke();
	            }
	
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var drawTickmarksImage = function (ctx, labelNumberFormat) {
	            var fontSize = Math.ceil(imageWidth * 0.04),
	                alpha = rotationOffset,      // Tracks total rotation
	                rotationStep = angleStep * minorTickSpacing,
	                textRotationAngle,
	                valueCounter = minValue,
	                majorTickCounter = maxNoOfMinorTicks - 1,
	                OUTER_POINT = imageWidth * 0.38,
	                MAJOR_INNER_POINT = imageWidth * 0.35,
	                MED_INNER_POINT = imageWidth * 0.355,
	                MINOR_INNER_POINT = imageWidth * 0.36,
	                TEXT_TRANSLATE_X = imageWidth * 0.3,
	                TEXT_WIDTH = imageWidth * 0.1,
	                HALF_MAX_NO_OF_MINOR_TICKS = maxNoOfMinorTicks / 2,
	                MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2)),
	                i;
	
	            backgroundColor.labelColor.setAlpha(1);
	            ctx.save();
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	            ctx.font = fontSize + 'px' + stdFontName;
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset);
	
	            if (gaugeType.type === 'type1' || gaugeType.type === 'type2') {
	                TEXT_WIDTH = imageWidth * 0.04;
	            }
	
	            for (i = minValue; parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED; i += minorTickSpacing) {
	                textRotationAngle = rotationStep + HALF_PI;
	                majorTickCounter++;
	                // Draw major tickmarks
	                if (majorTickCounter === maxNoOfMinorTicks) {
	                    ctx.lineWidth = 1.5;
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(MAJOR_INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                    ctx.save();
	                    ctx.translate(TEXT_TRANSLATE_X, 0);
	
	                    switch (tickLabelOrientation.type) {
	                    case 'horizontal':
	                        textRotationAngle = -alpha;
	                        break;
	
	                    case 'tangent':
	                        textRotationAngle = (alpha <= HALF_PI + PI ? PI : 0);
	                        break;
	
	                    case 'normal':
	                    /* falls through */
	                    default:
	                        textRotationAngle = HALF_PI;
	                        break;
	                    }
	                    ctx.rotate(textRotationAngle);
	
	                    switch (labelNumberFormat.format) {
	                    case 'fractional':
	                        ctx.fillText((valueCounter.toFixed(fractionalScaleDecimals)), 0, 0, TEXT_WIDTH);
	                        break;
	
	                    case 'scientific':
	                        ctx.fillText((valueCounter.toPrecision(2)), 0, 0, TEXT_WIDTH);
	                        break;
	
	                    case 'standard':
	                    /* falls through */
	                    default:
	                        ctx.fillText((valueCounter.toFixed(0)), 0, 0, TEXT_WIDTH);
	                        break;
	                    }
	                    ctx.translate(-TEXT_TRANSLATE_X, 0);
	                    ctx.restore();
	
	                    valueCounter += majorTickSpacing;
	                    majorTickCounter = 0;
	                    ctx.rotate(rotationStep);
	                    alpha += rotationStep;
	                    continue;
	                }
	
	                // Draw tickmark every minor tickmark spacing
	                if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (HALF_MAX_NO_OF_MINOR_TICKS)) {
	                    ctx.lineWidth = 1;
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(MED_INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                } else {
	                    ctx.lineWidth = 0.5;
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(MINOR_INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                }
	                ctx.rotate(rotationStep);
	                alpha += rotationStep;
	            }
	
	            /*
	             // Logarithmic scale
	             var tmp = 0.1;
	             var minValueLog10 = 0.1;
	             var maxValueLog10 = parseInt(Math.pow(10, Math.ceil(Math.log10(maxValue))));
	             var drawLabel = true;
	             angleStep = angleRange / (maxValueLog10 - minValueLog10)
	             for (var scaleFactor = minValueLog10 ; scaleFactor <= maxValueLog10 ; scaleFactor *= 10)
	             {
	             for (var i = parseFloat((1 * scaleFactor).toFixed(1)) ; i < parseFloat((10 * scaleFactor).toFixed(1)) ; i += scaleFactor)
	             {
	             textRotationAngle =+ rotationStep + HALF_PI;
	
	             if(drawLabel)
	             {
	             ctx.lineWidth = 1.5;
	             ctx.beginPath();
	             ctx.moveTo(imageWidth * 0.38,0);
	             ctx.lineTo(imageWidth * 0.35,0);
	             ctx.closePath();
	             ctx.stroke();
	             ctx.save();
	             ctx.translate(imageWidth * 0.31, 0);
	             ctx.rotate(textRotationAngle);
	             ctx.fillText(parseFloat((i).toFixed(1)), 0, 0, imageWidth * 0.0375);
	             ctx.translate(-imageWidth * 0.31, 0);
	             ctx.restore();
	             drawLabel = false;
	             }
	             else
	             {
	             ctx.lineWidth = 0.5;
	             ctx.beginPath();
	             ctx.moveTo(imageWidth * 0.38,0);
	             ctx.lineTo(imageWidth * 0.36,0);
	             ctx.closePath();
	             ctx.stroke();
	             }
	             //doc.write('log10 scale value: ' + parseFloat((i).toFixed(1)) + '<br>');
	             //Math.log10(parseFloat((i).toFixed(1)));
	
	             ctx.rotate(rotationStep);
	             }
	             tmp = 0.1;
	             drawLabel = true;
	             }
	             */
	
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	        var init = function (parameters) {
	            parameters = parameters || {};
	            var drawFrame = (undefined === parameters.frame ? false : parameters.frame);
	            var drawBackground = (undefined === parameters.background ? false : parameters.background);
	            var drawLed = (undefined === parameters.led ? false : parameters.led);
	            var drawUserLed = (undefined === parameters.userLed ? false : parameters.userLed);
	            var drawPointer = (undefined === parameters.pointer ? false : parameters.pointer);
	            var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	            var drawTrend = (undefined === parameters.trend ? false : parameters.trend);
	            var drawOdo = (undefined === parameters.odo ? false : parameters.odo);
	
	            initialized = true;
	
	            // Calculate the current min and max values and the range
	            calculate();
	
	            // Create frame in frame buffer (backgroundBuffer)
	            if (drawFrame && frameVisible) {
	                drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            // Create background in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	
	                // Create custom layer in background buffer (backgroundBuffer)
	                drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            if (drawLed) {
	                // Draw LED ON in ledBuffer_ON
	                ledContextOn.drawImage(createLedImage(Math.ceil(size * 0.093457), 1, ledColor), 0, 0);
	
	                // Draw LED OFF in ledBuffer_OFF
	                ledContextOff.drawImage(createLedImage(Math.ceil(size * 0.093457), 0, ledColor), 0, 0);
	            }
	
	            if (drawUserLed) {
	                // Draw user LED ON in userLedBuffer_ON
	                userLedContextOn.drawImage(createLedImage(Math.ceil(size * 0.093457), 1, userLedColor), 0, 0);
	
	                // Draw user LED OFF in userLedBuffer_OFF
	                userLedContextOff.drawImage(createLedImage(Math.ceil(size * 0.093457), 0, userLedColor), 0, 0);
	            }
	
	            // Draw min measured value indicator in minMeasuredValueBuffer
	            if (minMeasuredValueVisible) {
	                minMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), steelseries.ColorDef.BLUE.dark.getRgbaColor(), true, true), 0, 0);
	            }
	
	            // Draw max measured value indicator in maxMeasuredValueBuffer
	            if (maxMeasuredValueVisible) {
	                maxMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), steelseries.ColorDef.RED.medium.getRgbaColor(), true), 0, 0);
	            }
	
	            // Create alignment posts in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                drawPostsImage(backgroundContext);
	
	                // Create section in background buffer (backgroundBuffer)
	                if (null !== section && 0 < section.length) {
	                    var sectionIndex = section.length;
	                    do {
	                        sectionIndex--;
	                        drawAreaSectionImage(backgroundContext, section[sectionIndex].start, section[sectionIndex].stop, section[sectionIndex].color, false);
	                    }
	                    while (0 < sectionIndex);
	                }
	
	                // Create area in background buffer (backgroundBuffer)
	                if (null !== area && 0 < area.length) {
	                    var areaIndex = area.length;
	                    do {
	                        areaIndex--;
	                        drawAreaSectionImage(backgroundContext, area[areaIndex].start, area[areaIndex].stop, area[areaIndex].color, true);
	                    }
	                    while (0 < areaIndex);
	                }
	
	                // Create tickmarks in background buffer (backgroundBuffer)
	                drawTickmarksImage(backgroundContext, labelNumberFormat);
	
	                // Create title in background buffer (backgroundBuffer)
	                drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, true, true);
	            }
	
	            // Draw threshold image to background context
	            if (drawBackground && thresholdVisible) {
	                backgroundContext.save();
	                backgroundContext.translate(centerX, centerY);
	                backgroundContext.rotate(rotationOffset + (threshold - minValue) * angleStep + HALF_PI);
	                backgroundContext.translate(-centerX, -centerY);
	                backgroundContext.drawImage(createThresholdImage(), imageWidth * 0.475, imageHeight * 0.13);
	                backgroundContext.translate(centerX, centerY);
	                backgroundContext.restore();
	            }
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            if (drawBackground && lcdVisible) {
	                if (useOdometer && drawOdo) {
	                    odoGauge = new steelseries.Odometer('', {
	                            _context: odoContext,
	                            height: size * 0.075,
	                            decimals: odometerParams.decimals,
	                            digits: (odometerParams.digits === undefined ? 5 : odometerParams.digits),
	                            valueForeColor: odometerParams.valueForeColor,
	                            valueBackColor: odometerParams.valueBackColor,
	                            decimalForeColor: odometerParams.decimalForeColor,
	                            decimalBackColor: odometerParams.decimalBackColor,
	                            font: odometerParams.font,
	                            value: value
	                        });
	                    odoPosX = (imageWidth - odoBuffer.width) / 2;
	                } else if (!useOdometer) {
	                    lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor);
	                    backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY);
	                }
	            }
	
	            // Create pointer image in pointer buffer (contentBuffer)
	            if (drawPointer) {
	                drawPointerImage(pointerContext, imageWidth, pointerType, pointerColor, backgroundColor.labelColor);
	            }
	
	            // Create foreground in foreground buffer (foregroundBuffer)
	            if (drawForeground && foregroundVisible) {
	                var knobVisible = (pointerType.type === 'type15' || pointerType.type === 'type16' ? false : true);
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, knobVisible, knobType, knobStyle, gaugeType);
	            }
	
	            // Create the trend indicator buffers
	            if (drawTrend && trendVisible) {
	                trendUpBuffer = createTrendIndicator(trendSize, steelseries.TrendState.UP, trendColors);
	                trendSteadyBuffer = createTrendIndicator(trendSize, steelseries.TrendState.STEADY, trendColors);
	                trendDownBuffer = createTrendIndicator(trendSize, steelseries.TrendState.DOWN, trendColors);
	                trendOffBuffer = createTrendIndicator(trendSize, steelseries.TrendState.OFF, trendColors);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetFrame = (undefined === buffers.frame ? false : buffers.frame);
	            var resetBackground = (undefined === buffers.background ? false : buffers.background);
	            var resetLed = (undefined === buffers.led ? false : buffers.led);
	            var resetUserLed = (undefined === buffers.userLed ? false : buffers.userLed);
	            var resetPointer = (undefined === buffers.pointer ? false : buffers.pointer);
	            var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            if (resetFrame) {
	                frameBuffer.width = size;
	                frameBuffer.height = size;
	                frameContext = frameBuffer.getContext('2d');
	            }
	
	            if (resetBackground) {
	                backgroundBuffer.width = size;
	                backgroundBuffer.height = size;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	
	            if (resetLed) {
	                ledBufferOn.width = Math.ceil(size * 0.093457);
	                ledBufferOn.height = Math.ceil(size * 0.093457);
	                ledContextOn = ledBufferOn.getContext('2d');
	
	                ledBufferOff.width = Math.ceil(size * 0.093457);
	                ledBufferOff.height = Math.ceil(size * 0.093457);
	                ledContextOff = ledBufferOff.getContext('2d');
	
	                // Buffer for current led painting code
	                ledBuffer = ledBufferOff;
	            }
	
	            if (resetUserLed) {
	                userLedBufferOn.width = Math.ceil(size * 0.093457);
	                userLedBufferOn.height = Math.ceil(size * 0.093457);
	                userLedContextOn = userLedBufferOn.getContext('2d');
	
	                userLedBufferOff.width = Math.ceil(size * 0.093457);
	                userLedBufferOff.height = Math.ceil(size * 0.093457);
	                userLedContextOff = userLedBufferOff.getContext('2d');
	
	                // Buffer for current user led painting code
	                userLedBuffer = userLedBufferOff;
	            }
	
	            if (resetPointer) {
	                pointerBuffer.width = size;
	                pointerBuffer.height = size;
	                pointerContext = pointerBuffer.getContext('2d');
	            }
	
	            if (resetForeground) {
	                foregroundBuffer.width = size;
	                foregroundBuffer.height = size;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        var toggleAndRepaintLed = function () {
	            if (ledVisible) {
	                if (ledBuffer === ledBufferOn) {
	                    ledBuffer = ledBufferOff;
	                } else {
	                    ledBuffer = ledBufferOn;
	                }
	                if (!repainting) {
	                    repainting = true;
	                    requestAnimFrame(self.repaint);
	                }
	            }
	        };
	
	        var toggleAndRepaintUserLed = function () {
	            if (userLedVisible) {
	                if (userLedBuffer === userLedBufferOn) {
	                    userLedBuffer = userLedBufferOff;
	                } else {
	                    userLedBuffer = userLedBufferOn;
	                }
	                if (!repainting) {
	                    repainting = true;
	                    requestAnimFrame(self.repaint);
	                }
	            }
	        };
	
	        var blink = function (blinking) {
	            if (blinking) {
	                ledTimerId = setInterval(toggleAndRepaintLed, 1000);
	            } else {
	                clearInterval(ledTimerId);
	                ledBuffer = ledBufferOff;
	            }
	        };
	
	        var blinkUser = function (blinking) {
	            if (blinking) {
	                userLedTimerId = setInterval(toggleAndRepaintUserLed, 1000);
	            } else {
	                clearInterval(userLedTimerId);
	                userLedBuffer = userLedBufferOff;
	            }
	        };
	
	        //************************************ Public methods **************************************
	        this.setValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);
	            if (value !== targetValue) {
	                value = targetValue;
	
	                if (value > maxMeasuredValue) {
	                    maxMeasuredValue = value;
	                }
	                if (value < minMeasuredValue) {
	                    minMeasuredValue = value;
	                }
	
	                if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                    (value <= threshold && !ledBlinking && !thresholdRising)) {
	                    ledBlinking = true;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.play();
	                    }
	                } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                           (value > threshold && ledBlinking && !thresholdRising)) {
	                    ledBlinking = false;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.pause();
	                    }
	                }
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setOdoValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < 0 ? 0 : newValue);
	            if (odoValue !== targetValue) {
	                odoValue = targetValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getOdoValue = function () {
	            return odoValue;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue)),
	                gauge = this,
	                time;
	
	            if (value !== targetValue) {
	                if (undefined !== tween && tween.isPlaying) {
	                    tween.stop();
	                }
	                time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);
	                time = Math.max(time, fullScaleDeflectionTime / 5);
	                tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);
	                //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);
	                //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);
	
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos;
	
	                    if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                        (value <= threshold && !ledBlinking && !thresholdRising)) {
	                        ledBlinking = true;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.play();
	                        }
	                    } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                               (value > threshold && ledBlinking && !thresholdRising)) {
	                        ledBlinking = false;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.pause();
	                        }
	                    }
	
	                    if (value > maxMeasuredValue) {
	                        maxMeasuredValue = value;
	                    }
	                    if (value < minMeasuredValue) {
	                        minMeasuredValue = value;
	                    }
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.resetMinMeasuredValue = function () {
	            minMeasuredValue = value;
	            this.repaint();
	        };
	
	        this.resetMaxMeasuredValue = function () {
	            maxMeasuredValue = value;
	            this.repaint();
	            return this;
	        };
	
	        this.setMinMeasuredValueVisible = function (visible) {
	            minMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setMaxMeasuredValueVisible = function (visible) {
	            maxMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setMaxMeasuredValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);
	            maxMeasuredValue = targetValue;
	            this.repaint();
	            return this;
	        };
	
	        this.setMinMeasuredValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);
	            minMeasuredValue = targetValue;
	            this.repaint();
	            return this;
	        };
	
	        this.setTitleString = function (title) {
	            titleString = title;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setUnitString = function (unit) {
	            unitString = unit;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setMinValue = function (value) {
	            minValue = parseFloat(value);
	            resetBuffers({frame: true,
	                          background: true});
	            init({frame: true,
	                  background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMinValue = function () {
	            return minValue;
	        };
	
	        this.setMaxValue = function (value) {
	            maxValue = parseFloat(value);
	            resetBuffers({frame: true,
	                          background: true});
	            init({frame: true,
	                  background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMaxValue = function () {
	            return maxValue;
	        };
	
	        this.setThreshold = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);
	            threshold = targetValue;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setArea = function (areaVal) {
	            area = areaVal;
	            resetBuffers({background: true,
	                          foreground: true});
	            init({background: true,
	                  foreground: true
	                  });
	            this.repaint();
	            return this;
	        };
	
	        this.setSection = function (areaSec) {
	            section = areaSec;
	            resetBuffers({background: true,
	                          foreground: true});
	            init({background: true,
	                  foreground: true
	                  });
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdVisible = function (visible) {
	            thresholdVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdRising = function (rising) {
	            thresholdRising = !!rising;
	            // reset existing threshold alerts
	            ledBlinking = !ledBlinking;
	            blink(ledBlinking);
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdDecimals = function (decimals) {
	            lcdDecimals = parseInt(decimals, 10);
	            this.repaint();
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({background: true,
	                          pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false)       // type2 & 13 depend on background
	                });
	            backgroundColor = newBackgroundColor;
	            init({background: true,   // type2 & 13 depend on background
	                  pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false)
	                });
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers({foreground: true});
	            foregroundType = newForegroundType;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerType = function (newPointerType) {
	            resetBuffers({pointer: true,
	                          foreground: true
	                         });
	            pointerType = newPointerType;
	            init({pointer: true,
	                  foreground: true
	                  });
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColor = function (newPointerColor) {
	            resetBuffers({pointer: true});
	            pointerColor = newPointerColor;
	            init({pointer: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedColor = function (newLedColor) {
	            resetBuffers({led: true});
	            ledColor = newLedColor;
	            init({led: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setUserLedColor = function (newLedColor) {
	            resetBuffers({userLed: true});
	            userLedColor = newLedColor;
	            init({userLed: true});
	            this.repaint();
	            return this;
	        };
	
	        this.toggleUserLed = function () {
	            if (userLedBuffer === userLedBufferOn) {
	                userLedBuffer = userLedBufferOff;
	            } else {
	                userLedBuffer = userLedBufferOn;
	            }
	            this.repaint();
	            return this;
	        };
	
	        this.setUserLedOnOff = function (on) {
	            if (true === on) {
	                userLedBuffer = userLedBufferOn;
	            } else {
	                userLedBuffer = userLedBufferOff;
	            }
	            this.repaint();
	            return this;
	        };
	
	        this.blinkUserLed = function (blink) {
	            if (blink) {
	                if (!userLedBlinking) {
	                    blinkUser(true);
	                    userLedBlinking = true;
	                }
	            } else {
	                if (userLedBlinking) {
	                    clearInterval(userLedTimerId);
	                    userLedBlinking = false;
	                }
	            }
	            return this;
	        };
	
	        this.setLedVisible = function (visible) {
	            ledVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setUserLedVisible = function (visible) {
	            userLedVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            lcdColor = newLcdColor;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setTrend = function (newValue) {
	            trendIndicator = newValue;
	            this.repaint();
	            return this;
	        };
	
	        this.setTrendVisible = function (visible) {
	            trendVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setFractionalScaleDecimals = function (decimals) {
	            fractionalScaleDecimals = parseInt(decimals, 10);
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLabelNumberFormat = function (format) {
	            labelNumberFormat = format;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      led: true,
	                      userLed: true,
	                      pointer: true,
	                      trend: true,
	                      foreground: true,
	                      odo: true});
	            }
	            mainCtx.clearRect(0, 0, size, size);
	
	            // Draw frame
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            mainCtx.drawImage(backgroundBuffer, 0, 0);
	
	            // Draw lcd display
	            if (lcdVisible) {
	                if (useOdometer) {
	                    odoGauge.setValue(odometerUseValue ? value : odoValue);
	                    mainCtx.drawImage(odoBuffer, odoPosX, odoPosY);
	                } else {
	                    drawLcdText(mainCtx, value);
	                }
	            }
	
	            // Draw led
	            if (ledVisible) {
	                mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);
	            }
	
	            // Draw user led
	            if (userLedVisible) {
	                mainCtx.drawImage(userLedBuffer, userLedPosX, userLedPosY);
	            }
	
	            // Draw the trend indicator
	            if (trendVisible) {
	                switch (trendIndicator.state) {
	                case 'up':
	                    mainCtx.drawImage(trendUpBuffer, trendPosX, trendPosY);
	                    break;
	                case 'steady':
	                    mainCtx.drawImage(trendSteadyBuffer, trendPosX, trendPosY);
	                    break;
	                case 'down':
	                    mainCtx.drawImage(trendDownBuffer, trendPosX, trendPosY);
	                    break;
	                case 'off':
	                    mainCtx.drawImage(trendOffBuffer, trendPosX, trendPosY);
	                    break;
	                }
	            }
	
	            // Draw min measured value indicator
	            if (minMeasuredValueVisible) {
	                mainCtx.save();
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(rotationOffset + HALF_PI + (minMeasuredValue - minValue) * angleStep);
	                mainCtx.translate(-centerX, -centerY);
	                mainCtx.drawImage(minMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.105);
	                mainCtx.restore();
	            }
	
	            // Draw max measured value indicator
	            if (maxMeasuredValueVisible) {
	                mainCtx.save();
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(rotationOffset + HALF_PI + (maxMeasuredValue - minValue) * angleStep);
	                mainCtx.translate(-centerX, -centerY);
	                mainCtx.drawImage(maxMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.105);
	                mainCtx.restore();
	            }
	
	            angle = rotationOffset + HALF_PI + (value - minValue) * angleStep;
	
	            // Define rotation center
	            mainCtx.save();
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(angle);
	            mainCtx.translate(-centerX, -centerY);
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	            mainCtx.shadowBlur = shadowOffset * 2;
	            // Draw the pointer
	            mainCtx.drawImage(pointerBuffer, 0, 0);
	            // Undo the translations & shadow settings
	            mainCtx.restore();
	
	            // Draw foreground
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var radialBargraph = function (canvas, parameters) {
	        parameters = parameters || {};
	        var gaugeType = (undefined === parameters.gaugeType ? steelseries.GaugeType.TYPE4 : parameters.gaugeType),
	            size = (undefined === parameters.size ? 0 : parameters.size),
	            minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),
	            maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),
	            niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),
	            threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue: parameters.threshold),
	            thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),
	            section = (undefined === parameters.section ? null : parameters.section),
	            useSectionColors = (undefined === parameters.useSectionColors ? false : parameters.useSectionColors),
	            titleString = (undefined === parameters.titleString ? '' : parameters.titleString),
	            unitString = (undefined === parameters.unitString ? '' : parameters.unitString),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            valueColor = (undefined === parameters.valueColor ? steelseries.ColorDef.RED : parameters.valueColor),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.STANDARD : parameters.lcdColor),
	            lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),
	            lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            fractionalScaleDecimals = (undefined === parameters.fractionalScaleDecimals ? 1 : parameters.fractionalScaleDecimals),
	            customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),
	            ledColor = (undefined === parameters.ledColor ? steelseries.LedColor.RED_LED : parameters.ledColor),
	            ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),
	            userLedColor = (undefined === parameters.userLedColor ? steelseries.LedColor.GREEN_LED : parameters.userLedColor),
	            userLedVisible = (undefined === parameters.userLedVisible ? false : parameters.userLedVisible),
	            labelNumberFormat = (undefined === parameters.labelNumberFormat ? steelseries.LabelNumberFormat.STANDARD : parameters.labelNumberFormat),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),
	            alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),
	            valueGradient = (undefined === parameters.valueGradient ? null : parameters.valueGradient),
	            useValueGradient = (undefined === parameters.useValueGradient ? false : parameters.useValueGradient),
	            tickLabelOrientation = (undefined === parameters.tickLabelOrientation ? (gaugeType === steelseries.GaugeType.TYPE1 ? steelseries.TickLabelOrientation.TANGENT : steelseries.TickLabelOrientation.NORMAL) : parameters.tickLabelOrientation),
	            trendVisible = (undefined === parameters.trendVisible ? false : parameters.trendVisible),
	            trendColors = (undefined === parameters.trendColors ? [steelseries.LedColor.RED_LED, steelseries.LedColor.GREEN_LED, steelseries.LedColor.CYAN_LED] : parameters.trendColors),
	            fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        // Create audio tag for alarm sound
	        if (playAlarm && alarmSound !== false) {
	            var audioElement = doc.createElement('audio');
	            audioElement.setAttribute('src', alarmSound);
	            audioElement.setAttribute('preload', 'auto');
	        }
	
	        var value = minValue;
	        var range = maxValue - minValue;
	        var ledBlinking = false;
	        var ledTimerId = 0;
	        var userLedBlinking = false;
	        var userLedTimerId = 0;
	        var tween;
	        var self = this;
	        var repainting = false;
	
	        // GaugeType specific private variables
	        var freeAreaAngle;
	        var rotationOffset;
	        var bargraphOffset;
	        var tickmarkOffset;
	        var angleRange;
	        var degAngleRange;
	        var angleStep;
	        var angle;
	
	        var sectionAngles = [];
	        var isSectionsVisible = false;
	        var isGradientVisible = false;
	
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight / 2;
	
	        // Misc
	        var lcdFontHeight = Math.floor(imageWidth / 10);
	        var stdFont = lcdFontHeight + 'px ' + stdFontName;
	        var lcdFont = lcdFontHeight + 'px ' + lcdFontName;
	        var lcdHeight = imageHeight * 0.13;
	        var lcdWidth = imageWidth * 0.4;
	        var lcdPosX = (imageWidth - lcdWidth) / 2;
	        var lcdPosY = imageHeight / 2 - lcdHeight / 2;
	
	        // Constants
	        var ACTIVE_LED_POS_X = imageWidth * 0.116822;
	        var ACTIVE_LED_POS_Y = imageWidth * 0.485981;
	        var LED_SIZE = Math.ceil(size * 0.093457);
	        //var LED_POS_X = imageWidth * 0.453271;
	        var LED_POS_X = imageWidth * 0.53;
	        var LED_POS_Y = imageHeight * 0.61;
	        var USER_LED_POS_X = gaugeType === steelseries.GaugeType.TYPE3 ? 0.7 * imageWidth : centerX - LED_SIZE / 2;
	        var USER_LED_POS_Y = gaugeType === steelseries.GaugeType.TYPE3 ? 0.61 * imageHeight : 0.75 * imageHeight;
	
	        var trendIndicator = steelseries.TrendState.OFF;
	        var trendSize = size * 0.06;
	        var trendPosX = size * 0.38;
	        var trendPosY = size * 0.57;
	
	        switch (gaugeType.type) {
	        case 'type1':
	            freeAreaAngle = 0;
	            rotationOffset = PI;
	            bargraphOffset = 0;
	            tickmarkOffset = HALF_PI;
	            angleRange = HALF_PI;
	            degAngleRange = angleRange * DEG_FACTOR;
	            angleStep = angleRange / range;
	            break;
	
	        case 'type2':
	            freeAreaAngle = 0;
	            rotationOffset = PI;
	            bargraphOffset = 0;
	            tickmarkOffset = HALF_PI;
	            angleRange = PI;
	            degAngleRange = angleRange * DEG_FACTOR;
	            angleStep = angleRange / range;
	            break;
	
	        case 'type3':
	            freeAreaAngle = 0;
	            rotationOffset = HALF_PI;
	            bargraphOffset = -HALF_PI;
	            tickmarkOffset = 0;
	            angleRange = 1.5 * PI;
	            degAngleRange = angleRange * DEG_FACTOR;
	            angleStep = angleRange / range;
	            break;
	
	        case 'type4':
	        /* falls through */
	        default:
	            freeAreaAngle = 60 * RAD_FACTOR;
	            rotationOffset = HALF_PI + (freeAreaAngle / 2);
	            bargraphOffset = -TWO_PI / 6;
	            tickmarkOffset = 0;
	            angleRange = TWO_PI - freeAreaAngle;
	            degAngleRange = angleRange * DEG_FACTOR;
	            angleStep = angleRange / range;
	            break;
	        }
	
	        // Buffer for the frame
	        var frameBuffer = createBuffer(size, size);
	        var frameContext = frameBuffer.getContext('2d');
	
	        // Buffer for static background painting code
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        var lcdBuffer;
	
	        // Buffer for active bargraph led
	        var activeLedBuffer = createBuffer(Math.ceil(size * 0.060747), Math.ceil(size * 0.023364));
	        var activeLedContext = activeLedBuffer.getContext('2d');
	
	        // Buffer for led on painting code
	        var ledBufferOn = createBuffer(LED_SIZE, LED_SIZE);
	        var ledContextOn = ledBufferOn.getContext('2d');
	
	        // Buffer for led off painting code
	        var ledBufferOff = createBuffer(LED_SIZE, LED_SIZE);
	        var ledContextOff = ledBufferOff.getContext('2d');
	
	        // Buffer for current led painting code
	        var ledBuffer = ledBufferOff;
	
	        // Buffer for user led on painting code
	        var userLedBufferOn = createBuffer(LED_SIZE, LED_SIZE);
	        var userLedContextOn = userLedBufferOn.getContext('2d');
	
	        // Buffer for user led off painting code
	        var userLedBufferOff = createBuffer(LED_SIZE, LED_SIZE);
	        var userLedContextOff = userLedBufferOff.getContext('2d');
	
	        // Buffer for current user led painting code
	        var userLedBuffer = userLedBufferOff;
	        // Buffer for the background of the led
	        var ledBackground;
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // Buffers for trend indicators
	        var trendUpBuffer, trendSteadyBuffer, trendDownBuffer, trendOffBuffer;
	
	        var initialized = false;
	
	        // Tickmark specific private variables
	        var niceMinValue = minValue;
	        var niceMaxValue = maxValue;
	        var niceRange = maxValue - minValue;
	        range = niceMaxValue - niceMinValue;
	        var minorTickSpacing = 0;
	        var majorTickSpacing = 0;
	        var maxNoOfMinorTicks = 10;
	        var maxNoOfMajorTicks = 10;
	
	        // Method to calculate nice values for min, max and range for the tickmarks
	        var calculate = function calculate() {
	            if (niceScale) {
	                niceRange = calcNiceNumber(maxValue - minValue, false);
	                majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);
	                niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;
	                niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;
	                minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);
	                minValue = niceMinValue;
	                maxValue = niceMaxValue;
	                range = maxValue - minValue;
	            } else {
	                niceRange = (maxValue - minValue);
	                niceMinValue = minValue;
	                niceMaxValue = maxValue;
	                range = niceRange;
	                //minorTickSpacing = 1;
	                //majorTickSpacing = 10;
	                majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);
	                minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);
	            }
	
	            switch (gaugeType.type) {
	            case 'type1':
	                freeAreaAngle = 0;
	                rotationOffset = PI;
	                tickmarkOffset = HALF_PI;
	                angleRange = HALF_PI;
	                angleStep = angleRange / range;
	                break;
	
	            case 'type2':
	                freeAreaAngle = 0;
	                rotationOffset = PI;
	                tickmarkOffset = HALF_PI;
	                angleRange = PI;
	                angleStep = angleRange / range;
	                break;
	
	            case 'type3':
	                freeAreaAngle = 0;
	                rotationOffset = HALF_PI;
	                tickmarkOffset = 0;
	                angleRange = 1.5 * PI;
	                angleStep = angleRange / range;
	                break;
	
	            case 'type4':       // fall through
	            /* falls through */
	            default:
	                freeAreaAngle = 60 * RAD_FACTOR;
	                rotationOffset = HALF_PI + (freeAreaAngle / 2);
	                tickmarkOffset = 0;
	                angleRange = TWO_PI - freeAreaAngle;
	                angleStep = angleRange / range;
	                break;
	            }
	            angle = rotationOffset + (value - minValue) * angleStep;
	        };
	
	        //********************************* Private methods *********************************
	        // Draw all static painting code to background
	        var init = function (parameters) {
	            parameters = parameters || {};
	            var drawFrame = (undefined === parameters.frame ? false : parameters.frame);
	            var drawBackground = (undefined === parameters.background ? false : parameters.background);
	            var drawLed = (undefined === parameters.led ? false : parameters.led);
	            var drawUserLed = (undefined === parameters.userLed ? false : parameters.userLed);
	            var drawValue =  (undefined === parameters.value ? false : parameters.value);
	            var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	            var drawTrend = (undefined === parameters.trend ? false : parameters.trend);
	
	            initialized = true;
	
	            calculate();
	
	            // Create frame in frame buffer (frameBuffer)
	            if (drawFrame && frameVisible) {
	                drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            // Create background in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	
	                // Create custom layer in background buffer (backgroundBuffer)
	                drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            if (drawLed) {
	                // Draw LED ON in ledBuffer_ON
	                ledContextOn.drawImage(createLedImage(LED_SIZE, 1, ledColor), 0, 0);
	
	                // Draw LED OFF in ledBuffer_OFF
	                ledContextOff.drawImage(createLedImage(LED_SIZE, 0, ledColor), 0, 0);
	
	                // Buffer the background of the led for blinking
	                ledBackground = backgroundContext.getImageData(LED_POS_X, LED_POS_Y, LED_SIZE, LED_SIZE);
	            }
	
	            if (drawUserLed) {
	                // Draw user LED ON in userLedBuffer_ON
	                userLedContextOn.drawImage(createLedImage(Math.ceil(LED_SIZE), 1, userLedColor), 0, 0);
	
	                // Draw user LED OFF in userLedBuffer_OFF
	                userLedContextOff.drawImage(createLedImage(Math.ceil(LED_SIZE), 0, userLedColor), 0, 0);
	            }
	
	            if (drawBackground) {
	                // Create bargraphtrack in background buffer (backgroundBuffer)
	                drawBargraphTrackImage(backgroundContext);
	            }
	
	            // Create tickmarks in background buffer (backgroundBuffer)
	            if (drawBackground  && backgroundVisible) {
	                drawTickmarksImage(backgroundContext, labelNumberFormat);
	
	                // Create title in background buffer (backgroundBuffer)
	                drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, true, true);
	            }
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            if (drawBackground && lcdVisible) {
	                lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor);
	                backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY);
	            }
	
	            // Convert Section values into angles
	            isSectionsVisible = false;
	            if (useSectionColors && null !== section && 0 < section.length) {
	                isSectionsVisible = true;
	                var sectionIndex = section.length;
	                sectionAngles = [];
	                do {
	                    sectionIndex--;
	                    sectionAngles.push({start: (((section[sectionIndex].start + Math.abs(minValue)) / (maxValue - minValue)) * degAngleRange),
	                                         stop: (((section[sectionIndex].stop + Math.abs(minValue)) / (maxValue - minValue)) * degAngleRange),
	                                        color: customColorDef(section[sectionIndex].color)});
	                } while (0 < sectionIndex);
	            }
	
	            // Use a gradient for the valueColor?
	            isGradientVisible = false;
	            if (useValueGradient && valueGradient !== null) {
	                // force section colors off!
	                isSectionsVisible = false;
	                isGradientVisible = true;
	            }
	
	            // Create an image of an active led in active led buffer (activeLedBuffer)
	            if (drawValue) {
	                drawActiveLed(activeLedContext, valueColor);
	            }
	
	            // Create foreground in foreground buffer (foregroundBuffer)
	            if (drawForeground && foregroundVisible) {
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);
	            }
	
	            // Create the trend indicator buffers
	            if (drawTrend && trendVisible) {
	                trendUpBuffer = createTrendIndicator(trendSize, steelseries.TrendState.UP, trendColors);
	                trendSteadyBuffer = createTrendIndicator(trendSize, steelseries.TrendState.STEADY, trendColors);
	                trendDownBuffer = createTrendIndicator(trendSize, steelseries.TrendState.DOWN, trendColors);
	                trendOffBuffer = createTrendIndicator(trendSize, steelseries.TrendState.OFF, trendColors);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetFrame = (undefined === buffers.frame ? false : buffers.frame);
	            var resetBackground = (undefined === buffers.background ? false : buffers.background);
	            var resetLed = (undefined === buffers.led ? false : buffers.led);
	            var resetUserLed = (undefined === buffers.userLed ? false : buffers.userLed);
	            var resetValue = (undefined === buffers.value ? false : buffers.value);
	            var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            // Buffer for the frame
	            if (resetFrame) {
	                frameBuffer.width = size;
	                frameBuffer.height = size;
	                frameContext = frameBuffer.getContext('2d');
	            }
	
	            // Buffer for static background painting code
	            if (resetBackground) {
	                backgroundBuffer.width = size;
	                backgroundBuffer.height = size;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	
	            // Buffer for active bargraph led
	            if (resetValue) {
	                activeLedBuffer.width = Math.ceil(size * 0.060747);
	                activeLedBuffer.height = Math.ceil(size * 0.023364);
	                activeLedContext = activeLedBuffer.getContext('2d');
	            }
	
	            if (resetLed) {
	                // Buffer for led on painting code
	                ledBufferOn.width = Math.ceil(LED_SIZE);
	                ledBufferOn.height = Math.ceil(LED_SIZE);
	                ledContextOn = ledBufferOn.getContext('2d');
	
	                // Buffer for led off painting code
	                ledBufferOff.width = Math.ceil(LED_SIZE);
	                ledBufferOff.height = Math.ceil(LED_SIZE);
	                ledContextOff = ledBufferOff.getContext('2d');
	
	                // Buffer for current led painting code
	                ledBuffer = ledBufferOff;
	            }
	
	            if (resetUserLed) {
	                userLedBufferOn.width = Math.ceil(LED_SIZE);
	                userLedBufferOn.height = Math.ceil(LED_SIZE);
	                userLedContextOn = userLedBufferOn.getContext('2d');
	
	                userLedBufferOff.width = Math.ceil(LED_SIZE);
	                userLedBufferOff.height = Math.ceil(LED_SIZE);
	                userLedContextOff = userLedBufferOff.getContext('2d');
	
	                // Buffer for current user led painting code
	                userLedBuffer = userLedBufferOff;
	            }
	
	            // Buffer for static foreground painting code
	            if (resetForeground) {
	                foregroundBuffer.width = size;
	                foregroundBuffer.height = size;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        var drawBargraphTrackImage = function (ctx) {
	
	            ctx.save();
	
	            // Bargraphtrack
	
	            // Frame
	            ctx.save();
	            ctx.lineWidth = size * 0.085;
	            ctx.beginPath();
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset - 4 * RAD_FACTOR);
	            ctx.translate(-centerX, -centerY);
	            ctx.arc(centerX, centerY, imageWidth * 0.355140, 0, angleRange + 8 * RAD_FACTOR, false);
	            ctx.rotate(-rotationOffset);
	            var ledTrackFrameGradient = ctx.createLinearGradient(0, 0.107476 * imageHeight, 0, 0.897195 * imageHeight);
	            ledTrackFrameGradient.addColorStop(0, '#000000');
	            ledTrackFrameGradient.addColorStop(0.22, '#333333');
	            ledTrackFrameGradient.addColorStop(0.76, '#333333');
	            ledTrackFrameGradient.addColorStop(1, '#cccccc');
	            ctx.strokeStyle = ledTrackFrameGradient;
	            ctx.stroke();
	            ctx.restore();
	
	            // Main
	            ctx.save();
	            ctx.lineWidth = size * 0.075;
	            ctx.beginPath();
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset - 4 * RAD_FACTOR);
	            ctx.translate(-centerX, -centerY);
	            ctx.arc(centerX, centerY, imageWidth * 0.355140, 0, angleRange + 8 * RAD_FACTOR, false);
	            ctx.rotate(-rotationOffset);
	            var ledTrackMainGradient = ctx.createLinearGradient(0, 0.112149 * imageHeight, 0, 0.892523 * imageHeight);
	            ledTrackMainGradient.addColorStop(0, '#111111');
	            ledTrackMainGradient.addColorStop(1, '#333333');
	            ctx.strokeStyle = ledTrackMainGradient;
	            ctx.stroke();
	            ctx.restore();
	
	            // Draw inactive leds
	            var ledCenterX = (imageWidth * 0.116822 + imageWidth * 0.060747) / 2;
	            var ledCenterY = (imageWidth * 0.485981 + imageWidth * 0.023364) / 2;
	            var ledOffGradient = ctx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, 0.030373 * imageWidth);
	            ledOffGradient.addColorStop(0, '#3c3c3c');
	            ledOffGradient.addColorStop(1, '#323232');
	            var angle = 0;
	            for (angle = 0; angle <= degAngleRange; angle += 5) {
	                ctx.save();
	                ctx.translate(centerX, centerY);
	                ctx.rotate((angle * RAD_FACTOR) + bargraphOffset);
	                ctx.translate(-centerX, -centerY);
	                ctx.beginPath();
	                ctx.rect(imageWidth * 0.116822, imageWidth * 0.485981, imageWidth * 0.060747, imageWidth * 0.023364);
	                ctx.closePath();
	                ctx.fillStyle = ledOffGradient;
	                ctx.fill();
	                ctx.restore();
	            }
	
	            ctx.restore();
	        };
	
	        var drawActiveLed = function (ctx, color) {
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
	            ctx.closePath();
	            var ledCenterX = (ctx.canvas.width / 2);
	            var ledCenterY = (ctx.canvas.height / 2);
	            var ledGradient = mainCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, ctx.canvas.width / 2);
	            ledGradient.addColorStop(0, color.light.getRgbaColor());
	            ledGradient.addColorStop(1, color.dark.getRgbaColor());
	            ctx.fillStyle = ledGradient;
	            ctx.fill();
	            ctx.restore();
	        };
	
	        var drawLcdText = function (ctx, value) {
	
	            ctx.save();
	            ctx.textAlign = 'right';
	            ctx.strokeStyle = lcdColor.textColor;
	            ctx.fillStyle = lcdColor.textColor;
	
	            if (lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) {
	                ctx.shadowColor = 'gray';
	                ctx.shadowOffsetX = imageWidth * 0.007;
	                ctx.shadowOffsetY = imageWidth * 0.007;
	                ctx.shadowBlur = imageWidth * 0.007;
	            }
	
	            if (digitalFont) {
	                ctx.font = lcdFont;
	            } else {
	                ctx.font = stdFont;
	            }
	            ctx.fillText(value.toFixed(lcdDecimals), lcdPosX + lcdWidth - lcdWidth * 0.05, lcdPosY + lcdHeight * 0.5 + lcdFontHeight * 0.38, lcdWidth * 0.9);
	
	            ctx.restore();
	        };
	
	        var drawTickmarksImage = function (ctx, labelNumberFormat) {
	            var alpha = rotationOffset,      // Tracks total rotation
	                rotationStep = angleStep * minorTickSpacing,
	                textRotationAngle,
	                fontSize = Math.ceil(imageWidth * 0.04),
	                valueCounter = minValue,
	                majorTickCounter = maxNoOfMinorTicks - 1,
	                TEXT_TRANSLATE_X = imageWidth * 0.28,
	                TEXT_WIDTH = imageWidth * 0.1,
	                MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2)),
	                i;
	
	            backgroundColor.labelColor.setAlpha(1);
	            ctx.save();
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	            ctx.font = fontSize + 'px ' + stdFontName;
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset);
	
	            if (gaugeType.type === 'type1' || gaugeType.type === 'type2') {
	                TEXT_WIDTH = imageWidth * 0.0375;
	            }
	
	            for (i = minValue; parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED; i += minorTickSpacing) {
	                textRotationAngle = + rotationStep + HALF_PI;
	                majorTickCounter++;
	                // Draw major tickmarks
	                if (majorTickCounter === maxNoOfMinorTicks) {
	                    ctx.save();
	                    ctx.translate(TEXT_TRANSLATE_X, 0);
	
	                    switch (tickLabelOrientation.type) {
	                    case 'horizontal':
	                        textRotationAngle = -alpha;
	                        break;
	
	                    case 'tangent':
	                        textRotationAngle = (alpha <= HALF_PI + PI ? PI : 0);
	                        break;
	
	                    case 'normal':
	                    /* falls through */
	                    default:
	                        textRotationAngle = HALF_PI;
	                        break;
	                    }
	                    ctx.rotate(textRotationAngle);
	
	                    switch (labelNumberFormat.format) {
	                    case 'fractional':
	                        ctx.fillText((valueCounter.toFixed(fractionalScaleDecimals)), 0, 0, TEXT_WIDTH);
	                        break;
	
	                    case 'scientific':
	                        ctx.fillText((valueCounter.toPrecision(2)), 0, 0, TEXT_WIDTH);
	                        break;
	
	                    case 'standard':
	                    /* falls through */
	                    default:
	                        ctx.fillText((valueCounter.toFixed(0)), 0, 0, TEXT_WIDTH);
	                        break;
	                    }
	                    ctx.translate(-TEXT_TRANSLATE_X, 0);
	                    ctx.restore();
	
	                    valueCounter += majorTickSpacing;
	                    majorTickCounter = 0;
	                    ctx.rotate(rotationStep);
	                    alpha += rotationStep;
	                    continue;
	                }
	                ctx.rotate(rotationStep);
	                alpha += rotationStep;
	            }
	
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var blink = function (blinking) {
	            if (blinking) {
	                ledTimerId = setInterval(toggleAndRepaintLed, 1000);
	            } else {
	                clearInterval(ledTimerId);
	                ledBuffer = ledBufferOff;
	            }
	        };
	
	        var blinkUser = function (blinking) {
	            if (blinking) {
	                userLedTimerId = setInterval(toggleAndRepaintUserLed, 1000);
	            } else {
	                clearInterval(userLedTimerId);
	                userLedBuffer = userLedBufferOff;
	            }
	        };
	
	        var toggleAndRepaintLed = function () {
	            if (ledVisible) {
	                if (ledBuffer === ledBufferOn) {
	                    ledBuffer = ledBufferOff;
	                } else {
	                    ledBuffer = ledBufferOn;
	                }
	                if (!repainting) {
	                    repainting = true;
	                    requestAnimFrame(self.repaint);
	                }
	            }
	        };
	
	        var toggleAndRepaintUserLed = function () {
	            if (userLedVisible) {
	                if (userLedBuffer === userLedBufferOn) {
	                    userLedBuffer = userLedBufferOff;
	                } else {
	                    userLedBuffer = userLedBufferOn;
	                }
	                if (!repainting) {
	                    repainting = true;
	                    requestAnimFrame(self.repaint);
	                }
	            }
	        };
	
	        //********************************* Public methods *********************************
	        this.setValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (value !== targetValue) {
	                value = targetValue;
	                if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                    (value <= threshold && !ledBlinking && !thresholdRising)) {
	                    ledBlinking = true;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.play();
	                    }
	                } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                           (value > threshold && ledBlinking && !thresholdRising)) {
	                    ledBlinking = false;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.pause();
	                    }
	                }
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue)),
	                gauge = this,
	                time;
	
	            if (value !== targetValue) {
	                if (undefined !== tween && tween.isPlaying) {
	                    tween.stop();
	                }
	
	                time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);
	                time = Math.max(time, fullScaleDeflectionTime / 5);
	                tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);
	                //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);
	                //tween = new Tween(new Object(), '', Tween.strongEaseInOut, this.value, targetValue, 1);
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos;
	
	                    if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                        (value <= threshold && !ledBlinking && !thresholdRising)) {
	                        ledBlinking = true;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.play();
	                        }
	                    } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                               (value > threshold && ledBlinking && !thresholdRising)) {
	                        ledBlinking = false;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.pause();
	                        }
	                    }
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({background: true,
	                          led: true});
	            backgroundColor = newBackgroundColor;
	            init({background: true,
	                  led: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers({foreground: true});
	            foregroundType = newForegroundType;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setValueColor = function (newValueColor) {
	            resetBuffers({value: true});
	            valueColor = newValueColor;
	            init({value: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedColor = function (newLedColor) {
	            resetBuffers({led: true});
	            ledColor = newLedColor;
	            init({led: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setUserLedColor = function (newLedColor) {
	            resetBuffers({userLed: true});
	            userLedColor = newLedColor;
	            init({userLed: true});
	            this.repaint();
	            return this;
	        };
	
	        this.toggleUserLed = function () {
	            if (userLedBuffer === userLedBufferOn) {
	                userLedBuffer = userLedBufferOff;
	            } else {
	                userLedBuffer = userLedBufferOn;
	            }
	            this.repaint();
	            return this;
	        };
	
	        this.setUserLedOnOff = function (on) {
	            if (true === on) {
	                userLedBuffer = userLedBufferOn;
	            } else {
	                userLedBuffer = userLedBufferOff;
	            }
	            this.repaint();
	            return this;
	        };
	
	        this.blinkUserLed = function (blink) {
	            if (blink) {
	                if (!userLedBlinking) {
	                    blinkUser(true);
	                    userLedBlinking = true;
	                }
	            } else {
	                if (userLedBlinking) {
	                    clearInterval(userLedTimerId);
	                    userLedBlinking = false;
	                }
	            }
	            return this;
	        };
	
	        this.setLedVisible = function (visible) {
	            ledVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setUserLedVisible = function (visible) {
	            userLedVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            lcdColor = newLcdColor;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdDecimals = function (decimals) {
	            lcdDecimals = parseInt(decimals, 10);
	            this.repaint();
	            return this;
	        };
	
	        this.setSection = function (areaSec) {
	            section = areaSec;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setSectionActive = function (value) {
	            useSectionColors = value;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setGradient = function (grad) {
	            valueGradient = grad;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setGradientActive = function (value) {
	            useValueGradient = value;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setMinValue = function (value) {
	            minValue = value;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMinValue = function () {
	            return minValue;
	        };
	
	        this.setMaxValue = function (value) {
	            maxValue = value;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMaxValue = function () {
	            return maxValue;
	        };
	
	        this.setThreshold = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);
	            threshold = targetValue;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdRising = function (rising) {
	            thresholdRising = !!rising;
	            // reset existing threshold alerts
	            ledBlinking = !ledBlinking;
	            blink(ledBlinking);
	            this.repaint();
	            return this;
	        };
	
	        this.setTitleString = function (title) {
	            titleString = title;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setUnitString = function (unit) {
	            unitString = unit;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setTrend = function (newValue) {
	            trendIndicator = newValue;
	            this.repaint();
	            return this;
	        };
	
	        this.setTrendVisible = function (visible) {
	            trendVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setFractionalScaleDecimals = function (decimals) {
	            fractionalScaleDecimals = parseInt(decimals, 10);
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	        };
	
	        this.setLabelNumberFormat = function (format) {
	            labelNumberFormat = format;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            var activeLedAngle = ((value - minValue) / (maxValue - minValue)) * degAngleRange,
	                activeLedColor,
	                lastActiveLedColor = valueColor,
	                angle, i,
	                currentValue,
	                gradRange,
	                fraction;
	
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      led: true,
	                      userLed: true,
	                      value: true,
	                      trend: true,
	                      foreground: true});
	            }
	
	            mainCtx.clearRect(0, 0, size, size);
	
	            // Draw frame image
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            mainCtx.drawImage(backgroundBuffer, 0, 0);
	
	            // Draw active leds
	            for (angle = 0; angle <= activeLedAngle; angle += 5) {
	                //check for LED color
	                activeLedColor = valueColor;
	                // Use a gradient for value colors?
	                if (isGradientVisible) {
	                    // Convert angle back to value
	                    currentValue = minValue + (angle / degAngleRange) * (maxValue - minValue);
	                    gradRange = valueGradient.getEnd() - valueGradient.getStart();
	                    fraction = currentValue / gradRange;
	                    fraction = Math.max(Math.min(fraction, 1), 0);
	                    activeLedColor = customColorDef(valueGradient.getColorAt(fraction).getRgbaColor());
	                } else if (isSectionsVisible) {
	                    for (i = 0; i < sectionAngles.length; i++) {
	                        if (angle >= sectionAngles[i].start && angle < sectionAngles[i].stop) {
	                            activeLedColor = sectionAngles[i].color;
	                            break;
	                        }
	                    }
	                }
	                // Has LED color changed? If so redraw the buffer
	                if (lastActiveLedColor.medium.getHexColor() !== activeLedColor.medium.getHexColor()) {
	                    drawActiveLed(activeLedContext, activeLedColor);
	                    lastActiveLedColor = activeLedColor;
	                }
	                mainCtx.save();
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate((angle * RAD_FACTOR) + bargraphOffset);
	                mainCtx.translate(-centerX, -centerY);
	                mainCtx.drawImage(activeLedBuffer, ACTIVE_LED_POS_X, ACTIVE_LED_POS_Y);
	                mainCtx.restore();
	            }
	
	            // Draw lcd display
	            if (lcdVisible) {
	                drawLcdText(mainCtx, value);
	            }
	
	            // Draw led
	            if (ledVisible) {
	                mainCtx.drawImage(ledBuffer, LED_POS_X, LED_POS_Y);
	            }
	
	            // Draw user led
	            if (userLedVisible) {
	                mainCtx.drawImage(userLedBuffer, USER_LED_POS_X, USER_LED_POS_Y);
	            }
	
	            // Draw the trend indicator
	            if (trendVisible) {
	                switch (trendIndicator.state) {
	                case 'up':
	                    mainCtx.drawImage(trendUpBuffer, trendPosX, trendPosY);
	                    break;
	                case 'steady':
	                    mainCtx.drawImage(trendSteadyBuffer, trendPosX, trendPosY);
	                    break;
	                case 'down':
	                    mainCtx.drawImage(trendDownBuffer, trendPosX, trendPosY);
	                    break;
	                case 'off':
	                    mainCtx.drawImage(trendOffBuffer, trendPosX, trendPosY);
	                    break;
	                }
	            }
	
	            // Draw foreground
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var radialVertical = function (canvas, parameters) {
	        parameters = parameters || {};
	        var orientation = (undefined === parameters.orientation ? steelseries.Orientation.NORTH : parameters.orientation),
	            size = (undefined === parameters.size ? 0 : parameters.size),
	            minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),
	            maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),
	            niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),
	            threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue: parameters.threshold),
	            section = (undefined === parameters.section ? null : parameters.section),
	            area = (undefined === parameters.area ? null : parameters.area),
	            titleString = (undefined === parameters.titleString ? '' : parameters.titleString),
	            unitString = (undefined === parameters.unitString ? '' : parameters.unitString),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            pointerType = (undefined === parameters.pointerType ? steelseries.PointerType.TYPE1 : parameters.pointerType),
	            pointerColor = (undefined === parameters.pointerColor ? steelseries.ColorDef.RED : parameters.pointerColor),
	            knobType = (undefined === parameters.knobType ? steelseries.KnobType.STANDARD_KNOB : parameters.knobType),
	            knobStyle = (undefined === parameters.knobStyle ? steelseries.KnobStyle.SILVER : parameters.knobStyle),
	            ledColor = (undefined === parameters.ledColor ? steelseries.LedColor.RED_LED : parameters.ledColor),
	            ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),
	            thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),
	            thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),
	            minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),
	            maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            labelNumberFormat = (undefined === parameters.labelNumberFormat ? steelseries.LabelNumberFormat.STANDARD : parameters.labelNumberFormat),
	            playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),
	            alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),
	            fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        // Create audio tag for alarm sound
	        if (playAlarm && alarmSound !== false) {
	            var audioElement = doc.createElement('audio');
	            audioElement.setAttribute('src', alarmSound);
	            audioElement.setAttribute('preload', 'auto');
	        }
	        var gaugeType = steelseries.GaugeType.TYPE5;
	
	        var self = this;
	        var value = minValue;
	
	        // Properties
	        var minMeasuredValue = maxValue;
	        var maxMeasuredValue = minValue;
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var ledBlinking = false;
	
	        var ledTimerId = 0;
	        var tween;
	        var repainting = false;
	
	        // Tickmark specific private variables
	        var niceMinValue = minValue;
	        var niceMaxValue = maxValue;
	        var niceRange = maxValue - minValue;
	        var range = niceMaxValue - niceMinValue;
	        var minorTickSpacing = 0;
	        var majorTickSpacing = 0;
	        var maxNoOfMinorTicks = 10;
	        var maxNoOfMajorTicks = 10;
	
	        var freeAreaAngle = 0;
	        var rotationOffset = 1.25 * PI;
	        var tickmarkOffset = 1.25 * PI;
	        var angleRange = HALF_PI;
	        var angleStep = angleRange / range;
	        var shadowOffset = imageWidth * 0.006;
	        var pointerOffset = imageWidth * 1.17 / 2;
	
	        var initialized = false;
	
	        var angle = rotationOffset + (value - minValue) * angleStep;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight * 0.733644;
	
	        // Misc
	        var ledPosX = 0.455 * imageWidth;
	        var ledPosY = 0.51 * imageHeight;
	
	        // Method to calculate nice values for min, max and range for the tickmarks
	        var calculate = function calculate() {
	            if (niceScale) {
	                niceRange = calcNiceNumber(maxValue - minValue, false);
	                majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);
	                niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;
	                niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;
	                minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);
	                minValue = niceMinValue;
	                maxValue = niceMaxValue;
	                range = maxValue - minValue;
	            }
	            else {
	                niceRange = (maxValue - minValue);
	                niceMinValue = minValue;
	                niceMaxValue = maxValue;
	                range = niceRange;
	                minorTickSpacing = 1;
	                majorTickSpacing = 10;
	            }
	
	            freeAreaAngle = 0;
	            rotationOffset = 1.25 * PI;
	            tickmarkOffset = 1.25 * PI;
	            angleRange = HALF_PI;
	            angleStep = angleRange / range;
	
	            angle = rotationOffset + (value - minValue) * angleStep;
	        };
	
	        // **************   Buffer creation  ********************
	        // Buffer for the frame
	        var frameBuffer = createBuffer(size, size);
	        var frameContext = frameBuffer.getContext('2d');
	
	        // Buffer for the background
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        // Buffer for led on painting code
	        var ledBufferOn = createBuffer(size * 0.093457, size * 0.093457);
	        var ledContextOn = ledBufferOn.getContext('2d');
	
	        // Buffer for led off painting code
	        var ledBufferOff = createBuffer(size * 0.093457, size * 0.093457);
	        var ledContextOff = ledBufferOff.getContext('2d');
	
	        // Buffer for current led painting code
	        var ledBuffer = ledBufferOff;
	
	        // Buffer for the minMeasuredValue indicator
	        var minMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));
	        var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for the maxMeasuredValue indicator
	        var maxMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));
	        var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for pointer image painting code
	        var pointerBuffer = createBuffer(size, size);
	        var pointerContext = pointerBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // **************   Image creation  ********************
	        var drawPostsImage = function (ctx) {
	            if ('type5' === gaugeType.type) {
	                ctx.save();
	                if (orientation.type === 'west') {
	                    // Min post
	                    ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.44, imageHeight * 0.80);
	                    // Max post
	                    ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.44, imageHeight * 0.16);
	                } else if (orientation.type === 'east') {
	                    // Min post
	                    ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.52, imageHeight * 0.80);
	                    // Max post
	                    ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.52, imageHeight * 0.16);
	                } else {
	                    // Min post
	                    ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.2 - imageHeight * 0.037383, imageHeight * 0.446666);
	                    // Max post
	                    ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), steelseries.KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.8, imageHeight * 0.446666);
	                }
	                ctx.restore();
	            }
	        };
	
	        var createThresholdImage = function () {
	            var thresholdBuffer = doc.createElement('canvas');
	            thresholdBuffer.width = Math.ceil(size * 0.046728);
	            thresholdBuffer.height = Math.ceil(thresholdBuffer.width * 0.9);
	            var thresholdCtx = thresholdBuffer.getContext('2d');
	
	            thresholdCtx.save();
	            var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);
	            gradThreshold.addColorStop(0, '#520000');
	            gradThreshold.addColorStop(0.3, '#fc1d00');
	            gradThreshold.addColorStop(0.59, '#fc1d00');
	            gradThreshold.addColorStop(1, '#520000');
	            thresholdCtx.fillStyle = gradThreshold;
	
	            thresholdCtx.beginPath();
	            thresholdCtx.moveTo(thresholdBuffer.width * 0.5, 0.1);
	            thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);
	            thresholdCtx.lineTo(thresholdBuffer.width * 0.1, thresholdBuffer.height * 0.9);
	            thresholdCtx.lineTo(thresholdBuffer.width * 0.5, 0.1);
	            thresholdCtx.closePath();
	
	            thresholdCtx.fill();
	            thresholdCtx.strokeStyle = '#FFFFFF';
	            thresholdCtx.stroke();
	
	            thresholdCtx.restore();
	
	            return thresholdBuffer;
	        };
	
	        var drawAreaSectionImage = function (ctx, start, stop, color, filled) {
	            ctx.save();
	            ctx.strokeStyle = color;
	            ctx.fillStyle = color;
	            ctx.lineWidth = imageWidth * 0.035;
	            var startAngle = (angleRange / range * start - angleRange / range * minValue);
	            var stopAngle = startAngle + (stop - start) / (range / angleRange);
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset);
	            ctx.beginPath();
	            if (filled) {
	                ctx.moveTo(0, 0);
	                ctx.arc(0, 0, imageWidth * 0.365 - ctx.lineWidth / 2, startAngle, stopAngle, false);
	            } else {
	                ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false);
	            }
	            if (filled) {
	                ctx.moveTo(0, 0);
	                ctx.fill();
	            } else {
	                ctx.stroke();
	            }
	
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var drawTitleImage = function (ctx) {
	            var titleWidth, unitWidth;
	            ctx.save();
	            ctx.textAlign = 'left';
	            ctx.textBaseline = 'middle';
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	
	            ctx.font = 0.046728 * imageWidth + 'px ' + stdFontName;
	            titleWidth = ctx.measureText(titleString).width;
	            ctx.fillText(titleString, (imageWidth - titleWidth) / 2, imageHeight * 0.4, imageWidth * 0.3);
	            unitWidth = ctx.measureText(unitString).width;
	            ctx.fillText(unitString, (imageWidth - unitWidth) / 2, imageHeight * 0.47, imageWidth * 0.2);
	
	            ctx.restore();
	        };
	
	        var drawTickmarksImage = function (ctx, labelNumberFormat) {
	            backgroundColor.labelColor.setAlpha(1);
	            ctx.save();
	
	            if (steelseries.Orientation.WEST === orientation) {
	                ctx.translate(centerX, centerX);
	                ctx.rotate(-HALF_PI);
	                ctx.translate(-centerX, -centerX);
	            }
	            if (steelseries.Orientation.EAST === orientation) {
	                ctx.translate(centerX, centerX);
	                ctx.rotate(HALF_PI);
	                ctx.translate(-centerX, -centerX);
	            }
	
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	            var fontSize = Math.ceil(imageWidth * 0.04);
	            ctx.font = fontSize + 'px ' + stdFontName;
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset);
	            var rotationStep = angleStep * minorTickSpacing;
	            var textRotationAngle;
	
	            var valueCounter = minValue;
	            var majorTickCounter = maxNoOfMinorTicks - 1;
	
	            var OUTER_POINT = imageWidth * 0.44;
	            var MAJOR_INNER_POINT = imageWidth * 0.41;
	            var MED_INNER_POINT = imageWidth * 0.415;
	            var MINOR_INNER_POINT = imageWidth * 0.42;
	            var TEXT_TRANSLATE_X = imageWidth * 0.48;
	            var TEXT_WIDTH = imageWidth * 0.04;
	            var HALF_MAX_NO_OF_MINOR_TICKS = maxNoOfMinorTicks / 2;
	            var MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2));
	            var i;
	
	            for (i = minValue; parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED; i += minorTickSpacing) {
	                textRotationAngle = + rotationStep + HALF_PI;
	                majorTickCounter++;
	                // Draw major tickmarks
	                if (majorTickCounter === maxNoOfMinorTicks) {
	                    ctx.lineWidth = 1.5;
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(MAJOR_INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                    ctx.save();
	                    ctx.translate(TEXT_TRANSLATE_X, 0);
	                    ctx.rotate(textRotationAngle);
	                    switch (labelNumberFormat.format) {
	                    case 'fractional':
	                        ctx.fillText((valueCounter.toFixed(2)), 0, 0, TEXT_WIDTH);
	                        break;
	
	                    case 'scientific':
	                        ctx.fillText((valueCounter.toPrecision(2)), 0, 0, TEXT_WIDTH);
	                        break;
	
	                    case 'standard':
	                    /* falls through */
	                    default:
	                        ctx.fillText((valueCounter.toFixed(0)), 0, 0, TEXT_WIDTH);
	                        break;
	                    }
	                    ctx.translate(-TEXT_TRANSLATE_X, 0);
	                    ctx.restore();
	
	                    valueCounter += majorTickSpacing;
	                    majorTickCounter = 0;
	                    ctx.rotate(rotationStep);
	                    continue;
	                }
	
	                // Draw tickmark every minor tickmark spacing
	                if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (HALF_MAX_NO_OF_MINOR_TICKS)) {
	                    ctx.lineWidth = 1;
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(MED_INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                } else {
	                    ctx.lineWidth = 0.5;
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(MINOR_INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                }
	                ctx.rotate(rotationStep);
	            }
	
	            /*
	             // Logarithmic scale
	             var tmp = 0.1;
	             var minValueLog10 = 0.1;
	             var maxValueLog10 = parseInt(Math.pow(10, Math.ceil(Math.log10(maxValue))));
	             var drawLabel = true;
	             angleStep = angleRange / (maxValueLog10 - minValueLog10)
	             for (var scaleFactor = minValueLog10 ; scaleFactor <= maxValueLog10 ; scaleFactor *= 10)
	             {
	             for (var i = parseFloat((1 * scaleFactor).toFixed(1)) ; i < parseFloat((10 * scaleFactor).toFixed(1)) ; i += scaleFactor)
	             {
	             textRotationAngle =+ rotationStep + HALF_PI;
	
	             if(drawLabel)
	             {
	             ctx.lineWidth = 1.5;
	             ctx.beginPath();
	             ctx.moveTo(imageWidth * 0.38,0);
	             ctx.lineTo(imageWidth * 0.35,0);
	             ctx.closePath();
	             ctx.stroke();
	             ctx.save();
	             ctx.translate(imageWidth * 0.31, 0);
	             ctx.rotate(textRotationAngle);
	             ctx.fillText(parseFloat((i).toFixed(1)), 0, 0, imageWidth * 0.0375);
	             ctx.translate(-imageWidth * 0.31, 0);
	             ctx.restore();
	             drawLabel = false;
	             }
	             else
	             {
	             ctx.lineWidth = 0.5;
	             ctx.beginPath();
	             ctx.moveTo(imageWidth * 0.38,0);
	             ctx.lineTo(imageWidth * 0.36,0);
	             ctx.closePath();
	             ctx.stroke();
	             }
	             //doc.write('log10 scale value: ' + parseFloat((i).toFixed(1)) + '<br>');
	             //Math.log10(parseFloat((i).toFixed(1)));
	
	             ctx.rotate(rotationStep);
	             }
	             tmp = 0.1;
	             drawLabel = true;
	             }
	             */
	
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	        var init = function (parameters) {
	            parameters = parameters || {};
	            var drawFrame = (undefined === parameters.frame ? false : parameters.frame);
	            var drawBackground = (undefined === parameters.background ? false : parameters.background);
	            var drawLed = (undefined === parameters.led ? false : parameters.led);
	            var drawPointer = (undefined === parameters.pointer ? false : parameters.pointer);
	            var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	
	            initialized = true;
	
	            // Calculate the current min and max values and the range
	            calculate();
	
	            // Create frame in frame buffer (backgroundBuffer)
	            if (drawFrame && frameVisible) {
	                drawRadialFrameImage(frameContext, frameDesign, centerX, size / 2, imageWidth, imageHeight);
	            }
	
	            // Create background in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, size / 2, imageWidth, imageHeight);
	            }
	
	            // Draw LED ON in ledBuffer_ON
	            if (drawLed) {
	                ledContextOn.drawImage(createLedImage(Math.ceil(size * 0.093457), 1, ledColor), 0, 0);
	
	                // Draw LED ON in ledBuffer_OFF
	                ledContextOff.drawImage(createLedImage(Math.ceil(size * 0.093457), 0, ledColor), 0, 0);
	            }
	
	            // Draw min measured value indicator in minMeasuredValueBuffer
	            if (minMeasuredValueVisible) {
	                minMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), steelseries.ColorDef.BLUE.dark.getRgbaColor(), true, true), 0, 0);
	                minMeasuredValueCtx.restore();
	            }
	
	            // Draw max measured value indicator in maxMeasuredValueBuffer
	            if (maxMeasuredValueVisible) {
	                maxMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), steelseries.ColorDef.RED.medium.getRgbaColor(), true), 0, 0);
	                maxMeasuredValueCtx.restore();
	            }
	
	            // Create alignment posts in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                drawPostsImage(backgroundContext);
	
	                // Create section in background buffer (backgroundBuffer)
	                if (null !== section && 0 < section.length) {
	                    backgroundContext.save();
	                    if (steelseries.Orientation.WEST === orientation) {
	                        backgroundContext.translate(centerX, centerX);
	                        backgroundContext.rotate(-HALF_PI);
	                        backgroundContext.translate(-centerX, -centerX);
	                    } else if (steelseries.Orientation.EAST === orientation) {
	                        backgroundContext.translate(centerX, centerX);
	                        backgroundContext.rotate(HALF_PI);
	                        backgroundContext.translate(-centerX, -centerX);
	                    }
	                    var sectionIndex = section.length;
	                    do {
	                        sectionIndex--;
	                        drawAreaSectionImage(backgroundContext, section[sectionIndex].start, section[sectionIndex].stop, section[sectionIndex].color, false);
	                    }
	                    while (0 < sectionIndex);
	                    backgroundContext.restore();
	                }
	
	                // Create area in background buffer (backgroundBuffer)
	                if (null !== area && 0 < area.length) {
	                    if (steelseries.Orientation.WEST === orientation) {
	                        backgroundContext.translate(centerX, centerX);
	                        backgroundContext.rotate(-HALF_PI);
	                        backgroundContext.translate(-centerX, -centerX);
	                    }
	                    if (steelseries.Orientation.EAST === orientation) {
	                        backgroundContext.translate(centerX, centerX);
	                        backgroundContext.rotate(HALF_PI);
	                        backgroundContext.translate(-centerX, -centerX);
	                    }
	                    var areaIndex = area.length;
	                    do {
	                        areaIndex--;
	                        drawAreaSectionImage(backgroundContext, area[areaIndex].start, area[areaIndex].stop, area[areaIndex].color, true);
	                    }
	                    while (0 < areaIndex);
	                    backgroundContext.restore();
	                }
	
	                // Create tickmarks in background buffer (backgroundBuffer)
	                drawTickmarksImage(backgroundContext, labelNumberFormat);
	
	                // Create title in background buffer (backgroundBuffer)
	                drawTitleImage(backgroundContext);
	            }
	
	            // Draw threshold image to background context
	            if (thresholdVisible) {
	                backgroundContext.save();
	                if (steelseries.Orientation.WEST === orientation) {
	                    backgroundContext.translate(centerX, centerX);
	                    backgroundContext.rotate(-HALF_PI);
	                    backgroundContext.translate(-centerX, -centerX);
	                }
	                if (steelseries.Orientation.EAST === orientation) {
	                    backgroundContext.translate(centerX, centerX);
	                    backgroundContext.rotate(HALF_PI);
	                    backgroundContext.translate(-centerX, -centerX);
	                }
	                backgroundContext.translate(centerX, centerY);
	                backgroundContext.rotate(rotationOffset + (threshold - minValue) * angleStep + HALF_PI);
	                backgroundContext.translate(-centerX, -centerY);
	                backgroundContext.drawImage(createThresholdImage(), imageWidth * 0.475, imageHeight * 0.32);
	                backgroundContext.restore();
	            }
	
	            // Create pointer image in pointer buffer (contentBuffer)
	            if (drawPointer) {
	                drawPointerImage(pointerContext, imageWidth * 1.17, pointerType, pointerColor, backgroundColor.labelColor);
	
	            }
	
	            // Create foreground in foreground buffer (foregroundBuffer)
	            if (drawForeground && foregroundVisible) {
	                var knobVisible = (pointerType.type === 'type15' || pointerType.type === 'type16' ? false : true);
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, knobVisible, knobType, knobStyle, gaugeType, orientation);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetFrame = (undefined === buffers.frame ? false : buffers.frame);
	            var resetBackground = (undefined === buffers.background ? false : buffers.background);
	            var resetLed = (undefined === buffers.led ? false : buffers.led);
	            var resetPointer = (undefined === buffers.pointer ? false : buffers.pointer);
	            var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            if (resetFrame) {
	                frameBuffer.width = size;
	                frameBuffer.height = size;
	                frameContext = frameBuffer.getContext('2d');
	            }
	
	            if (resetBackground) {
	                backgroundBuffer.width = size;
	                backgroundBuffer.height = size;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	
	            if (resetLed) {
	                ledBufferOn.width = Math.ceil(size * 0.093457);
	                ledBufferOn.height = Math.ceil(size * 0.093457);
	                ledContextOn = ledBufferOn.getContext('2d');
	
	                ledBufferOff.width = Math.ceil(size * 0.093457);
	                ledBufferOff.height = Math.ceil(size * 0.093457);
	                ledContextOff = ledBufferOff.getContext('2d');
	
	                // Buffer for current led painting code
	                ledBuffer = ledBufferOff;
	            }
	
	            if (resetPointer) {
	                pointerBuffer.width = size;
	                pointerBuffer.height = size;
	                pointerContext = pointerBuffer.getContext('2d');
	            }
	
	            if (resetForeground) {
	                foregroundBuffer.width = size;
	                foregroundBuffer.height = size;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        var blink = function (blinking) {
	            if (blinking) {
	                ledTimerId = setInterval(toggleAndRepaintLed, 1000);
	            } else {
	                clearInterval(ledTimerId);
	                ledBuffer = ledBufferOff;
	            }
	        };
	
	        var toggleAndRepaintLed = function () {
	            if (ledVisible) {
	                if (ledBuffer === ledBufferOn) {
	                    ledBuffer = ledBufferOff;
	                } else {
	                    ledBuffer = ledBufferOn;
	                }
	                if (!repainting) {
	                    repainting = true;
	                    requestAnimFrame(self.repaint);
	                }
	            }
	        };
	
	        //************************************ Public methods **************************************
	        this.setValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (value !== targetValue) {
	                value = targetValue;
	
	                if (value > maxMeasuredValue) {
	                    maxMeasuredValue = value;
	                }
	                if (value < minMeasuredValue) {
	                    minMeasuredValue = value;
	                }
	
	                if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                    (value <= threshold && !ledBlinking && !thresholdRising)) {
	                    ledBlinking = true;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.play();
	                    }
	                } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                           (value > threshold && ledBlinking && !thresholdRising)) {
	                    ledBlinking = false;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.pause();
	                    }
	                }
	
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue)),
	                gauge = this,
	                time;
	
	            if (value !== targetValue) {
	                if (undefined !==  tween && tween.isPlaying) {
	                    tween.stop();
	                }
	
	                time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);
	                time = Math.max(time, fullScaleDeflectionTime / 5);
	                tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);
	                //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);
	                //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos;
	
	                    if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                        (value <= threshold && !ledBlinking && !thresholdRising)) {
	                        ledBlinking = true;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.play();
	                        }
	                    } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                               (value > threshold && ledBlinking && !thresholdRising)) {
	                        ledBlinking = false;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.pause();
	                        }
	                    }
	
	                    if (value > maxMeasuredValue) {
	                        maxMeasuredValue = value;
	                    }
	                    if (value < minMeasuredValue) {
	                        minMeasuredValue = value;
	                    }
	
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.resetMinMeasuredValue = function () {
	            minMeasuredValue = value;
	            this.repaint();
	            return this;
	        };
	
	        this.resetMaxMeasuredValue = function () {
	            maxMeasuredValue = value;
	            this.repaint();
	            return this;
	        };
	
	        this.setMinMeasuredValueVisible = function (visible) {
	            minMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setMaxMeasuredValueVisible = function (visible) {
	            maxMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdVisible = function (visible) {
	            thresholdVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdRising = function (rising) {
	            thresholdRising = !!rising;
	            // reset existing threshold alerts
	            ledBlinking = !ledBlinking;
	            blink(ledBlinking);
	            this.repaint();
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({background: true,
	                          pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false)       // type2 & 13 depend on background
	                          });
	            backgroundColor = newBackgroundColor;
	            init({background: true,
	                  pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false)       // type2 & 13 depend on background
	                });
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers({foreground: true});
	            foregroundType = newForegroundType;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerType = function (newPointerType) {
	            resetBuffers({pointer: true,
	                          foreground: true  // Required as type15 does not need a knob
	                         });
	            pointerType = newPointerType;
	            init({pointer: true,
	                  foreground: true
	                 });
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColor = function (newPointerColor) {
	            resetBuffers({pointer: true});
	            pointerColor = newPointerColor;
	            init({pointer: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedColor = function (newLedColor) {
	            resetBuffers({led: true});
	            ledColor = newLedColor;
	            init({led: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedVisible = function (visible) {
	            ledVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      led: true,
	                      pointer: true,
	                      foreground: true});
	            }
	
	            mainCtx.clearRect(0, 0, size, size);
	            mainCtx.save();
	
	            // Draw frame
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            mainCtx.drawImage(backgroundBuffer, 0, 0);
	
	            // Draw led
	            if (ledVisible) {
	                mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);
	            }
	
	            if (steelseries.Orientation.WEST === orientation) {
	                mainCtx.translate(centerX, centerX);
	                mainCtx.rotate(-HALF_PI);
	                mainCtx.translate(-centerX, -centerX);
	            }
	            if (steelseries.Orientation.EAST === orientation) {
	                mainCtx.translate(centerX, centerX);
	                mainCtx.rotate(HALF_PI);
	                mainCtx.translate(-centerX, -centerX);
	            }
	
	            // Draw min measured value indicator
	            if (minMeasuredValueVisible) {
	                mainCtx.save();
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(rotationOffset + HALF_PI + (minMeasuredValue - minValue) * angleStep);
	                mainCtx.translate(-centerX, -centerY);
	                mainCtx.drawImage(minMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.27);
	                mainCtx.restore();
	            }
	
	            // Draw max measured value indicator
	            if (maxMeasuredValueVisible) {
	                mainCtx.save();
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(rotationOffset + HALF_PI + (maxMeasuredValue - minValue) * angleStep);
	                mainCtx.translate(-centerX, -centerY);
	                mainCtx.drawImage(maxMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.27);
	                mainCtx.restore();
	            }
	
	            angle = rotationOffset + HALF_PI + (value - minValue) * angleStep;
	
	            // Define rotation center
	            mainCtx.save();
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(angle);
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	            mainCtx.shadowBlur = shadowOffset * 2;
	            // Draw pointer
	            mainCtx.translate(-pointerOffset, -pointerOffset);
	            mainCtx.drawImage(pointerBuffer, 0, 0);
	            // Undo the translations & shadow settings
	            mainCtx.restore();
	
	            // Draw foreground
	            if (foregroundVisible) {
	                if (steelseries.Orientation.WEST === orientation) {
	                    mainCtx.translate(centerX, centerX);
	                    mainCtx.rotate(HALF_PI);
	                    mainCtx.translate(-centerX, -centerX);
	                } else if (steelseries.Orientation.EAST === orientation) {
	                    mainCtx.translate(centerX, centerX);
	                    mainCtx.rotate(-HALF_PI);
	                    mainCtx.translate(-centerX, -centerX);
	                }
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	            mainCtx.restore();
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var linear = function (canvas, parameters) {
	        parameters = parameters || {};
	        var gaugeType = (undefined === parameters.gaugeType ? steelseries.GaugeType.TYPE1 : parameters.gaugeType),
	            width = (undefined === parameters.width ? 0 : parameters.width),
	            height = (undefined === parameters.height ? 0 : parameters.height),
	            minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),
	            maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),
	            niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),
	            threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue: parameters.threshold),
	            titleString = (undefined === parameters.titleString ? '' : parameters.titleString),
	            unitString = (undefined === parameters.unitString ? '' : parameters.unitString),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            valueColor = (undefined === parameters.valueColor ? steelseries.ColorDef.RED : parameters.valueColor),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.STANDARD : parameters.lcdColor),
	            lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),
	            lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            ledColor = (undefined === parameters.ledColor ? steelseries.LedColor.RED_LED : parameters.ledColor),
	            ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),
	            thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),
	            thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),
	            minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),
	            maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),
	            labelNumberFormat = (undefined === parameters.labelNumberFormat ? steelseries.LabelNumberFormat.STANDARD : parameters.labelNumberFormat),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),
	            alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),
	            fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (width === 0) {
	            width = mainCtx.canvas.width;
	        }
	        if (height === 0) {
	            height = mainCtx.canvas.height;
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = width;
	        mainCtx.canvas.height = height;
	
	        var imageWidth = width;
	        var imageHeight = height;
	
	        // Create audio tag for alarm sound
	        if (playAlarm && alarmSound !== false) {
	            var audioElement = doc.createElement('audio');
	            audioElement.setAttribute('src', alarmSound);
	            //audioElement.setAttribute('src', 'js/alarm.mp3');
	            audioElement.setAttribute('preload', 'auto');
	        }
	
	        var self = this;
	        var value = minValue;
	
	        // Properties
	        var minMeasuredValue = maxValue;
	        var maxMeasuredValue = minValue;
	
	        // Check gaugeType is 1 or 2
	        if (gaugeType.type !== 'type1' && gaugeType.type !== 'type2') {
	            gaugeType = steelseries.GaugeType.TYPE1;
	        }
	
	        var tween;
	        var ledBlinking = false;
	        var repainting = false;
	
	        var ledTimerId = 0;
	
	        var vertical = width <= height;
	
	        // Constants
	        var ledPosX;
	        var ledPosY;
	        var ledSize = Math.round((vertical ? height : width) * 0.05);
	        var minMaxIndSize = Math.round((vertical ? width : height) * 0.05);
	        var stdFont;
	        var lcdFont;
	
	        // Misc
	        if (vertical) {
	            ledPosX = imageWidth / 2 - ledSize / 2;
	            ledPosY = (gaugeType.type === 'type1' ? 0.053 : 0.038) * imageHeight;
	            stdFont = Math.floor(imageHeight / 22) + 'px ' + stdFontName;
	            lcdFont = Math.floor(imageHeight / 22) + 'px ' + lcdFontName;
	        } else {
	            ledPosX = 0.89 * imageWidth;
	            ledPosY = imageHeight / 2 - ledSize / 2;
	            stdFont = Math.floor(imageHeight / 10) + 'px ' + stdFontName;
	            lcdFont = Math.floor(imageHeight / 10) + 'px ' + lcdFontName;
	        }
	
	        var initialized = false;
	
	        // Tickmark specific private variables
	        var niceMinValue = minValue;
	        var niceMaxValue = maxValue;
	        var niceRange = maxValue - minValue;
	        var range = niceMaxValue - niceMinValue;
	        var minorTickSpacing = 0;
	        var majorTickSpacing = 0;
	        var maxNoOfMinorTicks = 10;
	        var maxNoOfMajorTicks = 10;
	
	        // Method to calculate nice values for min, max and range for the tickmarks
	        var calculate = function calculate() {
	            if (niceScale) {
	                niceRange = calcNiceNumber(maxValue - minValue, false);
	                majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);
	                niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;
	                niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;
	                minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);
	                minValue = niceMinValue;
	                maxValue = niceMaxValue;
	                range = maxValue - minValue;
	            } else {
	                niceRange = (maxValue - minValue);
	                niceMinValue = minValue;
	                niceMaxValue = maxValue;
	                range = niceRange;
	                minorTickSpacing = 1;
	                majorTickSpacing = 10;
	            }
	        };
	
	        // **************   Buffer creation  ********************
	        // Buffer for the frame
	        var frameBuffer = createBuffer(width, height);
	        var frameContext = frameBuffer.getContext('2d');
	
	        // Buffer for the background
	        var backgroundBuffer = createBuffer(width, height);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        var lcdBuffer;
	
	        // Buffer for led on painting code
	        var ledBufferOn = createBuffer(ledSize, ledSize);
	        var ledContextOn = ledBufferOn.getContext('2d');
	
	        // Buffer for led off painting code
	        var ledBufferOff = createBuffer(ledSize, ledSize);
	        var ledContextOff = ledBufferOff.getContext('2d');
	
	        // Buffer for current led painting code
	        var ledBuffer = ledBufferOff;
	
	        // Buffer for the minMeasuredValue indicator
	        var minMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);
	        var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for the maxMeasuredValue indicator
	        var maxMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);
	        var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(width, height);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // **************   Image creation  ********************
	        var drawLcdText = function (ctx, value, vertical) {
	            ctx.save();
	            ctx.textAlign = 'right';
	            ctx.textBaseline = 'middle';
	            ctx.strokeStyle = lcdColor.textColor;
	            ctx.fillStyle = lcdColor.textColor;
	
	            if (lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) {
	                ctx.shadowColor = 'gray';
	                if (vertical) {
	                    ctx.shadowOffsetX = imageHeight * 0.003;
	                    ctx.shadowOffsetY = imageHeight * 0.003;
	                    ctx.shadowBlur = imageHeight * 0.004;
	                } else {
	                    ctx.shadowOffsetX = imageHeight * 0.007;
	                    ctx.shadowOffsetY = imageHeight * 0.007;
	                    ctx.shadowBlur = imageHeight * 0.009;
	                }
	            }
	
	            var lcdTextX;
	            var lcdTextY;
	            var lcdTextWidth;
	
	            if (digitalFont) {
	                ctx.font = lcdFont;
	            } else {
	                ctx.font = stdFont;
	            }
	
	            if (vertical) {
	                lcdTextX = (imageWidth - (imageWidth * 0.571428)) / 2  + imageWidth * 0.571428 - 2;
	                lcdTextY = imageHeight * 0.88 + 1 + (imageHeight * 0.055 - 2) / 2;
	                lcdTextWidth = imageWidth * 0.7 - 2;
	            } else {
	                lcdTextX = (imageWidth * 0.695) + imageWidth * 0.18 - 2;
	                lcdTextY = (imageHeight * 0.22) + 1 + (imageHeight * 0.15 - 2) / 2;
	                lcdTextWidth = imageHeight * 0.22 - 2;
	            }
	
	            ctx.fillText(value.toFixed(lcdDecimals), lcdTextX, lcdTextY, lcdTextWidth);
	
	            ctx.restore();
	        };
	
	        var createThresholdImage = function (vertical) {
	            var thresholdBuffer = doc.createElement('canvas');
	            var thresholdCtx = thresholdBuffer.getContext('2d');
	            thresholdBuffer.height = thresholdBuffer.width = minMaxIndSize;
	
	            thresholdCtx.save();
	            var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);
	            gradThreshold.addColorStop(0, '#520000');
	            gradThreshold.addColorStop(0.3, '#fc1d00');
	            gradThreshold.addColorStop(0.59, '#fc1d00');
	            gradThreshold.addColorStop(1, '#520000');
	            thresholdCtx.fillStyle = gradThreshold;
	
	            if (vertical) {
	                thresholdCtx.beginPath();
	                thresholdCtx.moveTo(0.1, thresholdBuffer.height * 0.5);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);
	                thresholdCtx.closePath();
	            } else {
	                thresholdCtx.beginPath();
	                thresholdCtx.moveTo(0.1, 0.1);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.5, thresholdBuffer.height * 0.9);
	                thresholdCtx.closePath();
	            }
	
	            thresholdCtx.fill();
	            thresholdCtx.strokeStyle = '#FFFFFF';
	            thresholdCtx.stroke();
	
	            thresholdCtx.restore();
	
	            return thresholdBuffer;
	        };
	
	        var drawTickmarksImage = function (ctx, labelNumberFormat, vertical) {
	            backgroundColor.labelColor.setAlpha(1);
	            ctx.save();
	            ctx.textBaseline = 'middle';
	            var TEXT_WIDTH = imageWidth * 0.1;
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	
	            var valueCounter = minValue;
	            var majorTickCounter = maxNoOfMinorTicks - 1;
	            var tickCounter;
	            var currentPos;
	            var scaleBoundsX;
	            var scaleBoundsY;
	            var scaleBoundsW;
	            var scaleBoundsH;
	            var tickSpaceScaling = 1;
	
	            var minorTickStart;
	            var minorTickStop;
	            var mediumTickStart;
	            var mediumTickStop;
	            var majorTickStart;
	            var majorTickStop;
	            if (vertical) {
	                minorTickStart = (0.34 * imageWidth);
	                minorTickStop = (0.36 * imageWidth);
	                mediumTickStart = (0.33 * imageWidth);
	                mediumTickStop = (0.36 * imageWidth);
	                majorTickStart = (0.32 * imageWidth);
	                majorTickStop = (0.36 * imageWidth);
	                ctx.textAlign = 'right';
	                scaleBoundsX = 0;
	                scaleBoundsY = imageHeight * 0.128640;
	                scaleBoundsW = 0;
	                if (gaugeType.type === 'type1') {
	                    scaleBoundsH = (imageHeight * 0.856796 - imageHeight * 0.128640);
	                } else {
	                    scaleBoundsH = (imageHeight * 0.7475 - imageHeight * 0.128640);
	                }
	                tickSpaceScaling = scaleBoundsH / (maxValue - minValue);
	            } else {
	                minorTickStart = (0.65 * imageHeight);
	                minorTickStop = (0.63 * imageHeight);
	                mediumTickStart = (0.66 * imageHeight);
	                mediumTickStop = (0.63 * imageHeight);
	                majorTickStart = (0.67 * imageHeight);
	                majorTickStop = (0.63 * imageHeight);
	                ctx.textAlign = 'center';
	                scaleBoundsY = 0;
	                if (gaugeType.type === 'type1') {
	                    scaleBoundsX = imageWidth * 0.142857;
	                    scaleBoundsW = (imageWidth * 0.871012 - scaleBoundsX);
	                } else {
	                    scaleBoundsX = imageWidth * 0.19857;
	                    scaleBoundsW = (imageWidth * 0.82 - scaleBoundsX);
	                }
	                scaleBoundsH = 0;
	                tickSpaceScaling = scaleBoundsW / (maxValue - minValue);
	            }
	
	            var labelCounter;
	            for (labelCounter = minValue, tickCounter = 0; labelCounter <= maxValue; labelCounter += minorTickSpacing, tickCounter += minorTickSpacing) {
	
	                // Calculate the bounds of the scaling
	                if (vertical) {
	                    currentPos = scaleBoundsY + scaleBoundsH - tickCounter * tickSpaceScaling;
	                } else {
	                    currentPos = scaleBoundsX + tickCounter * tickSpaceScaling;
	                }
	
	                majorTickCounter++;
	
	                // Draw tickmark every major tickmark spacing
	                if (majorTickCounter === maxNoOfMinorTicks) {
	
	                    // Draw the major tickmarks
	                    ctx.lineWidth = 1.5;
	                    drawLinearTicks(ctx, majorTickStart, majorTickStop, currentPos, vertical);
	
	                    // Draw the standard tickmark labels
	                    if (vertical) {
	                        // Vertical orientation
	                        switch (labelNumberFormat.format) {
	                        case 'fractional':
	                            ctx.fillText((valueCounter.toFixed(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);
	                            break;
	
	                        case 'scientific':
	                            ctx.fillText((valueCounter.toPrecision(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);
	                            break;
	
	                        case 'standard':
	                        /* falls through */
	                        default:
	                            ctx.fillText((valueCounter.toFixed(0)), imageWidth * 0.28, currentPos, TEXT_WIDTH);
	                            break;
	                        }
	                    } else {
	                        // Horizontal orientation
	                        switch (labelNumberFormat.format) {
	                        case 'fractional':
	                            ctx.fillText((valueCounter.toFixed(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);
	                            break;
	
	                        case 'scientific':
	                            ctx.fillText((valueCounter.toPrecision(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);
	                            break;
	
	                        case 'standard':
	                        /* falls through */
	                        default:
	                            ctx.fillText((valueCounter.toFixed(0)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);
	                            break;
	                        }
	                    }
	
	                    valueCounter += majorTickSpacing;
	                    majorTickCounter = 0;
	                    continue;
	                }
	
	                // Draw tickmark every minor tickmark spacing
	                if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (maxNoOfMinorTicks / 2)) {
	                    ctx.lineWidth = 1;
	                    drawLinearTicks(ctx, mediumTickStart, mediumTickStop, currentPos, vertical);
	                } else {
	                    ctx.lineWidth = 0.5;
	                    drawLinearTicks(ctx, minorTickStart, minorTickStop, currentPos, vertical);
	                }
	            }
	
	            ctx.restore();
	        };
	
	        var drawLinearTicks = function (ctx, tickStart, tickStop, currentPos, vertical) {
	            if (vertical) {
	                // Vertical orientation
	                ctx.beginPath();
	                ctx.moveTo(tickStart, currentPos);
	                ctx.lineTo(tickStop, currentPos);
	                ctx.closePath();
	                ctx.stroke();
	            } else {
	                // Horizontal orientation
	                ctx.beginPath();
	                ctx.moveTo(currentPos, tickStart);
	                ctx.lineTo(currentPos, tickStop);
	                ctx.closePath();
	                ctx.stroke();
	            }
	        };
	
	        // **************   Initialization  ********************
	        var init = function (parameters) {
	            parameters = parameters || {};
	            var drawFrame = (undefined === parameters.frame ? false : parameters.frame);
	            var drawBackground = (undefined === parameters.background ? false : parameters.background);
	            var drawLed = (undefined === parameters.led ? false : parameters.led);
	            var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	
	            var yOffset;
	            var yRange;
	            var valuePos;
	
	            initialized = true;
	
	            // Calculate the current min and max values and the range
	            calculate();
	
	            // Create frame in frame buffer (backgroundBuffer)
	            if (drawFrame && frameVisible) {
	                drawLinearFrameImage(frameContext, frameDesign, imageWidth, imageHeight, vertical);
	            }
	
	            // Create background in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                drawLinearBackgroundImage(backgroundContext, backgroundColor, imageWidth, imageHeight, vertical);
	            }
	
	            // draw Thermometer outline
	            if (drawBackground && gaugeType.type === 'type2') {
	                drawBackgroundImage(backgroundContext);
	            }
	
	            if (drawLed) {
	                if (vertical) {
	                    // Draw LED ON in ledBuffer_ON
	                    ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);
	
	                    // Draw LED ON in ledBuffer_OFF
	                    ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);
	                } else {
	                    // Draw LED ON in ledBuffer_ON
	                    ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);
	
	                    // Draw LED ON in ledBuffer_OFF
	                    ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);
	                }
	            }
	
	            // Draw min measured value indicator in minMeasuredValueBuffer
	            if (minMeasuredValueVisible) {
	                if (vertical) {
	                    minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);
	                } else {
	                    minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);
	                }
	            }
	
	            // Draw max measured value indicator in maxMeasuredValueBuffer
	            if (maxMeasuredValueVisible) {
	                if (vertical) {
	                    maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);
	                } else {
	                    maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);
	                }
	            }
	
	            // Create alignment posts in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	
	                // Create tickmarks in background buffer (backgroundBuffer)
	                drawTickmarksImage(backgroundContext, labelNumberFormat, vertical);
	
	                // Create title in background buffer (backgroundBuffer)
	                if (vertical) {
	                    drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible, gaugeType);
	                } else {
	                    drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible, gaugeType);
	                }
	            }
	
	            // Draw threshold image to background context
	            if (drawBackground && thresholdVisible) {
	                backgroundContext.save();
	                if (vertical) {
	                    // Vertical orientation
	                    yOffset = (gaugeType.type === 'type1' ? 0.856796 : 0.7475);
	                    yRange = yOffset - 0.128640;
	                    valuePos = imageHeight * yOffset - (imageHeight * yRange) * (threshold - minValue) / (maxValue - minValue);
	                    backgroundContext.translate(imageWidth * 0.365, valuePos - minMaxIndSize / 2);
	                } else {
	                    // Horizontal orientation
	                    yOffset = (gaugeType.type === 'type1' ? 0.871012 : 0.82);
	                    yRange = yOffset - (gaugeType.type === 'type1' ? 0.142857 : 0.19857);
	                    valuePos = imageWidth * yRange * (threshold - minValue) / (maxValue - minValue);
	                    backgroundContext.translate(imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) - minMaxIndSize / 2 + valuePos, imageHeight * 0.58);
	                }
	                backgroundContext.drawImage(createThresholdImage(vertical), 0, 0);
	                backgroundContext.restore();
	            }
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            if (drawBackground && lcdVisible) {
	                if (vertical) {
	                    lcdBuffer = createLcdBackgroundImage(imageWidth * 0.571428, imageHeight * 0.055, lcdColor);
	                    backgroundContext.drawImage(lcdBuffer, ((imageWidth - (imageWidth * 0.571428)) / 2), imageHeight * 0.88);
	                } else {
	                    lcdBuffer = createLcdBackgroundImage(imageWidth * 0.18, imageHeight * 0.15, lcdColor);
	                    backgroundContext.drawImage(lcdBuffer, imageWidth * 0.695, imageHeight * 0.22);
	                }
	            }
	
	            // add thermometer stem foreground
	            if (drawForeground && gaugeType.type === 'type2') {
	                drawForegroundImage(foregroundContext);
	            }
	
	            // Create foreground in foreground buffer (foregroundBuffer)
	            if (drawForeground && foregroundVisible) {
	                drawLinearForegroundImage(foregroundContext, imageWidth, imageHeight, vertical, false);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetFrame = (undefined === buffers.frame ? false : buffers.frame);
	            var resetBackground = (undefined === buffers.background ? false : buffers.background);
	            var resetLed = (undefined === buffers.led ? false : buffers.led);
	            var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            if (resetFrame) {
	                frameBuffer.width = width;
	                frameBuffer.height = height;
	                frameContext = frameBuffer.getContext('2d');
	            }
	
	            if (resetBackground) {
	                backgroundBuffer.width = width;
	                backgroundBuffer.height = height;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	
	            if (resetLed) {
	                ledBufferOn.width = Math.ceil(width * 0.093457);
	                ledBufferOn.height = Math.ceil(height * 0.093457);
	                ledContextOn = ledBufferOn.getContext('2d');
	
	                ledBufferOff.width = Math.ceil(width * 0.093457);
	                ledBufferOff.height = Math.ceil(height * 0.093457);
	                ledContextOff = ledBufferOff.getContext('2d');
	
	                // Buffer for current led painting code
	                ledBuffer = ledBufferOff;
	            }
	
	            if (resetForeground) {
	                foregroundBuffer.width = width;
	                foregroundBuffer.height = height;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        var blink = function (blinking) {
	            if (blinking) {
	                ledTimerId = setInterval(toggleAndRepaintLed, 1000);
	            } else {
	                clearInterval(ledTimerId);
	                ledBuffer = ledBufferOff;
	            }
	        };
	
	        var toggleAndRepaintLed = function () {
	            if (ledVisible) {
	                if (ledBuffer === ledBufferOn) {
	                    ledBuffer = ledBufferOff;
	                } else {
	                    ledBuffer = ledBufferOn;
	                }
	                if (!repainting) {
	                    repainting = true;
	                    requestAnimFrame(self.repaint);
	                }
	            }
	        };
	
	        var drawValue = function (ctx, imageWidth, imageHeight) {
	            var top; // position of max value
	            var bottom; // position of min value
	            var labelColor = backgroundColor.labelColor;
	            var fullSize;
	            var valueSize, valueTop;
	            var valueStartX, valueStartY, valueStopX, valueStopY;
	            var valueBackgroundStartX, valueBackgroundStartY, valueBackgroundStopX, valueBackgroundStopY;
	            var valueBorderStartX, valueBorderStartY, valueBorderStopX, valueBorderStopY;
	            var valueForegroundStartX, valueForegroundStartY, valueForegroundStopX, valueForegroundStopY;
	
	            // Orientation dependend definitions
	            if (vertical) {
	                // Vertical orientation
	                top =  imageHeight * 0.128640; // position of max value
	                if (gaugeType.type === 'type1') {
	                    bottom = imageHeight * 0.856796; // position of min value
	                } else {
	                    bottom = imageHeight * 0.7475;
	                }
	                fullSize = bottom - top;
	                valueSize = fullSize * (value - minValue) / (maxValue - minValue);
	                valueTop = bottom - valueSize;
	                valueBackgroundStartX = 0;
	                valueBackgroundStartY = top;
	                valueBackgroundStopX = 0;
	                valueBackgroundStopY = bottom;
	            } else {
	                // Horizontal orientation
	                if (gaugeType.type === 'type1') {
	                    top = imageWidth * 0.871012; // position of max value
	                    bottom = imageWidth * 0.142857; // position of min value
	                } else {
	                    top = imageWidth * 0.82; // position of max value
	                    bottom = imageWidth * 0.19857; // position of min value
	                }
	                fullSize = top - bottom;
	                valueSize = fullSize * (value - minValue) / (maxValue - minValue);
	                valueTop = bottom;
	                valueBackgroundStartX = top;
	                valueBackgroundStartY = 0;
	                valueBackgroundStopX = bottom;
	                valueBackgroundStopY = 0;
	            }
	            if (gaugeType.type === 'type1') {
	                var darker = (backgroundColor === steelseries.BackgroundColor.CARBON ||
	                              backgroundColor === steelseries.BackgroundColor.PUNCHED_SHEET ||
	                              backgroundColor === steelseries.BackgroundColor.STAINLESS ||
	                              backgroundColor === steelseries.BackgroundColor.BRUSHED_STAINLESS ||
	                              backgroundColor === steelseries.BackgroundColor.TURNED) ? 0.3 : 0;
	                var valueBackgroundTrackGradient = ctx.createLinearGradient(valueBackgroundStartX, valueBackgroundStartY, valueBackgroundStopX, valueBackgroundStopY);
	                labelColor.setAlpha(0.05 + darker);
	                valueBackgroundTrackGradient.addColorStop(0, labelColor.getRgbaColor());
	                labelColor.setAlpha(0.15 + darker);
	                valueBackgroundTrackGradient.addColorStop(0.48, labelColor.getRgbaColor());
	                labelColor.setAlpha(0.15 + darker);
	                valueBackgroundTrackGradient.addColorStop(0.49, labelColor.getRgbaColor());
	                labelColor.setAlpha(0.05 + darker);
	                valueBackgroundTrackGradient.addColorStop(1, labelColor.getRgbaColor());
	                ctx.fillStyle = valueBackgroundTrackGradient;
	
	                if (vertical) {
	                    ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.142857, fullSize);
	                } else {
	                    ctx.fillRect(imageWidth * 0.142857, imageHeight * 0.435714, fullSize, imageHeight * 0.142857);
	                }
	
	                if (vertical) {
	                    // Vertical orientation
	                    valueBorderStartX = 0;
	                    valueBorderStartY = top;
	                    valueBorderStopX = 0;
	                    valueBorderStopY = top + fullSize;
	                } else {
	                    // Horizontal orientation
	                    valueBorderStartX = imageWidth * 0.142857 + fullSize;
	                    valueBorderStartY = 0;
	                    valueBorderStopX = imageWidth * 0.142857;
	                    valueBorderStopY = 0;
	                }
	                var valueBorderGradient = ctx.createLinearGradient(valueBorderStartX, valueBorderStartY, valueBorderStopX, valueBorderStopY);
	                labelColor.setAlpha(0.3 + darker);
	                valueBorderGradient.addColorStop(0, labelColor.getRgbaColor());
	                labelColor.setAlpha(0.69);
	                valueBorderGradient.addColorStop(0.48, labelColor.getRgbaColor());
	                labelColor.setAlpha(0.7);
	                valueBorderGradient.addColorStop(0.49, labelColor.getRgbaColor());
	                labelColor.setAlpha(0.4);
	                valueBorderGradient.addColorStop(1, labelColor.getRgbaColor());
	                ctx.fillStyle = valueBorderGradient;
	                if (vertical) {
	                    ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.007142, fullSize);
	                    ctx.fillRect(imageWidth * 0.571428, top, imageWidth * 0.007142, fullSize);
	                } else {
	                    ctx.fillRect(imageWidth * 0.142857, imageHeight * 0.435714, fullSize, imageHeight * 0.007142);
	                    ctx.fillRect(imageWidth * 0.142857, imageHeight * 0.571428, fullSize, imageHeight * 0.007142);
	                }
	            }
	            if (vertical) {
	                // Vertical orientation
	                if (gaugeType.type === 'type1') {
	                    valueStartX = imageWidth * 0.45;
	                    valueStartY = 0;
	                    valueStopX = imageWidth * 0.45 + imageWidth * 0.114285;
	                    valueStopY = 0;
	                } else {
	                    valueStartX = imageWidth / 2 - imageHeight * 0.0486 / 2;
	                    valueStartY = 0;
	                    valueStopX = valueStartX + imageHeight * 0.053;
	                    valueStopY = 0;
	                }
	            } else {
	                // Horizontal orientation
	                if (gaugeType.type === 'type1') {
	                    valueStartX = 0;
	                    valueStartY = imageHeight * 0.45;
	                    valueStopX = 0;
	                    valueStopY = imageHeight * 0.45 + imageHeight * 0.114285;
	                } else {
	                    valueStartX = 0;
	                    valueStartY = imageHeight / 2 - imageWidth * 0.0250;
	                    valueStopX = 0;
	                    valueStopY = valueStartY + imageWidth * 0.053;
	                }
	            }
	
	            var valueBackgroundGradient = ctx.createLinearGradient(valueStartX, valueStartY, valueStopX, valueStopY);
	            valueBackgroundGradient.addColorStop(0, valueColor.medium.getRgbaColor());
	            valueBackgroundGradient.addColorStop(1, valueColor.light.getRgbaColor());
	            ctx.fillStyle = valueBackgroundGradient;
	            var thermoTweak = (gaugeType.type === 'type1' ? 0 : (vertical ? imageHeight * 0.05 : imageWidth * 0.05));
	            if (vertical) {
	                ctx.fillRect(valueStartX, valueTop, valueStopX - valueStartX, valueSize + thermoTweak);
	            } else {
	                ctx.fillRect(valueTop - thermoTweak, valueStartY, valueSize + thermoTweak, valueStopY - valueStartY);
	            }
	
	            if (gaugeType.type === 'type1') {
	                // The light effect on the value
	                if (vertical) {
	                    // Vertical orientation
	                    valueForegroundStartX = imageWidth * 0.45;
	                    valueForegroundStartY = 0;
	                    valueForegroundStopX = valueForegroundStartX + imageWidth * 0.05;
	                    valueForegroundStopY = 0;
	                } else {
	                    // Horizontal orientation
	                    valueForegroundStartX = 0;
	                    valueForegroundStartY = imageHeight * 0.45;
	                    valueForegroundStopX = 0;
	                    valueForegroundStopY = valueForegroundStartY + imageHeight * 0.05;
	                }
	                var valueForegroundGradient = ctx.createLinearGradient(valueForegroundStartX, valueForegroundStartY, valueForegroundStopX, valueForegroundStopY);
	                valueForegroundGradient.addColorStop(0, 'rgba(255, 255, 255, 0.7)');
	                valueForegroundGradient.addColorStop(0.98, 'rgba(255, 255, 255, 0.0)');
	                ctx.fillStyle = valueForegroundGradient;
	                if (vertical) {
	                    ctx.fillRect(valueForegroundStartX, valueTop, valueForegroundStopX, valueSize);
	                } else {
	                    ctx.fillRect(valueTop, valueForegroundStartY, valueSize, valueForegroundStopY - valueForegroundStartY);
	                }
	            }
	        };
	
	        var drawForegroundImage = function (ctx) {
	            var foreSize = (vertical ? imageHeight : imageWidth);
	
	            ctx.save();
	            if (vertical) {
	                ctx.translate(imageWidth / 2, 0);
	            } else {
	                ctx.translate(imageWidth / 2, imageHeight / 2);
	                ctx.rotate(HALF_PI);
	                ctx.translate(0, -imageWidth / 2 + imageWidth * 0.05);
	            }
	
	            // draw bulb
	            ctx.beginPath();
	            ctx.moveTo(-0.0490 * foreSize, 0.825 * foreSize);
	            ctx.bezierCurveTo(-0.0490 * foreSize, 0.7975 * foreSize, -0.0264 * foreSize, 0.775 * foreSize, 0.0013 * foreSize, 0.775 * foreSize);
	            ctx.bezierCurveTo(0.0264 * foreSize, 0.775 * foreSize, 0.0490 * foreSize, 0.7975 * foreSize, 0.0490 * foreSize, 0.825 * foreSize);
	            ctx.bezierCurveTo(0.0490 * foreSize, 0.85 * foreSize, 0.0264 * foreSize, 0.8725 * foreSize, 0.0013 * foreSize, 0.8725 * foreSize);
	            ctx.bezierCurveTo(-0.0264 * foreSize, 0.8725 * foreSize, -0.0490 * foreSize, 0.85 * foreSize, -0.0490 * foreSize, 0.825 * foreSize);
	            ctx.closePath();
	            var grad = ctx.createRadialGradient(0 * foreSize, 0.825 * foreSize, 0, 0 * foreSize, 0.825 * foreSize, 0.0490 * foreSize);
	            grad.addColorStop(0, valueColor.medium.getRgbaColor());
	            grad.addColorStop(0.3, valueColor.medium.getRgbaColor());
	            grad.addColorStop(1, valueColor.light.getRgbaColor());
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // draw bulb highlight
	            ctx.beginPath();
	            if (vertical) {
	                ctx.moveTo(-0.0365 * foreSize, 0.8075 * foreSize);
	                ctx.bezierCurveTo(-0.0365 * foreSize, 0.7925 * foreSize, -0.0214 * foreSize, 0.7875 * foreSize, -0.0214 * foreSize, 0.7825 * foreSize);
	                ctx.bezierCurveTo(0.0189 * foreSize, 0.785 * foreSize, 0.0365 * foreSize, 0.7925 * foreSize, 0.0365 * foreSize, 0.8075 * foreSize);
	                ctx.bezierCurveTo(0.0365 * foreSize, 0.8175 * foreSize, 0.0214 * foreSize, 0.815 * foreSize, 0.0013 * foreSize, 0.8125 * foreSize);
	                ctx.bezierCurveTo(-0.0189 * foreSize, 0.8125 * foreSize, -0.0365 * foreSize, 0.8175 * foreSize, -0.0365 * foreSize, 0.8075 * foreSize);
	                grad = ctx.createRadialGradient(0, 0.8 * foreSize, 0, 0, 0.8 * foreSize, 0.0377 * foreSize);
	            } else {
	                ctx.beginPath();
	                ctx.moveTo(-0.0214 * foreSize, 0.86 * foreSize);
	                ctx.bezierCurveTo(-0.0365 * foreSize, 0.86 * foreSize, -0.0415 * foreSize, 0.845 * foreSize, -0.0465 * foreSize, 0.825 * foreSize);
	                ctx.bezierCurveTo(-0.0465 * foreSize, 0.805 * foreSize, -0.0365 * foreSize, 0.7875 * foreSize, -0.0214 * foreSize, 0.7875 * foreSize);
	                ctx.bezierCurveTo(-0.0113 * foreSize, 0.7875 * foreSize, -0.0163 * foreSize, 0.8025 * foreSize, -0.0163 * foreSize, 0.8225 * foreSize);
	                ctx.bezierCurveTo(-0.0163 * foreSize, 0.8425 * foreSize, -0.0113 * foreSize, 0.86 * foreSize, -0.0214 * foreSize, 0.86 * foreSize);
	                grad = ctx.createRadialGradient(-0.03 * foreSize, 0.8225 * foreSize, 0, -0.03 * foreSize, 0.8225 * foreSize, 0.0377 * foreSize);
	            }
	            grad.addColorStop(0.0, 'rgba(255, 255, 255, 0.55)');
	            grad.addColorStop(1.0, 'rgba(255, 255, 255, 0.05)');
	            ctx.fillStyle = grad;
	            ctx.closePath();
	            ctx.fill();
	
	            // stem highlight
	            ctx.beginPath();
	            ctx.moveTo(-0.0214 * foreSize, 0.115 * foreSize);
	            ctx.bezierCurveTo(-0.0214 * foreSize, 0.1075 * foreSize, -0.0163 * foreSize, 0.1025 * foreSize, -0.0113 * foreSize, 0.1025 * foreSize);
	            ctx.bezierCurveTo(-0.0113 * foreSize, 0.1025 * foreSize, -0.0113 * foreSize, 0.1025 * foreSize, -0.0113 * foreSize, 0.1025 * foreSize);
	            ctx.bezierCurveTo(-0.0038 * foreSize, 0.1025 * foreSize, 0.0013 * foreSize, 0.1075 * foreSize, 0.0013 * foreSize, 0.115 * foreSize);
	            ctx.bezierCurveTo(0.0013 * foreSize, 0.115 * foreSize, 0.0013 * foreSize, 0.76 * foreSize, 0.0013 * foreSize, 0.76 * foreSize);
	            ctx.bezierCurveTo(0.0013 * foreSize, 0.7675 * foreSize, -0.0038 * foreSize, 0.7725 * foreSize, -0.0113 * foreSize, 0.7725 * foreSize);
	            ctx.bezierCurveTo(-0.0113 * foreSize, 0.7725 * foreSize, -0.0113 * foreSize, 0.7725 * foreSize, -0.0113 * foreSize, 0.7725 * foreSize);
	            ctx.bezierCurveTo(-0.0163 * foreSize, 0.7725 * foreSize, -0.0214 * foreSize, 0.7675 * foreSize, -0.0214 * foreSize, 0.76 * foreSize);
	            ctx.bezierCurveTo(-0.0214 * foreSize, 0.76 * foreSize, -0.0214 * foreSize, 0.115 * foreSize, -0.0214 * foreSize, 0.115 * foreSize);
	            ctx.closePath();
	            grad = ctx.createLinearGradient(-0.0189 * foreSize, 0, 0.0013 * foreSize, 0);
	            grad.addColorStop(0.0, 'rgba(255, 255, 255, 0.1)');
	            grad.addColorStop(0.34, 'rgba(255, 255, 255, 0.5)');
	            grad.addColorStop(1.0, 'rgba(255, 255, 255, 0.1)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            ctx.restore();
	        };
	
	        var drawBackgroundImage = function (ctx) {
	            var backSize = (vertical ? imageHeight : imageWidth);
	            ctx.save();
	            if (vertical) {
	                ctx.translate(imageWidth / 2, 0);
	            } else {
	                ctx.translate(imageWidth / 2, imageHeight / 2);
	                ctx.rotate(HALF_PI);
	                ctx.translate(0, -imageWidth / 2 + imageWidth * 0.05);
	            }
	            ctx.beginPath();
	            ctx.moveTo(-0.0516 * backSize, 0.825 * backSize);
	            ctx.bezierCurveTo(-0.0516 * backSize, 0.8525 * backSize, -0.0289 * backSize, 0.875 * backSize, 0.0013 * backSize, 0.875 * backSize);
	            ctx.bezierCurveTo(0.0289 * backSize, 0.875 * backSize, 0.0516 * backSize, 0.8525 * backSize, 0.0516 * backSize, 0.825 * backSize);
	            ctx.bezierCurveTo(0.0516 * backSize, 0.8075 * backSize, 0.0440 * backSize, 0.7925 * backSize, 0.0314 * backSize, 0.7825 * backSize);
	            ctx.bezierCurveTo(0.0314 * backSize, 0.7825 * backSize, 0.0314 * backSize, 0.12 * backSize, 0.0314 * backSize, 0.12 * backSize);
	            ctx.bezierCurveTo(0.0314 * backSize, 0.1025 * backSize, 0.0189 * backSize, 0.0875 * backSize, 0.0013 * backSize, 0.0875 * backSize);
	            ctx.bezierCurveTo(-0.0163 * backSize, 0.0875 * backSize, -0.0289 * backSize, 0.1025 * backSize, -0.0289 * backSize, 0.12 * backSize);
	            ctx.bezierCurveTo(-0.0289 * backSize, 0.12 * backSize, -0.0289 * backSize, 0.7825 * backSize, -0.0289 * backSize, 0.7825 * backSize);
	            ctx.bezierCurveTo(-0.0415 * backSize, 0.79 * backSize, -0.0516 * backSize, 0.805 * backSize, -0.0516 * backSize, 0.825 * backSize);
	            ctx.closePath();
	            var grad = ctx.createLinearGradient(-0.0163 * backSize, 0, 0.0289 * backSize, 0);
	            grad.addColorStop(0, 'rgba(226, 226, 226, 0.5)');
	            grad.addColorStop(0.5, 'rgba(226, 226, 226, 0.2)');
	            grad.addColorStop(1, 'rgba(226, 226, 226, 0.5)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	            ctx.lineWidth = 1;
	            ctx.strokeStyle = 'rgba(153, 153, 153, 0.5)';
	            ctx.stroke();
	            ctx.restore();
	        };
	
	        //************************************ Public methods **************************************
	        this.setValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (value !== targetValue) {
	                value = targetValue;
	
	                if (value > maxMeasuredValue) {
	                    maxMeasuredValue = value;
	                }
	                if (value < minMeasuredValue) {
	                    minMeasuredValue = value;
	                }
	
	                if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                    (value <= threshold && !ledBlinking && !thresholdRising)) {
	                    ledBlinking = true;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.play();
	                    }
	                } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                           (value > threshold && ledBlinking && !thresholdRising)) {
	                    ledBlinking = false;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.pause();
	                    }
	                }
	
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            var targetValue,
	                gauge = this,
	                time;
	            newValue = parseFloat(newValue);
	            targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (value !== targetValue) {
	                if (undefined !== tween && tween.isPlaying) {
	                    tween.stop();
	                }
	
	                time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);
	                time = Math.max(time, fullScaleDeflectionTime / 5);
	                tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);
	                //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);
	
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos;
	                    if (value > maxMeasuredValue) {
	                        maxMeasuredValue = value;
	                    }
	                    if (value < minMeasuredValue) {
	                        minMeasuredValue = value;
	                    }
	
	                    if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                        (value <= threshold && !ledBlinking && !thresholdRising)) {
	                        ledBlinking = true;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.play();
	                        }
	                    } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                               (value > threshold && ledBlinking && !thresholdRising)) {
	                        ledBlinking = false;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.pause();
	                        }
	                    }
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.resetMinMeasuredValue = function () {
	            minMeasuredValue = value;
	            this.repaint();
	            return this;
	        };
	
	        this.resetMaxMeasuredValue = function () {
	            maxMeasuredValue = value;
	            this.repaint();
	            return this;
	        };
	
	        this.setMinMeasuredValueVisible = function (visible) {
	            minMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setMaxMeasuredValueVisible = function (visible) {
	            maxMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setThreshold = function (threshVal) {
	            threshVal = parseFloat(threshVal);
	            var targetValue = (threshVal < minValue ? minValue : (threshVal > maxValue ? maxValue : threshVal));
	            threshold = targetValue;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdVisible = function (visible) {
	            thresholdVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdRising = function (rising) {
	            thresholdRising = !!rising;
	            // reset existing threshold alerts
	            ledBlinking = !ledBlinking;
	            blink(ledBlinking);
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdDecimals = function (decimals) {
	            lcdDecimals = parseInt(decimals, 10);
	            this.repaint();
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({background: true});
	            backgroundColor = newBackgroundColor;
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setValueColor = function (newValueColor) {
	            resetBuffers({foreground: true});
	            valueColor = newValueColor;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedColor = function (newLedColor) {
	            resetBuffers({led: true});
	            ledColor = newLedColor;
	            init({led: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedVisible = function (visible) {
	            ledVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            resetBuffers({background: true});
	            lcdColor = newLcdColor;
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setMaxMeasuredValue = function (newVal) {
	            newVal = parseFloat(newVal);
	            var targetValue = (newVal < minValue ? minValue : (newVal > maxValue ? maxValue : newVal));
	            maxMeasuredValue = targetValue;
	            this.repaint();
	            return this;
	        };
	
	        this.setMinMeasuredValue = function (newVal) {
	            newVal = parseFloat(newVal);
	            var targetValue = (newVal < minValue ? minValue : (newVal > maxValue ? maxValue : newVal));
	            minMeasuredValue = targetValue;
	            this.repaint();
	            return this;
	        };
	
	        this.setTitleString = function (title) {
	            titleString = title;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setUnitString = function (unit) {
	            unitString = unit;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setMinValue = function (newVal) {
	            resetBuffers({background: true});
	            minValue = parseFloat(newVal);
	            if (minMeasuredValue < minValue) {
	                minMeasuredValue = minValue;
	            }
	            if (value < minValue) {
	                value = minValue;
	            }
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMinValue = function () {
	            return minValue;
	        };
	
	        this.setMaxValue = function (newVal) {
	            resetBuffers({background: true});
	            maxValue = parseFloat(newVal);
	            if (maxMeasuredValue > maxValue) {
	                maxMeasuredValue = maxValue;
	            }
	            if (value > maxValue) {
	                value = maxValue;
	            }
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMaxValue = function () {
	            return maxValue;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      led: true,
	                      foreground: true});
	            }
	
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            // Draw frame
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            mainCtx.drawImage(backgroundBuffer, 0, 0);
	
	            // Draw lcd display
	            if (lcdVisible) {
	                drawLcdText(mainCtx, value, vertical);
	            }
	
	            // Draw led
	            if (ledVisible) {
	                mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);
	            }
	
	            var valuePos;
	            var yOffset;
	            var yRange;
	            var minMaxX, minMaxY;
	            // Draw min measured value indicator
	            if (minMeasuredValueVisible) {
	                if (vertical) {
	                    yOffset = (gaugeType.type === 'type1' ? 0.856796 : 0.7475);
	                    yRange = (yOffset - 0.128640);
	                    valuePos = imageHeight * yOffset - (imageHeight * yRange) * (minMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * 0.34 - minMeasuredValueBuffer.width;
	                    minMaxY = valuePos - minMeasuredValueBuffer.height / 2;
	                } else {
	                    yOffset = (gaugeType.type === 'type1' ? 0.871012 : 0.82);
	                    yRange = yOffset - (gaugeType.type === 'type1' ? 0.142857 : 0.19857);
	                    valuePos = (imageWidth * yRange) * (minMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) - minMeasuredValueBuffer.height / 2 + valuePos;
	                    minMaxY = imageHeight * 0.65;
	                }
	                mainCtx.drawImage(minMeasuredValueBuffer, minMaxX, minMaxY);
	            }
	
	            // Draw max measured value indicator
	            if (maxMeasuredValueVisible) {
	                if (vertical) {
	                    valuePos = imageHeight * yOffset - (imageHeight * yRange) * (maxMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * 0.34 - maxMeasuredValueBuffer.width;
	                    minMaxY = valuePos - maxMeasuredValueBuffer.height / 2;
	                } else {
	                    yOffset = (gaugeType.type === 'type1' ? 0.871012 : 0.8);
	                    yRange = yOffset - (gaugeType.type === 'type1' ? 0.14857 : 0.19857);
	                    valuePos = (imageWidth * yRange) * (maxMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) - maxMeasuredValueBuffer.height / 2 + valuePos;
	                    minMaxY = imageHeight * 0.65;
	                }
	                mainCtx.drawImage(maxMeasuredValueBuffer, minMaxX, minMaxY);
	            }
	
	            mainCtx.save();
	            drawValue(mainCtx, imageWidth, imageHeight);
	            mainCtx.restore();
	
	            // Draw foreground
	            if (foregroundVisible || gaugeType.type === 'type2') {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var linearBargraph = function (canvas, parameters) {
	        parameters = parameters || {};
	        var width = (undefined === parameters.width ? 0 : parameters.width),
	            height = (undefined === parameters.height ? 0 : parameters.height),
	            minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),
	            maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),
	            section = (undefined === parameters.section ? null : parameters.section),
	            useSectionColors = (undefined === parameters.useSectionColors ? false : parameters.useSectionColors),
	            niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),
	            threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue: parameters.threshold),
	            titleString = (undefined === parameters.titleString ? '' : parameters.titleString),
	            unitString = (undefined === parameters.unitString ? '' : parameters.unitString),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            valueColor = (undefined === parameters.valueColor ? steelseries.ColorDef.RED : parameters.valueColor),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.STANDARD : parameters.lcdColor),
	            lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),
	            lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            ledColor = (undefined === parameters.ledColor ? steelseries.LedColor.RED_LED : parameters.ledColor),
	            ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),
	            thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),
	            thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),
	            minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),
	            maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),
	            labelNumberFormat = (undefined === parameters.labelNumberFormat ? steelseries.LabelNumberFormat.STANDARD : parameters.labelNumberFormat),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),
	            alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),
	            valueGradient = (undefined === parameters.valueGradient ? null : parameters.valueGradient),
	            useValueGradient = (undefined === parameters.useValueGradient ? false : parameters.useValueGradient),
	            fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (width === 0) {
	            width = mainCtx.canvas.width;
	        }
	        if (height === 0) {
	            height = mainCtx.canvas.height;
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = width;
	        mainCtx.canvas.height = height;
	
	        var imageWidth = width;
	        var imageHeight = height;
	
	        // Create audio tag for alarm sound
	        if (playAlarm && alarmSound !== false) {
	            var audioElement = doc.createElement('audio');
	            audioElement.setAttribute('src', alarmSound);
	            audioElement.setAttribute('preload', 'auto');
	        }
	
	        var self = this;
	        var value = minValue;
	
	        // Properties
	        var minMeasuredValue = maxValue;
	        var maxMeasuredValue = minValue;
	
	        var tween;
	        var ledBlinking = false;
	        var repainting = false;
	        var isSectionsVisible = false;
	        var isGradientVisible = false;
	        var sectionPixels = [];
	        var ledTimerId = 0;
	
	        var vertical = width <= height;
	
	        // Constants
	        var ledPosX;
	        var ledPosY;
	        var ledSize = Math.round((vertical ? height : width) * 0.05);
	        var minMaxIndSize = Math.round((vertical ? width : height) * 0.05);
	        var stdFont;
	        var lcdFont;
	
	        if (vertical) {
	            ledPosX = imageWidth / 2 - ledSize / 2;
	            ledPosY = 0.053 * imageHeight;
	            stdFont = Math.floor(imageHeight / 22) + 'px ' + stdFontName;
	            lcdFont = Math.floor(imageHeight / 22) + 'px ' + lcdFontName;
	        } else {
	            ledPosX = 0.89 * imageWidth;
	            ledPosY = imageHeight / 1.95 - ledSize / 2;
	            stdFont = Math.floor(imageHeight / 10) + 'px ' + stdFontName;
	            lcdFont = Math.floor(imageHeight / 10) + 'px ' + lcdFontName;
	        }
	
	        var initialized = false;
	
	        // Tickmark specific private variables
	        var niceMinValue = minValue;
	        var niceMaxValue = maxValue;
	        var niceRange = maxValue - minValue;
	        var range = niceMaxValue - niceMinValue;
	        var minorTickSpacing = 0;
	        var majorTickSpacing = 0;
	        var maxNoOfMinorTicks = 10;
	        var maxNoOfMajorTicks = 10;
	
	        // Method to calculate nice values for min, max and range for the tickmarks
	        var calculate = function calculate() {
	            if (niceScale) {
	                niceRange = calcNiceNumber(maxValue - minValue, false);
	                majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);
	                niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;
	                niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;
	                minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);
	                minValue = niceMinValue;
	                maxValue = niceMaxValue;
	                range = maxValue - minValue;
	            } else {
	                niceRange = (maxValue - minValue);
	                niceMinValue = minValue;
	                niceMaxValue = maxValue;
	                range = niceRange;
	                minorTickSpacing = 1;
	                majorTickSpacing = 10;
	            }
	        };
	
	        // **************   Buffer creation  ********************
	        // Buffer for the frame
	        var frameBuffer = createBuffer(width, height);
	        var frameContext = frameBuffer.getContext('2d');
	
	        // Buffer for the background
	        var backgroundBuffer = createBuffer(width, height);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        var lcdBuffer;
	
	        // Buffer for active bargraph led
	        var activeLedBuffer = doc.createElement('canvas');
	        if (vertical) {
	            activeLedBuffer.width = imageWidth * 0.121428;
	            activeLedBuffer.height = imageHeight * 0.012135;
	        } else {
	            activeLedBuffer.width = imageWidth * 0.012135;
	            activeLedBuffer.height = imageHeight * 0.121428;
	        }
	        var activeLedContext = activeLedBuffer.getContext('2d');
	
	        // Buffer for active bargraph led
	        var inActiveLedBuffer = doc.createElement('canvas');
	        if (vertical) {
	            inActiveLedBuffer.width = imageWidth * 0.121428;
	            inActiveLedBuffer.height = imageHeight * 0.012135;
	        } else {
	            inActiveLedBuffer.width = imageWidth * 0.012135;
	            inActiveLedBuffer.height = imageHeight * 0.121428;
	        }
	        var inActiveLedContext = inActiveLedBuffer.getContext('2d');
	
	        // Buffer for led on painting code
	        var ledBufferOn = createBuffer(ledSize, ledSize);
	        var ledContextOn = ledBufferOn.getContext('2d');
	
	        // Buffer for led off painting code
	        var ledBufferOff = createBuffer(ledSize, ledSize);
	        var ledContextOff = ledBufferOff.getContext('2d');
	
	        // Buffer for current led painting code
	        var ledBuffer = ledBufferOff;
	
	        // Buffer for the minMeasuredValue indicator
	        var minMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);
	        var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for the maxMeasuredValue indicator
	        var maxMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);
	        var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(width, height);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // **************   Image creation  ********************
	        var drawLcdText = function (ctx, value, vertical) {
	            ctx.save();
	            ctx.textAlign = 'right';
	            ctx.textBaseline = 'middle';
	            ctx.strokeStyle = lcdColor.textColor;
	            ctx.fillStyle = lcdColor.textColor;
	
	            if (lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) {
	                ctx.shadowColor = 'gray';
	                if (vertical) {
	                    ctx.shadowOffsetX = imageWidth * 0.007;
	                    ctx.shadowOffsetY = imageWidth * 0.007;
	                    ctx.shadowBlur = imageWidth * 0.009;
	                } else {
	                    ctx.shadowOffsetX = imageHeight * 0.007;
	                    ctx.shadowOffsetY = imageHeight * 0.007;
	                    ctx.shadowBlur = imageHeight * 0.009;
	                }
	            }
	
	            var lcdTextX;
	            var lcdTextY;
	            var lcdTextWidth;
	
	            if (digitalFont) {
	                ctx.font = lcdFont;
	            } else {
	                ctx.font = stdFont;
	            }
	
	            if (vertical) {
	                lcdTextX = (imageWidth - (imageWidth * 0.571428)) / 2 + 1 + imageWidth * 0.571428 - 2;
	                lcdTextY = imageHeight * 0.88 + 1 + (imageHeight * 0.055 - 2) / 2;
	                lcdTextWidth = imageWidth * 0.7 - 2;
	            } else {
	                lcdTextX = (imageWidth * 0.695) + imageWidth * 0.18 - 2;
	                lcdTextY = (imageHeight * 0.22) + 1 + (imageHeight * 0.15 - 2) / 2;
	                lcdTextWidth = imageHeight * 0.22 - 2;
	            }
	
	            ctx.fillText(value.toFixed(lcdDecimals), lcdTextX, lcdTextY, lcdTextWidth);
	
	            ctx.restore();
	        };
	
	        var createThresholdImage = function (vertical) {
	            var thresholdBuffer = doc.createElement('canvas');
	            thresholdBuffer.height = thresholdBuffer.width = minMaxIndSize;
	            var thresholdCtx = thresholdBuffer.getContext('2d');
	
	            thresholdCtx.save();
	            var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);
	            gradThreshold.addColorStop(0, '#520000');
	            gradThreshold.addColorStop(0.3, '#fc1d00');
	            gradThreshold.addColorStop(0.59, '#fc1d00');
	            gradThreshold.addColorStop(1, '#520000');
	            thresholdCtx.fillStyle = gradThreshold;
	
	            if (vertical) {
	                thresholdCtx.beginPath();
	                thresholdCtx.moveTo(0.1, thresholdBuffer.height * 0.5);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);
	                thresholdCtx.closePath();
	            } else {
	                thresholdCtx.beginPath();
	                thresholdCtx.moveTo(0.1, 0.1);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);
	                thresholdCtx.lineTo(thresholdBuffer.width * 0.5, thresholdBuffer.height * 0.9);
	                thresholdCtx.closePath();
	            }
	
	            thresholdCtx.fill();
	            thresholdCtx.strokeStyle = '#FFFFFF';
	            thresholdCtx.stroke();
	
	            thresholdCtx.restore();
	
	            return thresholdBuffer;
	        };
	
	        var drawTickmarksImage = function (ctx, labelNumberFormat, vertical) {
	            backgroundColor.labelColor.setAlpha(1);
	            ctx.save();
	            ctx.textBaseline = 'middle';
	            var TEXT_WIDTH = imageWidth * 0.1;
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	
	            var valueCounter = minValue;
	            var majorTickCounter = maxNoOfMinorTicks - 1;
	            var tickCounter;
	            var currentPos;
	            var scaleBoundsX;
	            var scaleBoundsY;
	            var scaleBoundsW;
	            var scaleBoundsH;
	            var tickSpaceScaling = 1;
	
	            var minorTickStart;
	            var minorTickStop;
	            var mediumTickStart;
	            var mediumTickStop;
	            var majorTickStart;
	            var majorTickStop;
	            if (vertical) {
	                minorTickStart = (0.34 * imageWidth);
	                minorTickStop = (0.36 * imageWidth);
	                mediumTickStart = (0.33 * imageWidth);
	                mediumTickStop = (0.36 * imageWidth);
	                majorTickStart = (0.32 * imageWidth);
	                majorTickStop = (0.36 * imageWidth);
	                ctx.textAlign = 'right';
	                scaleBoundsX = 0;
	                scaleBoundsY = imageHeight * 0.128640;
	                scaleBoundsW = 0;
	                scaleBoundsH = (imageHeight * 0.856796 - imageHeight * 0.128640);
	                tickSpaceScaling = scaleBoundsH / (maxValue - minValue);
	            } else {
	                minorTickStart = (0.65 * imageHeight);
	                minorTickStop = (0.63 * imageHeight);
	                mediumTickStart = (0.66 * imageHeight);
	                mediumTickStop = (0.63 * imageHeight);
	                majorTickStart = (0.67 * imageHeight);
	                majorTickStop = (0.63 * imageHeight);
	                ctx.textAlign = 'center';
	                scaleBoundsX = imageWidth * 0.142857;
	                scaleBoundsY = 0;
	                scaleBoundsW = (imageWidth * 0.871012 - imageWidth * 0.142857);
	                scaleBoundsH = 0;
	                tickSpaceScaling = scaleBoundsW / (maxValue - minValue);
	            }
	
	            var labelCounter;
	            for (labelCounter = minValue, tickCounter = 0; labelCounter <= maxValue; labelCounter += minorTickSpacing, tickCounter += minorTickSpacing) {
	
	                // Calculate the bounds of the scaling
	                if (vertical) {
	                    currentPos = scaleBoundsY + scaleBoundsH - tickCounter * tickSpaceScaling;
	                } else {
	                    currentPos = scaleBoundsX + tickCounter * tickSpaceScaling;
	                }
	
	                majorTickCounter++;
	
	                // Draw tickmark every major tickmark spacing
	                if (majorTickCounter === maxNoOfMinorTicks) {
	
	                    // Draw the major tickmarks
	                    ctx.lineWidth = 1.5;
	                    drawLinearTicks(ctx, majorTickStart, majorTickStop, currentPos, vertical);
	
	                    // Draw the standard tickmark labels
	                    if (vertical) {
	                        // Vertical orientation
	                        switch (labelNumberFormat.format) {
	                        case 'fractional':
	                            ctx.fillText((valueCounter.toFixed(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);
	                            break;
	
	                        case 'scientific':
	                            ctx.fillText((valueCounter.toPrecision(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);
	                            break;
	
	                        case 'standard':
	                        /* falls through */
	                        default:
	                            ctx.fillText((valueCounter.toFixed(0)), imageWidth * 0.28, currentPos, TEXT_WIDTH);
	                            break;
	                        }
	                    } else {
	                        // Horizontal orientation
	                        switch (labelNumberFormat.format) {
	                        case 'fractional':
	                            ctx.fillText((valueCounter.toFixed(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);
	                            break;
	
	                        case 'scientific':
	                            ctx.fillText((valueCounter.toPrecision(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);
	                            break;
	
	                        case 'standard':
	                        /* falls through */
	                        default:
	                            ctx.fillText((valueCounter.toFixed(0)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);
	                            break;
	                        }
	                    }
	
	                    valueCounter += majorTickSpacing;
	                    majorTickCounter = 0;
	                    continue;
	                }
	
	                // Draw tickmark every minor tickmark spacing
	                if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (maxNoOfMinorTicks / 2)) {
	                    ctx.lineWidth = 1;
	                    drawLinearTicks(ctx, mediumTickStart, mediumTickStop, currentPos, vertical);
	                } else {
	                    ctx.lineWidth = 0.5;
	                    drawLinearTicks(ctx, minorTickStart, minorTickStop, currentPos, vertical);
	                }
	            }
	
	            ctx.restore();
	        };
	
	        var drawLinearTicks = function (ctx, tickStart, tickStop, currentPos, vertical) {
	            if (vertical) {
	                // Vertical orientation
	                ctx.beginPath();
	                ctx.moveTo(tickStart, currentPos);
	                ctx.lineTo(tickStop, currentPos);
	                ctx.closePath();
	                ctx.stroke();
	            } else {
	                // Horizontal orientation
	                ctx.beginPath();
	                ctx.moveTo(currentPos, tickStart);
	                ctx.lineTo(currentPos, tickStop);
	                ctx.closePath();
	                ctx.stroke();
	            }
	        };
	
	        // **************   Initialization  ********************
	        var init = function (parameters) {
	            parameters = parameters || {};
	            var drawFrame = (undefined === parameters.frame ? false : parameters.frame);
	            var drawBackground = (undefined === parameters.background ? false : parameters.background);
	            var drawLed = (undefined === parameters.led ? false : parameters.led);
	            var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	            var drawBargraphLed = (undefined === parameters.bargraphled ? false : parameters.bargraphled);
	
	            initialized = true;
	
	            // Calculate the current min and max values and the range
	            calculate();
	
	            // Create frame in frame buffer (backgroundBuffer)
	            if (drawFrame && frameVisible) {
	                drawLinearFrameImage(frameContext, frameDesign, imageWidth, imageHeight, vertical);
	            }
	
	            // Create background in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                drawLinearBackgroundImage(backgroundContext, backgroundColor, imageWidth, imageHeight, vertical);
	            }
	
	            if (drawLed) {
	                if (vertical) {
	                    // Draw LED ON in ledBuffer_ON
	                    ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);
	
	                    // Draw LED ON in ledBuffer_OFF
	                    ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);
	                } else {
	                    // Draw LED ON in ledBuffer_ON
	                    ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);
	
	                    // Draw LED ON in ledBuffer_OFF
	                    ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);
	                }
	            }
	
	            // Draw min measured value indicator in minMeasuredValueBuffer
	            if (minMeasuredValueVisible) {
	                if (vertical) {
	                    minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);
	                } else {
	                    minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);
	                }
	            }
	
	            // Draw max measured value indicator in maxMeasuredValueBuffer
	            if (maxMeasuredValueVisible) {
	                if (vertical) {
	                    maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);
	                } else {
	                    maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, steelseries.ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);
	                }
	            }
	
	            // Create alignment posts in background buffer (backgroundBuffer)
	            if (drawBackground && backgroundVisible) {
	                var valuePos;
	                // Create tickmarks in background buffer (backgroundBuffer)
	                drawTickmarksImage(backgroundContext, labelNumberFormat, vertical);
	
	                // Draw threshold image to background context
	                if (thresholdVisible) {
	                    backgroundContext.save();
	                    if (vertical) {
	                        // Vertical orientation
	                        valuePos = imageHeight * 0.856796 - (imageHeight * 0.728155) * (threshold - minValue) / (maxValue - minValue);
	                        backgroundContext.translate(imageWidth * 0.365, valuePos - minMaxIndSize / 2);
	                    } else {
	                        // Horizontal orientation
	                        valuePos = (imageWidth * 0.856796 - imageWidth * 0.128640) * (threshold - minValue) / (maxValue - minValue);
	                        backgroundContext.translate(imageWidth * 0.142857 - minMaxIndSize / 2 + valuePos, imageHeight * 0.58);
	                    }
	                    backgroundContext.drawImage(createThresholdImage(vertical), 0, 0);
	                    backgroundContext.restore();
	                }
	
	                // Create title in background buffer (backgroundBuffer)
	                if (vertical) {
	                    drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible);
	                } else {
	                    drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible);
	                }
	            }
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            if (drawBackground && lcdVisible) {
	                if (vertical) {
	                    lcdBuffer = createLcdBackgroundImage(imageWidth * 0.571428, imageHeight * 0.055, lcdColor);
	                    backgroundContext.drawImage(lcdBuffer, ((imageWidth - (imageWidth * 0.571428)) / 2), imageHeight * 0.88);
	                } else {
	                    lcdBuffer = createLcdBackgroundImage(imageWidth * 0.18, imageHeight * 0.15, lcdColor);
	                    backgroundContext.drawImage(lcdBuffer, imageWidth * 0.695, imageHeight * 0.22);
	                }
	            }
	
	            // Draw leds of bargraph
	            if (drawBargraphLed) {
	                drawInActiveLed(inActiveLedContext);
	                drawActiveLed(activeLedContext, valueColor);
	            }
	
	            // Convert Section values into pixels
	            isSectionsVisible = false;
	            if (null !== section && 0 < section.length) {
	                isSectionsVisible = true;
	                var sectionIndex = section.length;
	                var top, bottom, fullSize, ledWidth2;
	
	                if (vertical) {
	                    // Vertical orientation
	                    top =  imageHeight * 0.128640; // position of max value
	                    bottom = imageHeight * 0.856796; // position of min value
	                    fullSize = bottom - top;
	                    ledWidth2 = 0;
	                } else {
	                    // Horizontal orientation
	                    top = imageWidth * 0.856796; // position of max value
	                    bottom = imageWidth * 0.128640;
	                    fullSize = top - bottom;
	                    ledWidth2 = imageWidth * 0.012135 / 2;
	                }
	                sectionPixels = [];
	                do {
	                    sectionIndex--;
	                    sectionPixels.push({start: (((section[sectionIndex].start + Math.abs(minValue)) / (maxValue - minValue)) * fullSize - ledWidth2),
	                                         stop: (((section[sectionIndex].stop + Math.abs(minValue)) / (maxValue - minValue)) * fullSize - ledWidth2),
	                                        color: customColorDef(section[sectionIndex].color)});
	                } while (0 < sectionIndex);
	            }
	
	            // Use a gradient for the valueColor?
	            isGradientVisible = false;
	            if (useValueGradient && valueGradient !== null) {
	                // force section colors off!
	                isSectionsVisible = false;
	                isGradientVisible = true;
	            }
	
	            // Create foreground in foreground buffer (foregroundBuffer)
	            if (drawForeground && foregroundVisible) {
	                drawLinearForegroundImage(foregroundContext, imageWidth, imageHeight, vertical, false);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetFrame = (undefined === buffers.frame ? false : buffers.frame);
	            var resetBackground = (undefined === buffers.background ? false : buffers.background);
	            var resetLed = (undefined === buffers.led ? false : buffers.led);
	            var resetBargraphLed = (undefined === buffers.bargraphled ? false : buffers.bargraphled);
	            var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            if (resetFrame) {
	                frameBuffer.width = width;
	                frameBuffer.height = height;
	                frameContext = frameBuffer.getContext('2d');
	            }
	
	            if (resetBackground) {
	                backgroundBuffer.width = width;
	                backgroundBuffer.height = height;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	
	            if (resetBargraphLed) {
	                if (vertical) {
	                    activeLedBuffer.width = width * 0.121428;
	                    activeLedBuffer.height = height * 0.012135;
	                } else {
	                    activeLedBuffer.width = width * 0.012135;
	                    activeLedBuffer.height = height * 0.121428;
	                }
	                activeLedContext = activeLedBuffer.getContext('2d');
	
	                // Buffer for active bargraph led
	                if (vertical) {
	                    inActiveLedBuffer.width = width * 0.121428;
	                    inActiveLedBuffer.height = height * 0.012135;
	                } else {
	                    inActiveLedBuffer.width = width * 0.012135;
	                    inActiveLedBuffer.height = height * 0.121428;
	                }
	                inActiveLedContext = inActiveLedBuffer.getContext('2d');
	            }
	
	            if (resetLed) {
	                ledBufferOn.width = Math.ceil(width * 0.093457);
	                ledBufferOn.height = Math.ceil(height * 0.093457);
	                ledContextOn = ledBufferOn.getContext('2d');
	
	                ledBufferOff.width = Math.ceil(width * 0.093457);
	                ledBufferOff.height = Math.ceil(height * 0.093457);
	                ledContextOff = ledBufferOff.getContext('2d');
	
	                // Buffer for current led painting code
	                ledBuffer = ledBufferOff;
	            }
	
	            if (resetForeground) {
	                foregroundBuffer.width = width;
	                foregroundBuffer.height = height;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        var blink = function (blinking) {
	            if (blinking) {
	                ledTimerId = setInterval(toggleAndRepaintLed, 1000);
	            } else {
	                clearInterval(ledTimerId);
	                ledBuffer = ledBufferOff;
	            }
	        };
	
	        var toggleAndRepaintLed = function () {
	            if (ledVisible) {
	                if (ledBuffer === ledBufferOn) {
	                    ledBuffer = ledBufferOff;
	                } else {
	                    ledBuffer = ledBufferOn;
	                }
	                if (!repainting) {
	                    repainting = true;
	                    requestAnimFrame(self.repaint);
	                }
	            }
	        };
	
	        var drawValue = function (ctx, imageWidth, imageHeight) {
	            var top; // position of max value
	            var bottom; // position of min value
	            var labelColor = backgroundColor.labelColor;
	            var fullSize;
	            var valueSize;
	            var valueTop;
	            var valueBackgroundStartX;
	            var valueBackgroundStartY;
	            var valueBackgroundStopX;
	            var valueBackgroundStopY;
	            var valueBorderStartX;
	            var valueBorderStartY;
	            var valueBorderStopX;
	            var valueBorderStopY;
	            var currentValue;
	            var gradRange;
	            var fraction;
	
	            // Orientation dependend definitions
	            if (vertical) {
	                // Vertical orientation
	                top =  imageHeight * 0.128640; // position of max value
	                bottom = imageHeight * 0.856796; // position of min value
	                fullSize = bottom - top;
	                valueSize = fullSize * (value - minValue) / (maxValue - minValue);
	                valueTop = top + fullSize - valueSize;
	                valueBackgroundStartX = 0;
	                valueBackgroundStartY = top;
	                valueBackgroundStopX = 0;
	                valueBackgroundStopY = top + fullSize * 1.014;
	            } else {
	                // Horizontal orientation
	                top = imageWidth * 0.856796; // position of max value
	                bottom = imageWidth * 0.128640;
	                fullSize = top - bottom;
	                valueSize = fullSize * (value - minValue) / (maxValue - minValue);
	                valueTop = bottom;
	                valueBackgroundStartX = imageWidth * 0.13;
	                valueBackgroundStartY = imageHeight * 0.435714;
	                valueBackgroundStopX = valueBackgroundStartX + fullSize * 1.035;
	                valueBackgroundStopY = valueBackgroundStartY;
	            }
	
	            var darker = (backgroundColor === steelseries.BackgroundColor.CARBON ||
	                          backgroundColor === steelseries.BackgroundColor.PUNCHED_SHEET ||
	                          backgroundColor === steelseries.BackgroundColor.STAINLESS ||
	                          backgroundColor === steelseries.BackgroundColor.BRUSHED_STAINLESS ||
	                          backgroundColor === steelseries.BackgroundColor.TURNED) ? 0.3 : 0;
	
	            var valueBackgroundTrackGradient = ctx.createLinearGradient(valueBackgroundStartX, valueBackgroundStartY, valueBackgroundStopX, valueBackgroundStopY);
	            labelColor.setAlpha(0.047058 + darker);
	            valueBackgroundTrackGradient.addColorStop(0, labelColor.getRgbaColor());
	            labelColor.setAlpha(0.145098 + darker);
	            valueBackgroundTrackGradient.addColorStop(0.48, labelColor.getRgbaColor());
	            labelColor.setAlpha(0.149019 + darker);
	            valueBackgroundTrackGradient.addColorStop(0.49, labelColor.getRgbaColor());
	            labelColor.setAlpha(0.047058 + darker);
	            valueBackgroundTrackGradient.addColorStop(1, labelColor.getRgbaColor());
	            ctx.fillStyle = valueBackgroundTrackGradient;
	
	            if (vertical) {
	                ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.15, fullSize * 1.014);
	            } else {
	                ctx.fillRect(valueBackgroundStartX, valueBackgroundStartY, fullSize * 1.035, imageHeight * 0.152857);
	            }
	
	            if (vertical) {
	                // Vertical orientation
	                valueBorderStartX = 0;
	                valueBorderStartY = top;
	                valueBorderStopX = 0;
	                valueBorderStopY = top + fullSize * 1.014;
	            } else {
	                // Horizontal orientation                ;
	                valueBorderStartX = valueBackgroundStartX;
	                valueBorderStartY = 0;
	                valueBorderStopX = valueBackgroundStopX;
	                valueBorderStopY = 0;
	            }
	
	            var valueBorderGradient = ctx.createLinearGradient(valueBorderStartX, valueBorderStartY, valueBorderStopX, valueBorderStopY);
	            labelColor.setAlpha(0.298039 + darker);
	            valueBorderGradient.addColorStop(0, labelColor.getRgbaColor());
	            labelColor.setAlpha(0.686274 + darker);
	            valueBorderGradient.addColorStop(0.48, labelColor.getRgbaColor());
	            labelColor.setAlpha(0.698039 + darker);
	            valueBorderGradient.addColorStop(0.49, labelColor.getRgbaColor());
	            labelColor.setAlpha(0.4 + darker);
	            valueBorderGradient.addColorStop(1, labelColor.getRgbaColor());
	            ctx.fillStyle = valueBorderGradient;
	            if (vertical) {
	                ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.007142, fullSize * 1.014);
	                ctx.fillRect(imageWidth * 0.571428, top, imageWidth * 0.007142, fullSize * 1.014);
	            } else {
	                ctx.fillRect(imageWidth * 0.13, imageHeight * 0.435714, fullSize * 1.035, imageHeight * 0.007142);
	                ctx.fillRect(imageWidth * 0.13, imageHeight * 0.571428, fullSize * 1.035, imageHeight * 0.007142);
	            }
	
	            // Prepare led specific variables
	            var ledX;
	            var ledY;
	            var ledW;
	            var ledH;
	            var ledCenterX;
	            var ledCenterY;
	            var activeLeds;
	            var inactiveLeds;
	            if (vertical) {
	                // VERTICAL
	                ledX = imageWidth * 0.45;
	                ledY = imageHeight * 0.851941;
	                ledW = imageWidth * 0.121428;
	                ledH = imageHeight * 0.012135;
	                ledCenterX = (ledX + ledW) / 2;
	                ledCenterY = (ledY + ledH) / 2;
	            } else {
	                // HORIZONTAL
	                ledX = imageWidth * 0.142857;
	                ledY = imageHeight * 0.45;
	                ledW = imageWidth * 0.012135;
	                ledH = imageHeight * 0.121428;
	                ledCenterX = (ledX + ledW) / 2;
	                ledCenterY = (ledY + ledH) / 2;
	            }
	
	            var translateX, translateY;
	            var activeLedColor;
	            var lastActiveLedColor = valueColor;
	            var i;
	            // Draw the value
	            if (vertical) {
	                // Draw the inactive leds
	                inactiveLeds = fullSize;
	                for (translateY = 0 ; translateY <= inactiveLeds ; translateY += ledH + 1) {
	                    ctx.translate(0, -translateY);
	                    ctx.drawImage(inActiveLedBuffer, ledX, ledY);
	                    ctx.translate(0, translateY);
	                }
	                // Draw the active leds in dependence on the current value
	                activeLeds = ((value - minValue) / (maxValue - minValue)) * fullSize;
	                for (translateY = 0 ; translateY <= activeLeds ; translateY += ledH + 1) {
	                    //check for LED color
	                    activeLedColor = valueColor;
	                    // Use a gradient for value colors?
	                    if (isGradientVisible) {
	                        // Convert pixel back to value
	                        currentValue = minValue + (translateY / fullSize) * (maxValue - minValue);
	                        gradRange = valueGradient.getEnd() - valueGradient.getStart();
	                        fraction = currentValue / gradRange;
	                        fraction = Math.max(Math.min(fraction, 1), 0);
	                        activeLedColor = customColorDef(valueGradient.getColorAt(fraction).getRgbaColor());
	                    } else if (isSectionsVisible) {
	                        for (i = 0; i < sectionPixels.length; i++) {
	                            if (translateY >= sectionPixels[i].start && translateY < sectionPixels[i].stop) {
	                                activeLedColor = sectionPixels[i].color;
	                                break;
	                            }
	                        }
	                    }
	                    // Has LED color changed? If so redraw the buffer
	                    if (lastActiveLedColor.medium.getHexColor() !== activeLedColor.medium.getHexColor()) {
	                        drawActiveLed(activeLedContext, activeLedColor);
	                        lastActiveLedColor = activeLedColor;
	                    }
	                    // Draw LED
	                    ctx.translate(0, -translateY);
	                    ctx.drawImage(activeLedBuffer, ledX, ledY);
	                    ctx.translate(0, translateY);
	                }
	            } else {
	                // Draw the inactive leds
	                inactiveLeds = fullSize;
	                for (translateX = -(ledW / 2) ; translateX <= inactiveLeds ; translateX += ledW + 1) {
	                    ctx.translate(translateX, 0);
	                    ctx.drawImage(inActiveLedBuffer, ledX, ledY);
	                    ctx.translate(-translateX, 0);
	                }
	                // Draw the active leds in dependence on the current value
	                activeLeds = ((value - minValue) / (maxValue - minValue)) * fullSize;
	                for (translateX = -(ledW / 2) ; translateX <= activeLeds ; translateX += ledW + 1) {
	                    //check for LED color
	                    activeLedColor = valueColor;
	                    if (isGradientVisible) {
	                        // Convert pixel back to value
	                        currentValue = minValue + (translateX / fullSize) * (maxValue - minValue);
	                        gradRange = valueGradient.getEnd() - valueGradient.getStart();
	                        fraction = currentValue / gradRange;
	                        fraction = Math.max(Math.min(fraction, 1), 0);
	                        activeLedColor = customColorDef(valueGradient.getColorAt(fraction).getRgbaColor());
	                    } else if (isSectionsVisible) {
	                        for (i = 0; i < sectionPixels.length; i++) {
	                            if (translateX >= sectionPixels[i].start && translateX < sectionPixels[i].stop) {
	                                activeLedColor = sectionPixels[i].color;
	                                break;
	                            }
	                        }
	                    }
	                    // Has LED color changed? If so redraw the buffer
	                    if (lastActiveLedColor.medium.getHexColor() !== activeLedColor.medium.getHexColor()) {
	                        drawActiveLed(activeLedContext, activeLedColor);
	                        lastActiveLedColor = activeLedColor;
	                    }
	                    ctx.translate(translateX, 0);
	                    ctx.drawImage(activeLedBuffer, ledX, ledY);
	                    ctx.translate(-translateX, 0);
	                }
	            }
	        };
	
	        var drawInActiveLed = function (ctx) {
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
	            ctx.closePath();
	            var ledCenterX = (ctx.canvas.width / 2);
	            var ledCenterY = (ctx.canvas.height / 2);
	            var ledGradient = mainCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, ctx.canvas.width / 2);
	            ledGradient.addColorStop(0, '#3c3c3c');
	            ledGradient.addColorStop(1, '#323232');
	            ctx.fillStyle = ledGradient;
	            ctx.fill();
	            ctx.restore();
	        };
	
	        var drawActiveLed = function (ctx, color) {
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
	            ctx.closePath();
	            var ledCenterX = (ctx.canvas.width / 2);
	            var ledCenterY = (ctx.canvas.height / 2);
	            var outerRadius;
	            if (vertical) {
	                outerRadius = ctx.canvas.width / 2;
	            } else {
	                outerRadius = ctx.canvas.height / 2;
	            }
	            var ledGradient = mainCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, outerRadius);
	            ledGradient.addColorStop(0, color.light.getRgbaColor());
	            ledGradient.addColorStop(1, color.dark.getRgbaColor());
	            ctx.fillStyle = ledGradient;
	            ctx.fill();
	            ctx.restore();
	        };
	
	        //************************************ Public methods **************************************
	        this.setValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (value !== targetValue) {
	                value = targetValue;
	
	                if (value > maxMeasuredValue) {
	                    maxMeasuredValue = value;
	                }
	                if (value < minMeasuredValue) {
	                    minMeasuredValue = value;
	                }
	
	                if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                    (value <= threshold && !ledBlinking && !thresholdRising)) {
	                    ledBlinking = true;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.play();
	                    }
	                } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                           (value > threshold && ledBlinking && !thresholdRising)) {
	                    ledBlinking = false;
	                    blink(ledBlinking);
	                    if (playAlarm) {
	                        audioElement.pause();
	                    }
	                }
	
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            var targetValue,
	                gauge = this,
	                time;
	            newValue = parseFloat(newValue);
	            targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	
	            if (value !== targetValue) {
	                if (undefined !== tween && tween.isPlaying) {
	                    tween.stop();
	                }
	
	                time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);
	                time = Math.max(time, fullScaleDeflectionTime / 5);
	                tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);
	                //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);
	                //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos;
	
	                    if ((value >= threshold && !ledBlinking && thresholdRising) ||
	                        (value <= threshold && !ledBlinking && !thresholdRising)) {
	                        ledBlinking = true;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.play();
	                        }
	                    } else if ((value < threshold && ledBlinking && thresholdRising) ||
	                               (value > threshold && ledBlinking && !thresholdRising)) {
	                        ledBlinking = false;
	                        blink(ledBlinking);
	                        if (playAlarm) {
	                            audioElement.pause();
	                        }
	                    }
	
	                    if (value > maxMeasuredValue) {
	                        maxMeasuredValue = value;
	                    }
	                    if (value < minMeasuredValue) {
	                        minMeasuredValue = value;
	                    }
	
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.resetMinMeasuredValue = function () {
	            minMeasuredValue = value;
	            this.repaint();
	            return this;
	        };
	
	        this.resetMaxMeasuredValue = function () {
	            maxMeasuredValue = value;
	            this.repaint();
	            return this;
	        };
	
	        this.setMinMeasuredValueVisible = function (visible) {
	            minMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setMaxMeasuredValueVisible = function (visible) {
	            maxMeasuredValueVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdVisible = function (visible) {
	            thresholdVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setThresholdRising = function (rising) {
	            thresholdRising = !!rising;
	            // reset existing threshold alerts
	            ledBlinking = !ledBlinking;
	            blink(ledBlinking);
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdDecimals = function (decimals) {
	            lcdDecimals = parseInt(decimals, 10);
	            this.repaint();
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({background: true});
	            backgroundColor = newBackgroundColor;
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setValueColor = function (newValueColor) {
	            resetBuffers({bargraphled: true});
	            valueColor = newValueColor;
	            init({bargraphled: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedColor = function (newLedColor) {
	            resetBuffers({led: true});
	            ledColor = newLedColor;
	            init({led: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLedVisible = function (visible) {
	            ledVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            lcdColor = newLcdColor;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setSection = function (areaSec) {
	            section = areaSec;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setSectionActive = function (value) {
	            useSectionColors = value;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setGradient = function (grad) {
	            valueGradient = grad;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setGradientActive = function (value) {
	            useValueGradient = value;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setMaxMeasuredValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (maxMeasuredValue !== targetValue) {
	                maxMeasuredValue = targetValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.setMinMeasuredValue = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (minMeasuredValue !== targetValue) {
	                minMeasuredValue = targetValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.setTitleString = function (title) {
	            titleString = title;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setUnitString = function (unit) {
	            unitString = unit;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setMinValue = function (value) {
	            minValue = parseFloat(value);
	            resetBuffers({background: true,
	                          foreground: true,
	                          pointer: true});
	            init({background: true,
	                foreground: true,
	                pointer: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMinValue = function () {
	            return minValue;
	        };
	
	        this.setMaxValue = function (value) {
	            maxValue = parseFloat(value);
	            resetBuffers({background: true,
	                          foreground: true,
	                          pointer: true});
	            init({background: true,
	                  foreground: true,
	                  pointer: true});
	            this.repaint();
	            return this;
	        };
	
	        this.getMaxValue = function () {
	            return maxValue;
	        };
	
	        this.setThreshold = function (newValue) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));
	            if (threshold !== targetValue) {
	                threshold = targetValue;
	                resetBuffers({background: true});
	                init({background: true});
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.setThresholdVisible = function (visible) {
	            thresholdVisible = !!visible;
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      led: true,
	                      pointer: true,
	                      foreground: true,
	                      bargraphled: true});
	            }
	
	            //mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            // Draw frame
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            if (backgroundVisible) {
	                mainCtx.drawImage(backgroundBuffer, 0, 0);
	            }
	
	            // Draw lcd display
	            if (lcdVisible) {
	                drawLcdText(mainCtx, value, vertical);
	            }
	
	            // Draw led
	            if (ledVisible) {
	                mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);
	            }
	            var valuePos;
	            var minMaxX, minMaxY;
	           // Draw min measured value indicator
	            if (minMeasuredValueVisible) {
	                if (vertical) {
	                    valuePos = imageHeight * 0.856796 - (imageHeight * 0.728155) * (minMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * 0.34 - minMeasuredValueBuffer.width;
	                    minMaxY = valuePos - minMeasuredValueBuffer.height / 2;
	                } else {
	                    valuePos = ((imageWidth * 0.856796) - (imageWidth * 0.128640)) * (minMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * 0.142857 - minMeasuredValueBuffer.height / 2 + valuePos;
	                    minMaxY = imageHeight * 0.65;
	                }
	                mainCtx.drawImage(minMeasuredValueBuffer, minMaxX, minMaxY);
	            }
	
	            // Draw max measured value indicator
	            if (maxMeasuredValueVisible) {
	                if (vertical) {
	                    valuePos = imageHeight * 0.856796 - (imageHeight * 0.728155) * (maxMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * 0.34 - maxMeasuredValueBuffer.width;
	                    minMaxY = valuePos - maxMeasuredValueBuffer.height / 2;
	                } else {
	                    valuePos = ((imageWidth * 0.856796) - (imageWidth * 0.128640)) * (maxMeasuredValue - minValue) / (maxValue - minValue);
	                    minMaxX = imageWidth * 0.142857 - maxMeasuredValueBuffer.height / 2 + valuePos;
	                    minMaxY = imageHeight * 0.65;
	                }
	                mainCtx.drawImage(maxMeasuredValueBuffer, minMaxX, minMaxY);
	            }
	
	            mainCtx.save();
	            drawValue(mainCtx, imageWidth, imageHeight);
	            mainCtx.restore();
	
	            // Draw foreground
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var displaySingle = function (canvas, parameters) {
	        parameters = parameters || {};
	        var width = (undefined === parameters.width ? 0 : parameters.width),
	            height = (undefined === parameters.height ? 0 : parameters.height),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.STANDARD : parameters.lcdColor),
	            lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),
	            unitString = (undefined === parameters.unitString ? '' : parameters.unitString),
	            unitStringVisible = (undefined === parameters.unitStringVisible ? false : parameters.unitStringVisible),
	            headerString = (undefined === parameters.headerString ? '' : parameters.headerString),
	            headerStringVisible = (undefined === parameters.headerStringVisible ? false : parameters.headerStringVisible),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            valuesNumeric = (undefined === parameters.valuesNumeric ? true : parameters.valuesNumeric),
	            value = (undefined === parameters.value ? 0 : parameters.value),
	            alwaysScroll = (undefined === parameters.alwaysScroll ? false : parameters.alwaysScroll),
	            autoScroll = (undefined === parameters.autoScroll ? false : parameters.autoScroll),
	            section = (undefined === parameters.section ? null : parameters.section);
	
	        var scrolling = false;
	        var scrollX = 0;
	        var scrollTimer;
	        var repainting = false;
	
	        var self = this;
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (width === 0) {
	            width = mainCtx.canvas.width;
	        }
	        if (height === 0) {
	            height = mainCtx.canvas.height;
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = width;
	        mainCtx.canvas.height = height;
	
	        var imageWidth = width;
	        var imageHeight = height;
	        var textWidth = 0;
	
	        var fontHeight = Math.floor(imageHeight / 1.5);
	        var stdFont = fontHeight + 'px ' + stdFontName;
	        var lcdFont = fontHeight + 'px ' + lcdFontName;
	
	        var initialized = false;
	
	        // **************   Buffer creation  ********************
	        // Buffer for the lcd
	        var lcdBuffer;
	        var sectionBuffer = [];
	        var sectionForegroundColor = [];
	
	        // **************   Image creation  ********************
	        var drawLcdText = function (value, color) {
	            mainCtx.save();
	            mainCtx.textAlign = 'right';
	            //mainCtx.textBaseline = 'top';
	            mainCtx.strokeStyle = color;
	            mainCtx.fillStyle = color;
	
	            mainCtx.beginPath();
	            mainCtx.rect(2, 0, imageWidth - 4, imageHeight);
	            mainCtx.closePath();
	            mainCtx.clip();
	
	            if ((lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) &&
	                 section === null) {
	                mainCtx.shadowColor = 'gray';
	                mainCtx.shadowOffsetX = imageHeight * 0.035;
	                mainCtx.shadowOffsetY = imageHeight * 0.035;
	                mainCtx.shadowBlur = imageHeight * 0.055;
	            }
	
	            mainCtx.font = digitalFont ? lcdFont : stdFont;
	
	            if (valuesNumeric) {
	                // Numeric value
	                var unitWidth = 0;
	                textWidth = 0;
	                if (unitStringVisible) {
	                    mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;
	                    unitWidth = mainCtx.measureText(unitString).width;
	                }
	                mainCtx.font = digitalFont ? lcdFont : stdFont;
	                var lcdText = value.toFixed(lcdDecimals);
	                textWidth = mainCtx.measureText(lcdText).width;
	                var vPos = 0.38;
	                if (headerStringVisible) {
	                    vPos = 0.52;
	                }
	
	                mainCtx.fillText(lcdText, imageWidth - unitWidth - 4 - scrollX, imageHeight * 0.5 + fontHeight * vPos);
	
	                if (unitStringVisible) {
	                    mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;
	                    mainCtx.fillText(unitString, imageWidth - 2 - scrollX, imageHeight * 0.5 + fontHeight * vPos);
	                }
	                if (headerStringVisible) {
	                    mainCtx.textAlign = 'center';
	                    mainCtx.font = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName;
	                    mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.3);
	                }
	            } else {
	                // Text value
	                textWidth = mainCtx.measureText(value).width;
	                if (alwaysScroll || (autoScroll && textWidth > imageWidth - 4)) {
	                    if (!scrolling) {
	                        if (textWidth > imageWidth * 0.8) {
	                            scrollX = imageWidth - textWidth - imageWidth * 0.2; // leave 20% blank leading space to give time to read start of message
	                        } else {
	                            scrollX = 0;
	                        }
	                        scrolling = true;
	                        clearTimeout(scrollTimer);  // kill any pending animate
	                        scrollTimer = setTimeout(animate, 200);
	                    }
	                } else if (autoScroll && textWidth <= imageWidth - 4) {
	                    scrollX = 0;
	                    scrolling = false;
	                }
	                mainCtx.fillText(value, imageWidth - 2 - scrollX, imageHeight * 0.5 + fontHeight * 0.38);
	            }
	            mainCtx.restore();
	        };
	
	        var createLcdSectionImage = function (width, height, color, lcdColor) {
	            var lcdSectionBuffer = createBuffer(width, height);
	            var lcdCtx = lcdSectionBuffer.getContext('2d');
	
	            lcdCtx.save();
	            var xB = 0;
	            var yB = 0;
	            var wB = width;
	            var hB = height;
	            var rB = Math.min(width, height) * 0.095;
	
	            var lcdBackground = lcdCtx.createLinearGradient(0, yB, 0, yB + hB);
	
	            lcdBackground.addColorStop(0, '#4c4c4c');
	            lcdBackground.addColorStop(0.08, '#666666');
	            lcdBackground.addColorStop(0.92, '#666666');
	            lcdBackground.addColorStop(1, '#e6e6e6');
	            lcdCtx.fillStyle = lcdBackground;
	
	            roundedRectangle(lcdCtx, xB, yB, wB, hB, rB);
	
	            lcdCtx.fill();
	            lcdCtx.restore();
	
	            lcdCtx.save();
	
	            var rgb = getColorValues(color);
	            var hsb = rgbToHsb(rgb[0], rgb[1], rgb[2]);
	
	            var rgbStart = getColorValues(lcdColor.gradientStartColor);
	            var hsbStart = rgbToHsb(rgbStart[0], rgbStart[1], rgbStart[2]);
	            var rgbFraction1 = getColorValues(lcdColor.gradientFraction1Color);
	            var hsbFraction1 = rgbToHsb(rgbFraction1[0], rgbFraction1[1], rgbFraction1[2]);
	            var rgbFraction2 = getColorValues(lcdColor.gradientFraction2Color);
	            var hsbFraction2 = rgbToHsb(rgbFraction2[0], rgbFraction2[1], rgbFraction2[2]);
	            var rgbFraction3 = getColorValues(lcdColor.gradientFraction3Color);
	            var hsbFraction3 = rgbToHsb(rgbFraction3[0], rgbFraction3[1], rgbFraction3[2]);
	            var rgbStop = getColorValues(lcdColor.gradientStopColor);
	            var hsbStop = rgbToHsb(rgbStop[0], rgbStop[1], rgbStop[2]);
	
	            var startColor = hsbToRgb(hsb[0], hsb[1], hsbStart[2] - 0.31);
	            var fraction1Color = hsbToRgb(hsb[0], hsb[1], hsbFraction1[2] - 0.31);
	            var fraction2Color = hsbToRgb(hsb[0], hsb[1], hsbFraction2[2] - 0.31);
	            var fraction3Color = hsbToRgb(hsb[0], hsb[1], hsbFraction3[2] - 0.31);
	            var stopColor = hsbToRgb(hsb[0], hsb[1], hsbStop[2] - 0.31);
	
	            var xF = 1;
	            var yF = 1;
	            var wF = width - 2;
	            var hF = height - 2;
	            var rF = rB - 1;
	            var lcdForeground = lcdCtx.createLinearGradient(0, yF, 0, yF + hF);
	            lcdForeground.addColorStop(0, 'rgb(' + startColor[0] + ', ' + startColor[1] + ', ' + startColor[2] + ')');
	            lcdForeground.addColorStop(0.03, 'rgb(' + fraction1Color[0] + ',' + fraction1Color[1] + ',' + fraction1Color[2] + ')');
	            lcdForeground.addColorStop(0.49, 'rgb(' + fraction2Color[0] + ',' + fraction2Color[1] + ',' + fraction2Color[2] + ')');
	            lcdForeground.addColorStop(0.5, 'rgb(' + fraction3Color[0] + ',' + fraction3Color[1] + ',' + fraction3Color[2] + ')');
	            lcdForeground.addColorStop(1, 'rgb(' + stopColor[0] + ',' + stopColor[1] + ',' + stopColor[2] + ')');
	            lcdCtx.fillStyle = lcdForeground;
	
	            roundedRectangle(lcdCtx, xF, yF, wF, hF, rF);
	
	            lcdCtx.fill();
	            lcdCtx.restore();
	
	            return lcdSectionBuffer;
	        };
	
	        var createSectionForegroundColor = function (sectionColor) {
	            var rgbSection = getColorValues(sectionColor);
	            var hsbSection = rgbToHsb(rgbSection[0], rgbSection[1], rgbSection[2]);
	            var sectionForegroundRgb = hsbToRgb(hsbSection[0], 0.57, 0.83);
	            return 'rgb(' + sectionForegroundRgb[0] + ', ' + sectionForegroundRgb[1] + ', ' + sectionForegroundRgb[2] + ')';
	        };
	
	        var animate = function () {
	            if (scrolling) {
	                if (scrollX > imageWidth) {
	                    scrollX = -textWidth;
	                }
	                scrollX += 2;
	                scrollTimer = setTimeout(animate, 50);
	            } else {
	                scrollX = 0;
	            }
	            if (!repainting) {
	                repainting = true;
	                requestAnimFrame(self.repaint);
	            }
	        };
	
	        // **************   Initialization  ********************
	        var init = function () {
	            var sectionIndex;
	            initialized = true;
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            lcdBuffer = createLcdBackgroundImage(width, height, lcdColor);
	
	            if (null !== section && 0 < section.length) {
	                for (sectionIndex = 0 ; sectionIndex < section.length ; sectionIndex++) {
	                    sectionBuffer[sectionIndex] = createLcdSectionImage(width, height, section[sectionIndex].color, lcdColor);
	                    sectionForegroundColor[sectionIndex] = createSectionForegroundColor(section[sectionIndex].color);
	                }
	            }
	
	        };
	
	        // **************   Public methods  ********************
	        this.setValue = function (newValue) {
	            if (value !== newValue) {
	                value = newValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            lcdColor = newLcdColor;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setSection = function (newSection) {
	            section = newSection;
	            init({background: true, foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setScrolling = function (scroll) {
	            if (scroll) {
	                if (scrolling) {
	                    return;
	                } else {
	                    scrolling = scroll;
	                    animate();
	                }
	            } else { //disable scrolling
	                scrolling = scroll;
	            }
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            //mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            var lcdBackgroundBuffer = lcdBuffer;
	            var lcdTextColor = lcdColor.textColor;
	            var sectionIndex;
	            // Draw sections
	            if (null !== section && 0 < section.length) {
	                for (sectionIndex = 0 ; sectionIndex < section.length ; sectionIndex++) {
	                    if (value >= section[sectionIndex].start && value <= section[sectionIndex].stop) {
	                        lcdBackgroundBuffer = sectionBuffer[sectionIndex];
	                        lcdTextColor = sectionForegroundColor[sectionIndex];
	                        break;
	                    }
	                }
	            }
	
	            // Draw lcd background
	            mainCtx.drawImage(lcdBackgroundBuffer, 0, 0);
	
	            // Draw lcd text
	            drawLcdText(value, lcdTextColor);
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var displayMulti = function (canvas, parameters) {
	        parameters = parameters || {};
	        var width = (undefined === parameters.width ? 0 : parameters.width),
	            height = (undefined === parameters.height ? 0 : parameters.height),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.STANDARD : parameters.lcdColor),
	            lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),
	            headerString = (undefined === parameters.headerString ? '' : parameters.headerString),
	            headerStringVisible = (undefined === parameters.headerStringVisible ? false : parameters.headerStringVisible),
	            detailString = (undefined === parameters.detailString ? '' : parameters.detailString),
	            detailStringVisible = (undefined === parameters.detailStringVisible ? false : parameters.detailStringVisible),
	            linkAltValue = (undefined === parameters.linkAltValue ? true : parameters.linkAltValue),
	            unitString = (undefined === parameters.unitString ? '' : parameters.unitString),
	            unitStringVisible = (undefined === parameters.unitStringVisible ? false : parameters.unitStringVisible),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            valuesNumeric = (undefined === parameters.valuesNumeric ? true : parameters.valuesNumeric),
	            value = (undefined === parameters.value ? 0 : parameters.value),
	            altValue = (undefined === parameters.altValue ? 0 : parameters.altValue);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (width === 0) {
	            width = mainCtx.canvas.width;
	        }
	        if (height === 0) {
	            height = mainCtx.canvas.height;
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = width;
	        mainCtx.canvas.height = height;
	
	        var imageWidth = width;
	        var imageHeight = height;
	
	        var stdFont = Math.floor(imageHeight / 1.875) + 'px ' + stdFontName;
	        var lcdFont = Math.floor(imageHeight / 1.875) + 'px ' + lcdFontName;
	        var stdAltFont = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName;
	        var lcdAltFont = Math.floor(imageHeight / 3.5) + 'px ' + lcdFontName;
	
	        var initialized = false;
	
	        // **************   Buffer creation  ********************
	        // Buffer for the lcd
	        var lcdBuffer;
	
	        // **************   Image creation  ********************
	        var drawLcdText = function (value) {
	            mainCtx.save();
	            mainCtx.textAlign = 'right';
	            mainCtx.textBaseline = 'middle';
	            mainCtx.strokeStyle = lcdColor.textColor;
	            mainCtx.fillStyle = lcdColor.textColor;
	
	            if (lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) {
	                mainCtx.shadowColor = 'gray';
	                mainCtx.shadowOffsetX = imageHeight * 0.025;
	                mainCtx.shadowOffsetY = imageHeight * 0.025;
	                mainCtx.shadowBlur = imageHeight * 0.05;
	            }
	
	            if (valuesNumeric) {
	                // Numeric value
	                if (headerStringVisible) {
	                    mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName;
	                } else {
	                    mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;
	                }
	                var unitWidth = 0;
	                if (unitStringVisible) {
	                    if (headerStringVisible) {
	                        mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName;
	                        unitWidth = mainCtx.measureText(unitString).width;
	                    } else {
	                        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;
	                        unitWidth = mainCtx.measureText(unitString).width;
	                    }
	                }
	                mainCtx.font = digitalFont ? lcdFont : stdFont;
	                var valueText = value.toFixed(lcdDecimals);
	                if (headerStringVisible) {
	                    mainCtx.fillText(valueText, imageWidth - unitWidth - 4, imageHeight * 0.5);
	                } else {
	                    mainCtx.fillText(valueText, imageWidth - unitWidth - 4, imageHeight * 0.38);
	                }
	
	                if (unitStringVisible) {
	                    mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName;
	                    mainCtx.fillText(unitString, imageWidth - 2, imageHeight * 0.55);
	                }
	
	                var altValueText = altValue.toFixed(lcdDecimals);
	                if (detailStringVisible) {
	                    altValueText = detailString + altValueText;
	                }
	                if (digitalFont) {
	                    mainCtx.font = lcdAltFont;
	                } else {
	                    if (headerStringVisible) {
	                        mainCtx.font = Math.floor(imageHeight / 5) + 'px ' + stdFontName;
	                    } else {
	                        mainCtx.font = stdAltFont;
	                    }
	                }
	                mainCtx.textAlign = 'center';
	                if (headerStringVisible) {
	                    mainCtx.fillText(altValueText, imageWidth / 2, imageHeight * 0.83);
	                    mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.16);
	                } else {
	                    mainCtx.fillText(altValueText, imageWidth / 2, imageHeight * 0.8);
	                }
	            } else {
	                if (headerStringVisible) {
	                    // Text value
	                    mainCtx.font = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName;
	                    mainCtx.fillText(value, imageWidth - 2, imageHeight * 0.48);
	
	                    //mainCtx.font = stdAltFont;
	                    mainCtx.font = Math.floor(imageHeight / 5) + 'px ' + stdFontName;
	                    mainCtx.textAlign = 'center';
	                    mainCtx.fillText(altValue, imageWidth / 2, imageHeight * 0.83);
	                    mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.17);
	                } else {
	                    // Text value
	                    mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;
	                    mainCtx.fillText(value, imageWidth - 2, imageHeight * 0.38);
	
	                    mainCtx.font = stdAltFont;
	                    mainCtx.textAlign = 'center';
	                    mainCtx.fillText(altValue, imageWidth / 2, imageHeight * 0.8);
	                }
	            }
	            mainCtx.restore();
	        };
	
	        // **************   Initialization  ********************
	        var init = function () {
	            initialized = true;
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            lcdBuffer = createLcdBackgroundImage(width, height, lcdColor);
	        };
	
	        // **************   Public methods  ********************
	        this.setValue = function (newValue) {
	            if (value !== newValue || altValue !== newValue) {
	                if (linkAltValue) {
	                    altValue = value;
	                }
	                value = newValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.setAltValue = function (altValue) {
	            if (altValue !== altValue) {
	                altValue = altValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            lcdColor = newLcdColor;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            //mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            // Draw lcd background
	            mainCtx.drawImage(lcdBuffer, 0, 0);
	
	            // Draw lcd text
	            drawLcdText(value);
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var level = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            decimalsVisible = (undefined === parameters.decimalsVisible ? false : parameters.decimalsVisible),
	            textOrientationFixed = (undefined === parameters.textOrientationFixed ? false : parameters.textOrientationFixed),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            pointerColor = (undefined === parameters.pointerColor ? steelseries.ColorDef.RED : parameters.pointerColor),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            rotateFace = (undefined === parameters.rotateFace ? false : parameters.rotateFace);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        var tween;
	        var repainting = false;
	
	        var value = 0;
	        var stepValue = 0;
	        var visibleValue = 0;
	        var angleStep = TWO_PI / 360;
	        var angle = this.value;
	        var decimals = decimalsVisible ? 1 : 0;
	
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight / 2;
	
	        var initialized = false;
	
	        // **************   Buffer creation  ********************
	        // Buffer for all static background painting code
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        // Buffer for pointer image painting code
	        var pointerBuffer = createBuffer(size, size);
	        var pointerContext = pointerBuffer.getContext('2d');
	
	        // Buffer for step pointer image painting code
	        var stepPointerBuffer = createBuffer(size, size);
	        var stepPointerContext = stepPointerBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // **************   Image creation  ********************
	        var drawTickmarksImage = function (ctx) {
	            var stdFont, smlFont, i;
	
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	            ctx.save();
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.translate(centerX, centerY);
	
	            for (i = 0; 360 > i; i++) {
	                ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	                ctx.lineWidth = 0.5;
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.38, 0);
	                ctx.lineTo(imageWidth * 0.37, 0);
	                ctx.closePath();
	                ctx.stroke();
	
	                if (0 === i % 5) {
	                    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	                    ctx.lineWidth = 1;
	                    ctx.beginPath();
	                    ctx.moveTo(imageWidth * 0.38, 0);
	                    ctx.lineTo(imageWidth * 0.36, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                }
	
	                if (0 === i % 45) {
	                    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	                    ctx.lineWidth = 1;
	                    ctx.beginPath();
	                    ctx.moveTo(imageWidth * 0.38, 0);
	                    ctx.lineTo(imageWidth * 0.34, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                }
	
	                // Draw the labels
	                if (300 < imageWidth) {
	                    stdFont = '14px ' + stdFont;
	                    smlFont = '12px '  + stdFont;
	                }
	                if (300 >= imageWidth) {
	                    stdFont = '12px '  + stdFont;
	                    smlFont = '10px '  + stdFont;
	                }
	                if (200 >= imageWidth) {
	                    stdFont = '10px '  + stdFont;
	                    smlFont = '8px '  + stdFont;
	                }
	                if (100 >= imageWidth) {
	                    stdFont = '8px '  + stdFont;
	                    smlFont = '6px '  + stdFont;
	                }
	                ctx.save();
	                switch (i) {
	                case 0:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR) + HALF_PI);
	                    ctx.font = stdFont;
	                    ctx.fillText('0\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR) + HALF_PI);
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.41, 0);
	                    ctx.rotate((i * RAD_FACTOR) - HALF_PI);
	                    ctx.font = smlFont;
	                    ctx.fillText('0%', 0, 0, imageWidth);
	                    break;
	                case 45:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR) + 0.25 * PI);
	                    ctx.font = stdFont;
	                    ctx.fillText('45\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR) + 0.25 * PI);
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.31, imageWidth * 0.085);
	                    ctx.rotate((i * RAD_FACTOR) - 0.25 * PI);
	                    ctx.font = smlFont;
	                    ctx.fillText('100%', 0, 0, imageWidth);
	                    break;
	                case 90:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR));
	                    ctx.font = stdFont;
	                    ctx.fillText('90\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR));
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.21, 0);
	                    ctx.rotate((i * RAD_FACTOR));
	                    ctx.font = smlFont;
	                    ctx.fillText('\u221E', 0, 0, imageWidth);
	                    break;
	                case 135:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR) - 0.25 * PI);
	                    ctx.font = stdFont;
	                    ctx.fillText('45\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR) - 0.25 * PI);
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.31, -imageWidth * 0.085);
	                    ctx.rotate((i * RAD_FACTOR) + 0.25 * PI);
	                    ctx.font = smlFont;
	                    ctx.fillText('100%', 0, 0, imageWidth);
	                    break;
	                case 180:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR) - HALF_PI);
	                    ctx.font = stdFont;
	                    ctx.fillText('0\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR) - HALF_PI);
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.41, 0);
	                    ctx.rotate((i * RAD_FACTOR) + HALF_PI);
	                    ctx.font = smlFont;
	                    ctx.fillText('0%', 0, 0, imageWidth);
	                    ctx.translate(-imageWidth * 0.41, 0);
	                    break;
	                case 225:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR) - 0.75 * PI);
	                    ctx.font = stdFont;
	                    ctx.fillText('45\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR) - 0.75 * PI);
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.31, imageWidth * 0.085);
	                    ctx.rotate((i * RAD_FACTOR) + 0.75 * PI);
	                    ctx.font = smlFont;
	                    ctx.fillText('100%', 0, 0, imageWidth);
	                    break;
	                case 270:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR) - PI);
	                    ctx.font = stdFont;
	                    ctx.fillText('90\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR) - PI);
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.21, 0);
	                    ctx.rotate((i * RAD_FACTOR) - PI);
	                    ctx.font = smlFont;
	                    ctx.fillText('\u221E', 0, 0, imageWidth);
	                    break;
	                case 315:
	                    ctx.translate(imageWidth * 0.31, 0);
	                    ctx.rotate((i * RAD_FACTOR) - 1.25 * PI);
	                    ctx.font = stdFont;
	                    ctx.fillText('45\u00B0', 0, 0, imageWidth);
	                    ctx.rotate(-(i * RAD_FACTOR) - 1.25 * PI);
	                    ctx.translate(-imageWidth * 0.31, 0);
	
	                    ctx.translate(imageWidth * 0.31, -imageWidth * 0.085);
	                    ctx.rotate((i * RAD_FACTOR) + 1.25 * PI);
	                    ctx.font = smlFont;
	                    ctx.fillText('100%', 0, 0, imageWidth);
	                    break;
	                }
	                ctx.restore();
	
	                ctx.rotate(angleStep);
	            }
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var drawMarkerImage = function (ctx) {
	            ctx.save();
	
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	
	            // FRAMELEFT
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.200934, imageHeight * 0.434579);
	            ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.434579);
	            ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.560747);
	            ctx.lineTo(imageWidth * 0.200934, imageHeight * 0.560747);
	            ctx.lineWidth = 1;
	            ctx.lineCap = 'square';
	            ctx.lineJoin = 'miter';
	            ctx.stroke();
	
	            // TRIANGLELEFT
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.163551, imageHeight * 0.471962);
	            ctx.lineTo(imageWidth * 0.205607, imageHeight * 0.5);
	            ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.523364);
	            ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.471962);
	            ctx.closePath();
	            ctx.fill();
	
	            // FRAMERIGHT
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.799065, imageHeight * 0.434579);
	            ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.434579);
	            ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.560747);
	            ctx.lineTo(imageWidth * 0.799065, imageHeight * 0.560747);
	            ctx.lineWidth = 1;
	            ctx.lineCap = 'square';
	            ctx.lineJoin = 'miter';
	            ctx.stroke();
	
	            // TRIANGLERIGHT
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.836448, imageHeight * 0.471962);
	            ctx.lineTo(imageWidth * 0.794392, imageHeight * 0.5);
	            ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.523364);
	            ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.471962);
	            ctx.closePath();
	            ctx.fill();
	
	            ctx.restore();
	        };
	
	        var drawPointerImage = function (ctx) {
	            ctx.save();
	
	            // POINTER_LEVEL
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.350467);
	            ctx.lineTo(imageWidth * 0.5, imageHeight * 0.130841);
	            ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.350467);
	            ctx.bezierCurveTo(imageWidth * 0.476635, imageHeight * 0.350467, imageWidth * 0.490654, imageHeight * 0.345794, imageWidth * 0.5, imageHeight * 0.345794);
	            ctx.bezierCurveTo(imageWidth * 0.509345, imageHeight * 0.345794, imageWidth * 0.523364, imageHeight * 0.350467, imageWidth * 0.523364, imageHeight * 0.350467);
	            ctx.closePath();
	            var POINTER_LEVEL_GRADIENT = ctx.createLinearGradient(0, 0.154205 * imageHeight, 0, 0.350466 * imageHeight);
	            var tmpDarkColor = pointerColor.dark;
	            var tmpLightColor = pointerColor.light;
	            tmpDarkColor.setAlpha(0.70588);
	            tmpLightColor.setAlpha(0.70588);
	            POINTER_LEVEL_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor());
	            POINTER_LEVEL_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor());
	            POINTER_LEVEL_GRADIENT.addColorStop(0.59, tmpLightColor.getRgbaColor());
	            POINTER_LEVEL_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor());
	            ctx.fillStyle = POINTER_LEVEL_GRADIENT;
	            var strokeColor_POINTER_LEVEL = pointerColor.light.getRgbaColor();
	            ctx.lineWidth = 1;
	            ctx.lineCap = 'square';
	            ctx.lineJoin = 'miter';
	            ctx.strokeStyle = strokeColor_POINTER_LEVEL;
	            ctx.fill();
	            ctx.stroke();
	
	            tmpDarkColor.setAlpha(1);
	            tmpLightColor.setAlpha(1);
	
	            ctx.restore();
	        };
	
	        var drawStepPointerImage = function (ctx) {
	            ctx.save();
	
	            var tmpDarkColor = pointerColor.dark;
	            var tmpLightColor = pointerColor.light;
	            tmpDarkColor.setAlpha(0.70588);
	            tmpLightColor.setAlpha(0.70588);
	
	            // POINTER_LEVEL_LEFT
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.285046, imageHeight * 0.514018);
	            ctx.lineTo(imageWidth * 0.210280, imageHeight * 0.5);
	            ctx.lineTo(imageWidth * 0.285046, imageHeight * 0.481308);
	            ctx.bezierCurveTo(imageWidth * 0.285046, imageHeight * 0.481308, imageWidth * 0.280373, imageHeight * 0.490654, imageWidth * 0.280373, imageHeight * 0.495327);
	            ctx.bezierCurveTo(imageWidth * 0.280373, imageHeight * 0.504672, imageWidth * 0.285046, imageHeight * 0.514018, imageWidth * 0.285046, imageHeight * 0.514018);
	            ctx.closePath();
	            var POINTER_LEVEL_LEFT_GRADIENT = ctx.createLinearGradient(0.224299 * imageWidth, 0, 0.289719 * imageWidth, 0);
	            POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor());
	            POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor());
	            POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0.59, tmpLightColor.getRgbaColor());
	            POINTER_LEVEL_LEFT_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor());
	            ctx.fillStyle = POINTER_LEVEL_LEFT_GRADIENT;
	            var strokeColor_POINTER_LEVEL_LEFT = pointerColor.light.getRgbaColor();
	            ctx.lineWidth = 1;
	            ctx.lineCap = 'square';
	            ctx.lineJoin = 'miter';
	            ctx.strokeStyle = strokeColor_POINTER_LEVEL_LEFT;
	            ctx.fill();
	            ctx.stroke();
	
	            // POINTER_LEVEL_RIGHT
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.714953, imageHeight * 0.514018);
	            ctx.lineTo(imageWidth * 0.789719, imageHeight * 0.5);
	            ctx.lineTo(imageWidth * 0.714953, imageHeight * 0.481308);
	            ctx.bezierCurveTo(imageWidth * 0.714953, imageHeight * 0.481308, imageWidth * 0.719626, imageHeight * 0.490654, imageWidth * 0.719626, imageHeight * 0.495327);
	            ctx.bezierCurveTo(imageWidth * 0.719626, imageHeight * 0.504672, imageWidth * 0.714953, imageHeight * 0.514018, imageWidth * 0.714953, imageHeight * 0.514018);
	            ctx.closePath();
	            var POINTER_LEVEL_RIGHT_GRADIENT = ctx.createLinearGradient(0.775700 * imageWidth, 0, 0.71028 * imageWidth, 0);
	            POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor());
	            POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor());
	            POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(0.59, tmpLightColor.getRgbaColor());
	            POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor());
	            ctx.fillStyle = POINTER_LEVEL_RIGHT_GRADIENT;
	            var strokeColor_POINTER_LEVEL_RIGHT = pointerColor.light.getRgbaColor();
	            ctx.lineWidth = 1;
	            ctx.lineCap = 'square';
	            ctx.lineJoin = 'miter';
	            ctx.strokeStyle = strokeColor_POINTER_LEVEL_RIGHT;
	            ctx.fill();
	            ctx.stroke();
	
	            tmpDarkColor.setAlpha(1);
	            tmpLightColor.setAlpha(1);
	
	            ctx.restore();
	        };
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	        var init = function () {
	            initialized = true;
	
	            if (frameVisible) {
	                drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            if (backgroundVisible) {
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	                drawTickmarksImage(backgroundContext);
	            }
	
	            drawMarkerImage(pointerContext);
	
	            drawPointerImage(pointerContext);
	
	            drawStepPointerImage(stepPointerContext);
	
	            if (foregroundVisible) {
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);
	            }
	        };
	
	        var resetBuffers = function () {
	            backgroundBuffer.width = size;
	            backgroundBuffer.height = size;
	            backgroundContext = backgroundBuffer.getContext('2d');
	
	            // Buffer for pointer image painting code
	            pointerBuffer.width = size;
	            pointerBuffer.height = size;
	            pointerContext = pointerBuffer.getContext('2d');
	
	            // Buffer for step pointer image painting code
	            stepPointerBuffer.width = size;
	            stepPointerBuffer.height = size;
	            stepPointerContext = stepPointerBuffer.getContext('2d');
	
	            // Buffer for static foreground painting code
	            foregroundBuffer.width = size;
	            foregroundBuffer.height = size;
	            foregroundContext = foregroundBuffer.getContext('2d');
	        };
	
	        //************************************ Public methods **************************************
	        this.setValue = function (newValue) {
	            var targetValue;
	            newValue = parseFloat(newValue);
	            targetValue = 0 > newValue ? (360 + newValue) : newValue;
	            targetValue = 359.9 < newValue ? (newValue - 360) : newValue;
	
	            if (value !== targetValue) {
	                value = targetValue;
	                stepValue = 2 * ((Math.abs(value) * 10) % 10);
	                if (10 < stepValue) {
	                    stepValue -= 20;
	                }
	
	                if (0 === value) {
	                    visibleValue = 90;
	                }
	
	                if (0 < value && 90 >= value) {
	                    visibleValue = (90 - value);
	                }
	
	                if (90 < value && 180 >= value) {
	                    visibleValue = (value - 90);
	                }
	
	                if (180 < value && 270 >= value) {
	                    visibleValue = (270 - value);
	                }
	
	                if (270 < value && 360 >= value) {
	                    visibleValue = (value - 270);
	                }
	
	                if (0 > value && value >= -90) {
	                    visibleValue = (90 - Math.abs(value));
	                }
	
	                if (value < -90 && value >= -180) {
	                    visibleValue = Math.abs(value) - 90;
	                }
	
	                if (value < -180 && value >= -270) {
	                    visibleValue = 270 - Math.abs(value);
	                }
	
	                if (value < -270 && value >= -360) {
	                    visibleValue = Math.abs(value) - 270;
	                }
	
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            newValue = parseFloat(newValue);
	            if (360 - newValue + value < newValue - value) {
	                newValue = 360 - newValue;
	            }
	            if (value !== newValue) {
	                if (undefined !== tween && tween.isPlaying) {
	                    tween.stop();
	                }
	
	                //tween = new Tween(new Object(),'',Tween.elasticEaseOut,this.value,targetValue, 1);
	                tween = new Tween({}, '', Tween.regularEaseInOut, value, newValue, 1);
	                //tween = new Tween(new Object(), '', Tween.strongEaseInOut, this.value, targetValue, 1);
	
	                var gauge = this;
	
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos;
	                    stepValue = 2 * ((Math.abs(value) * 10) % 10);
	                    if (10 < stepValue) {
	                        stepValue -= 20;
	                    }
	
	                    if (0 === value) {
	                        visibleValue = 90;
	                    }
	
	                    if (0 < value && 90 >= value) {
	                        visibleValue = (90 - value);
	                    }
	
	                    if (90 < value && 180 >= value) {
	                        visibleValue = (value - 90);
	                    }
	
	                    if (180 < value && 270 >= value) {
	                        visibleValue = (270 - value);
	                    }
	
	                    if (270 < value && 360 >= value) {
	                        visibleValue = (value - 270);
	                    }
	
	                    if (0 > value && value >= -90) {
	                        visibleValue = (90 - Math.abs(value));
	                    }
	
	                    if (value < -90 && value >= -180) {
	                        visibleValue = Math.abs(value) - 90;
	                    }
	
	                    if (value < -180 && value >= -270) {
	                        visibleValue = 270 - Math.abs(value);
	                    }
	
	                    if (value < -270 && value >= -360) {
	                        visibleValue = Math.abs(value) - 270;
	                    }
	
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers();
	            frameDesign = newFrameDesign;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers();
	            backgroundColor = newBackgroundColor;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers();
	            foregroundType = newForegroundType;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColor = function (newPointerColor) {
	            resetBuffers();
	            pointerColor = newPointerColor;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            angle = HALF_PI + value * angleStep - HALF_PI;
	            if (rotateFace) {
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(-angle);
	                mainCtx.translate(-centerX, -centerY);
	            }
	            // Draw buffered image to visible canvas
	            if (frameVisible || backgroundVisible) {
	                mainCtx.drawImage(backgroundBuffer, 0, 0);
	            }
	
	            mainCtx.save();
	            // Define rotation center
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(angle);
	
	            // Draw pointer
	            mainCtx.translate(-centerX, -centerY);
	            mainCtx.drawImage(pointerBuffer, 0, 0);
	
	            mainCtx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	            mainCtx.textAlign = 'center';
	            mainCtx.textBaseline = 'middle';
	
	            if (textOrientationFixed) {
	                mainCtx.restore();
	                if (decimalsVisible) {
	                    mainCtx.font = imageWidth * 0.1 + 'px ' + stdFontName;
	                } else {
	                    mainCtx.font = imageWidth * 0.15 + 'px ' + stdFontName;
	                }
	                mainCtx.fillText(visibleValue.toFixed(decimals) + '\u00B0', centerX, centerY, imageWidth * 0.35);
	            } else {
	                if (decimalsVisible) {
	                    mainCtx.font = imageWidth * 0.15 + 'px ' + stdFontName;
	                } else {
	                    mainCtx.font = imageWidth * 0.2 + 'px ' + stdFontName;
	                }
	                mainCtx.fillText(visibleValue.toFixed(decimals) + '\u00B0', centerX, centerY, imageWidth * 0.35);
	                mainCtx.restore();
	            }
	
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(angle + stepValue * RAD_FACTOR);
	            mainCtx.translate(-centerX, -centerY);
	            mainCtx.drawImage(stepPointerBuffer, 0, 0);
	            mainCtx.restore();
	
	            // Draw foreground
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            mainCtx.restore();
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var compass = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            pointerType = (undefined === parameters.pointerType ? steelseries.PointerType.TYPE2 : parameters.pointerType),
	            pointerColor = (undefined === parameters.pointerColor ? steelseries.ColorDef.RED : parameters.pointerColor),
	            knobType = (undefined === parameters.knobType ? steelseries.KnobType.STANDARD_KNOB : parameters.knobType),
	            knobStyle = (undefined === parameters.knobStyle ? steelseries.KnobStyle.SILVER : parameters.knobStyle),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            pointSymbols = (undefined === parameters.pointSymbols ? ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'] : parameters.pointSymbols),
	            pointSymbolsVisible = (undefined === parameters.pointSymbolsVisible ? true : parameters.pointSymbolsVisible),
	            customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),
	            degreeScale = (undefined === parameters.degreeScale ? false : parameters.degreeScale),
	            roseVisible = (undefined === parameters.roseVisible ? true : parameters.roseVisible),
	            rotateFace = (undefined === parameters.rotateFace ? false : parameters.rotateFace);
	
	        var tween;
	        var repainting = false;
	        var value = 0;
	        var angleStep = RAD_FACTOR;
	        var angle = this.value;
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight / 2;
	
	        var shadowOffset = imageWidth * 0.006;
	
	        var initialized = false;
	
	        // **************   Buffer creation  ********************
	        // Buffer for all static background painting code
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        // Buffer for symbol/rose painting code
	        var roseBuffer = createBuffer(size, size);
	        var roseContext = roseBuffer.getContext('2d');
	
	        // Buffer for pointer image painting code
	        var pointerBuffer = createBuffer(size, size);
	        var pointerContext = pointerBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // **************   Image creation  ********************
	        var drawTickmarksImage = function (ctx) {
	            var val;
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	
	            var stdFont, smlFont, i;
	
	            ctx.save();
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.translate(centerX, centerY);
	
	            if (!degreeScale) {
	
	                stdFont = 0.12 * imageWidth + 'px serif';
	                smlFont = 0.06 * imageWidth + 'px serif';
	
	                for (i = 0; 360 > i; i += 2.5) {
	
	                    if (0 === i % 5) {
	                        ctx.lineWidth = 1;
	                        ctx.beginPath();
	                        ctx.moveTo(imageWidth * 0.38, 0);
	                        ctx.lineTo(imageWidth * 0.36, 0);
	                        ctx.closePath();
	                        ctx.stroke();
	                    }
	
	                    // Draw the labels
	                    ctx.save();
	                    switch (i) {
	                    case 0:
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[2], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 45:
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[3], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    case 90:
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[4], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 135:
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[5], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    case 180:
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[6], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 225:
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[7], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    case 270:
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[0], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 315:
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[1], 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    }
	                    ctx.restore();
	
	                    if (roseVisible && (0 === i || 22.5 === i || 45 === i || 67.5 === i || 90 === i || 112.5 === i || 135 === i || 157.5 === i || 180 === i || 202.5 === i || 225 === i || 247.5 === i || 270 === i || 292.5 === i || 315 === i || 337.5 === i || 360 === i)) {
	                        // ROSE_LINE
	                        ctx.save();
	                        ctx.beginPath();
	                        // indent the 16 half quadrant lines a bit for visual effect
	                        if (i % 45) {
	                            ctx.moveTo(imageWidth * 0.29, 0);
	                        } else {
	                            ctx.moveTo(imageWidth * 0.38, 0);
	                        }
	                        ctx.lineTo(imageWidth * 0.1, 0);
	                        ctx.closePath();
	                        ctx.restore();
	                        ctx.lineWidth = 1;
	                        ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();
	                        ctx.stroke();
	                    }
	                    ctx.rotate(angleStep * 2.5);
	                }
	            } else {
	                stdFont = 0.08 * imageWidth + 'px serif';
	                smlFont = imageWidth * 0.033 + 'px serif';
	
	                ctx.rotate(angleStep * 10);
	
	                for (i = 10; 360 >= i; i += 10) {
	                    // Draw the labels
	                    ctx.save();
	                    if (pointSymbolsVisible) {
	                        switch (i) {
	                        case 360:
	                            ctx.translate(imageWidth * 0.35, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[2], 0, 0, imageWidth);
	                            ctx.translate(-imageWidth * 0.35, 0);
	                            break;
	                        case 90:
	                            ctx.translate(imageWidth * 0.35, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[4], 0, 0, imageWidth);
	                            ctx.translate(-imageWidth * 0.35, 0);
	                            break;
	                        case 180:
	                            ctx.translate(imageWidth * 0.35, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[6], 0, 0, imageWidth);
	                            ctx.translate(-imageWidth * 0.35, 0);
	                            break;
	                        case 270:
	                            ctx.translate(imageWidth * 0.35, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[0], 0, 0, imageWidth);
	                            ctx.translate(-imageWidth * 0.35, 0);
	                            break;
	                        default:
	                            val = (i + 90) % 360;
	                            ctx.translate(imageWidth * 0.37, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = smlFont;
	                            ctx.fillText(('0'.substring(val >= 100) + val), 0, 0, imageWidth);
	                            ctx.translate(-imageWidth * 0.37, 0);
	                        }
	                    } else {
	                        val = (i + 90) % 360;
	                        ctx.translate(imageWidth * 0.37, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(('0'.substring(val >= 100) + val), 0, 0, imageWidth);
	                        ctx.translate(-imageWidth * 0.37, 0);
	                    }
	                    ctx.restore();
	                    ctx.rotate(angleStep * 10);
	                }
	
	            }
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var drawPointerImage = function (ctx) {
	            ctx.save();
	
	            switch (pointerType.type) {
	            case 'type2':
	                // NORTHPOINTER
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.532710, imageHeight * 0.453271);
	                ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.453271, imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.5, imageHeight * 0.149532);
	                ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.467289, imageHeight * 0.453271, imageWidth * 0.467289, imageHeight * 0.453271);
	                ctx.bezierCurveTo(imageWidth * 0.453271, imageHeight * 0.462616, imageWidth * 0.443925, imageHeight * 0.481308, imageWidth * 0.443925, imageHeight * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.443925, imageHeight * 0.5, imageWidth * 0.556074, imageHeight * 0.5, imageWidth * 0.556074, imageHeight * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.481308, imageWidth * 0.546728, imageHeight * 0.462616, imageWidth * 0.532710, imageHeight * 0.453271);
	                ctx.closePath();
	                var NORTHPOINTER2_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);
	                NORTHPOINTER2_GRADIENT.addColorStop(0, pointerColor.light.getRgbaColor());
	                NORTHPOINTER2_GRADIENT.addColorStop(0.46, pointerColor.light.getRgbaColor());
	                NORTHPOINTER2_GRADIENT.addColorStop(0.47, pointerColor.medium.getRgbaColor());
	                NORTHPOINTER2_GRADIENT.addColorStop(1, pointerColor.medium.getRgbaColor());
	                ctx.fillStyle = NORTHPOINTER2_GRADIENT;
	                ctx.strokeStyle = pointerColor.dark.getRgbaColor();
	                ctx.lineWidth = 1;
	                ctx.lineCap = 'square';
	                ctx.lineJoin = 'miter';
	                ctx.fill();
	                ctx.stroke();
	
	                // SOUTHPOINTER
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.467289, imageHeight * 0.546728);
	                ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.546728, imageWidth * 0.5, imageHeight * 0.850467, imageWidth * 0.5, imageHeight * 0.850467);
	                ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.850467, imageWidth * 0.532710, imageHeight * 0.546728, imageWidth * 0.532710, imageHeight * 0.546728);
	                ctx.bezierCurveTo(imageWidth * 0.546728, imageHeight * 0.537383, imageWidth * 0.556074, imageHeight * 0.518691, imageWidth * 0.556074, imageHeight * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.5, imageWidth * 0.443925, imageHeight * 0.5, imageWidth * 0.443925, imageHeight * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.443925, imageHeight * 0.518691, imageWidth * 0.453271, imageHeight * 0.537383, imageWidth * 0.467289, imageHeight * 0.546728);
	                ctx.closePath();
	                var SOUTHPOINTER2_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);
	                SOUTHPOINTER2_GRADIENT.addColorStop(0, '#e3e5e8');
	                SOUTHPOINTER2_GRADIENT.addColorStop(0.48, '#e3e5e8');
	                SOUTHPOINTER2_GRADIENT.addColorStop(0.48, '#abb1b8');
	                SOUTHPOINTER2_GRADIENT.addColorStop(1, '#abb1b8');
	                ctx.fillStyle = SOUTHPOINTER2_GRADIENT;
	                var strokeColor_SOUTHPOINTER2 = '#abb1b8';
	                ctx.strokeStyle = strokeColor_SOUTHPOINTER2;
	                ctx.lineWidth = 1;
	                ctx.lineCap = 'square';
	                ctx.lineJoin = 'miter';
	                ctx.fill();
	                ctx.stroke();
	                break;
	
	            case 'type3':
	                // NORTHPOINTER
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.5, imageHeight * 0.149532);
	                ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.443925, imageHeight * 0.490654, imageWidth * 0.443925, imageHeight * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.443925, imageHeight * 0.532710, imageWidth * 0.467289, imageHeight * 0.556074, imageWidth * 0.5, imageHeight * 0.556074);
	                ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.556074, imageWidth * 0.556074, imageHeight * 0.532710, imageWidth * 0.556074, imageHeight * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.490654, imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.5, imageHeight * 0.149532);
	                ctx.closePath();
	                var NORTHPOINTER3_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);
	                NORTHPOINTER3_GRADIENT.addColorStop(0, pointerColor.light.getRgbaColor());
	                NORTHPOINTER3_GRADIENT.addColorStop(0.46, pointerColor.light.getRgbaColor());
	                NORTHPOINTER3_GRADIENT.addColorStop(0.47, pointerColor.medium.getRgbaColor());
	                NORTHPOINTER3_GRADIENT.addColorStop(1, pointerColor.medium.getRgbaColor());
	                ctx.fillStyle = NORTHPOINTER3_GRADIENT;
	                ctx.strokeStyle = pointerColor.dark.getRgbaColor();
	                ctx.lineWidth = 1;
	                ctx.lineCap = 'square';
	                ctx.lineJoin = 'miter';
	                ctx.fill();
	                ctx.stroke();
	                break;
	
	            case 'type1:':
	            /* falls through */
	            default:
	                // NORTHPOINTER
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.5, imageHeight * 0.495327);
	                ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.495327);
	                ctx.lineTo(imageWidth * 0.5, imageHeight * 0.149532);
	                ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.495327);
	                ctx.lineTo(imageWidth * 0.5, imageHeight * 0.495327);
	                ctx.closePath();
	                var NORTHPOINTER1_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);
	                NORTHPOINTER1_GRADIENT.addColorStop(0, pointerColor.light.getRgbaColor());
	                NORTHPOINTER1_GRADIENT.addColorStop(0.46, pointerColor.light.getRgbaColor());
	                NORTHPOINTER1_GRADIENT.addColorStop(0.47, pointerColor.medium.getRgbaColor());
	                NORTHPOINTER1_GRADIENT.addColorStop(1, pointerColor.medium.getRgbaColor());
	                ctx.fillStyle = NORTHPOINTER1_GRADIENT;
	                ctx.strokeStyle = pointerColor.dark.getRgbaColor();
	                ctx.lineWidth = 1;
	                ctx.lineCap = 'square';
	                ctx.lineJoin = 'miter';
	                ctx.fill();
	                ctx.stroke();
	
	                // SOUTHPOINTER
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.5, imageHeight * 0.504672);
	                ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.504672);
	                ctx.lineTo(imageWidth * 0.5, imageHeight * 0.850467);
	                ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.504672);
	                ctx.lineTo(imageWidth * 0.5, imageHeight * 0.504672);
	                ctx.closePath();
	                var SOUTHPOINTER1_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);
	                SOUTHPOINTER1_GRADIENT.addColorStop(0, '#e3e5e8');
	                SOUTHPOINTER1_GRADIENT.addColorStop(0.48, '#e3e5e8');
	                SOUTHPOINTER1_GRADIENT.addColorStop(0.480099, '#abb1b8');
	                SOUTHPOINTER1_GRADIENT.addColorStop(1, '#abb1b8');
	                ctx.fillStyle = SOUTHPOINTER1_GRADIENT;
	                var strokeColor_SOUTHPOINTER = '#abb1b8';
	                ctx.strokeStyle = strokeColor_SOUTHPOINTER;
	                ctx.lineWidth = 1;
	                ctx.lineCap = 'square';
	                ctx.lineJoin = 'miter';
	                ctx.fill();
	                ctx.stroke();
	                break;
	            }
	            ctx.restore();
	        };
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	        var init = function () {
	            initialized = true;
	
	            if (frameVisible) {
	                drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            if (backgroundVisible) {
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	                drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);
	
	                if (roseVisible) {
	                    drawRoseImage(roseContext, centerX, centerY, imageWidth, imageHeight, backgroundColor);
	                }
	
	                drawTickmarksImage(roseContext);
	            }
	
	            drawPointerImage(pointerContext, false);
	
	            if (foregroundVisible) {
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, true, knobType, knobStyle);
	            }
	        };
	
	        var resetBuffers = function () {
	            // Buffer for all static background painting code
	            backgroundBuffer.width = size;
	            backgroundBuffer.height = size;
	            backgroundContext = backgroundBuffer.getContext('2d');
	
	            // Buffer for symbols/rose painting code
	            roseBuffer.width = size;
	            roseBuffer.height = size;
	            roseContext = roseBuffer.getContext('2d');
	
	            // Buffer for pointer image painting code
	            pointerBuffer.width = size;
	            pointerBuffer.height = size;
	            pointerContext = pointerBuffer.getContext('2d');
	
	            // Buffer for static foreground painting code
	            foregroundBuffer.width = size;
	            foregroundBuffer.height = size;
	            foregroundContext = foregroundBuffer.getContext('2d');
	        };
	
	        //************************************ Public methods **************************************
	        this.setValue = function (newValue) {
	            newValue = parseFloat(newValue) % 360;
	            if (value !== newValue) {
	                value = newValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            var targetValue = newValue % 360;
	            var gauge = this;
	            var diff;
	            if (value !== targetValue) {
	                if (undefined !==  tween && tween.isPlaying) {
	                    tween.stop();
	                }
	
	                diff = getShortestAngle(value, targetValue);
	                if (rotateFace) {
	                    tween = new Tween({}, '', Tween.regularEaseInOut, value, value + diff, 2);
	                } else {
	                    tween = new Tween({}, '', Tween.elasticEaseOut, value, value + diff, 2);
	                }
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos % 360;
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers();
	            frameDesign = newFrameDesign;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers();
	            backgroundColor = newBackgroundColor;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers();
	            foregroundType = newForegroundType;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColor = function (newPointerColor) {
	            resetBuffers();
	            pointerColor = newPointerColor;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerType = function (newPointerType) {
	            resetBuffers();
	            pointerType = newPointerType;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setPointSymbols = function (newPointSymbols) {
	            resetBuffers();
	            pointSymbols = newPointSymbols;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	            // Define rotation center
	            angle = HALF_PI + value * angleStep - HALF_PI;
	
	            if (backgroundVisible || frameVisible) {
	                mainCtx.drawImage(backgroundBuffer, 0, 0);
	            }
	
	            if (rotateFace) {
	                mainCtx.save();
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(-angle);
	                mainCtx.translate(-centerX, -centerY);
	                if (backgroundVisible) {
	                    mainCtx.drawImage(roseBuffer, 0, 0);
	                }
	                mainCtx.restore();
	            } else {
	                if (backgroundVisible) {
	                    mainCtx.drawImage(roseBuffer, 0, 0);
	                }
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(angle);
	                mainCtx.translate(-centerX, -centerY);
	            }
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	            mainCtx.shadowBlur = shadowOffset * 2;
	            // Draw the pointer
	            mainCtx.drawImage(pointerBuffer, 0, 0);
	            // Undo the translations & shadow settings
	            mainCtx.restore();
	
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var windDirection = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            pointerTypeLatest = (undefined === parameters.pointerTypeLatest ? steelseries.PointerType.TYPE1 : parameters.pointerTypeLatest),
	            pointerTypeAverage = (undefined === parameters.pointerTypeAverage ? steelseries.PointerType.TYPE8 : parameters.pointerTypeAverage),
	            pointerColor = (undefined === parameters.pointerColor ? steelseries.ColorDef.RED : parameters.pointerColor),
	            pointerColorAverage = (undefined === parameters.pointerColorAverage ? steelseries.ColorDef.BLUE : parameters.pointerColorAverage),
	            knobType = (undefined === parameters.knobType ? steelseries.KnobType.STANDARD_KNOB : parameters.knobType),
	            knobStyle = (undefined === parameters.knobStyle ? steelseries.KnobStyle.SILVER : parameters.knobStyle),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            pointSymbols = (undefined === parameters.pointSymbols ? ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'] : parameters.pointSymbols),
	            pointSymbolsVisible = (undefined === parameters.pointSymbolsVisible ? true : parameters.pointSymbolsVisible),
	            customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),
	            degreeScale = (undefined === parameters.degreeScale ? true : parameters.degreeScale),
	            degreeScaleHalf = (undefined === parameters.degreeScaleHalf ? false : parameters.degreeScaleHalf),
	            roseVisible = (undefined === parameters.roseVisible ? false : parameters.roseVisible),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.STANDARD : parameters.lcdColor),
	            lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            section = (undefined === parameters.section ? null : parameters.section),
	            area = (undefined === parameters.area ? null : parameters.area),
	            lcdTitleStrings = (undefined === parameters.lcdTitleStrings ? ['Latest', 'Average'] : parameters.lcdTitleStrings),
	            titleString = (undefined === parameters.titleString ? '' : parameters.titleString),
	            useColorLabels = (undefined === parameters.useColorLabels ? false : parameters.useColorLabels),
	            fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);
	
	        var tweenLatest;
	        var tweenAverage;
	        var valueLatest = 0;
	        var valueAverage = 0;
	        var angleStep = RAD_FACTOR;
	        var angleLatest = this.valueLatest;
	        var angleAverage = this.valueAverage;
	        var rotationOffset = -HALF_PI;
	        var angleRange = TWO_PI;
	        var range = 360;
	        var repainting = false;
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight / 2;
	
	        var lcdFontHeight = Math.floor(imageWidth / 10);
	        var stdFont = lcdFontHeight + 'px ' + stdFontName;
	        var lcdFont = lcdFontHeight + 'px ' + lcdFontName;
	        var lcdWidth = imageWidth * 0.3;
	        var lcdHeight = imageHeight * 0.12;
	        var lcdPosX = (imageWidth - lcdWidth) / 2;
	        var lcdPosY1 = imageHeight * 0.32;
	        var lcdPosY2 = imageHeight * 0.565;
	
	        var initialized = false;
	
	        // **************   Buffer creation  ********************
	        // Buffer for all static background painting code
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        // Buffer for LCD displays
	        var lcdBuffer;
	
	        // Buffer for latest pointer images painting code
	        var pointerBufferLatest = createBuffer(size, size);
	        var pointerContextLatest = pointerBufferLatest.getContext('2d');
	
	        // Buffer for average pointer image
	        var pointerBufferAverage = createBuffer(size, size);
	        var pointerContextAverage = pointerBufferAverage.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // **************   Image creation  ********************
	        var drawLcdText = function (value, bLatest) {
	            mainCtx.save();
	            mainCtx.textAlign = 'center';
	            mainCtx.strokeStyle = lcdColor.textColor;
	            mainCtx.fillStyle = lcdColor.textColor;
	
	            //convert value from -180,180 range into 0-360 range
	            while (value < -180) {
	                value += 360;
	            }
	            if (!degreeScaleHalf && value < 0) {
	                value += 360;
	            }
	
	            if (degreeScaleHalf && value > 180) {
	                value = -(360 - value);
	            }
	
	            if (value >= 0) {
	                value = '00' + Math.round(value);
	                value = value.substring(value.length, value.length - 3);
	            } else {
	                value = '00' + Math.abs(Math.round(value));
	                value = '-' + value.substring(value.length, value.length - 3);
	            }
	
	            if (lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) {
	                mainCtx.shadowColor = 'gray';
	                mainCtx.shadowOffsetX = imageWidth * 0.007;
	                mainCtx.shadowOffsetY = imageWidth * 0.007;
	                mainCtx.shadowBlur = imageWidth * 0.007;
	            }
	            mainCtx.font = (digitalFont ? lcdFont : stdFont);
	            mainCtx.fillText(value + '\u00B0', imageWidth / 2 + lcdWidth * 0.05, (bLatest ? lcdPosY1 : lcdPosY2) + lcdHeight * 0.5 + lcdFontHeight * 0.38, lcdWidth * 0.9);
	
	            mainCtx.restore();
	        };
	
	        var drawAreaSectionImage = function (ctx, start, stop, color, filled) {
	
	            ctx.save();
	            ctx.strokeStyle = color;
	            ctx.fillStyle = color;
	            ctx.lineWidth = imageWidth * 0.035;
	            var startAngle = (angleRange / range * start);
	            var stopAngle = startAngle + (stop - start) / (range / angleRange);
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset);
	            ctx.beginPath();
	            if (filled) {
	                ctx.moveTo(0, 0);
	                ctx.arc(0, 0, imageWidth * 0.365 - ctx.lineWidth / 2, startAngle, stopAngle, false);
	            } else {
	                ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false);
	            }
	            if (filled) {
	                ctx.moveTo(0, 0);
	                ctx.fill();
	            } else {
	                ctx.stroke();
	            }
	
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var drawTickmarksImage = function (ctx) {
	            var OUTER_POINT = imageWidth * 0.38,
	                MAJOR_INNER_POINT = imageWidth * 0.35,
	                //MED_INNER_POINT = imageWidth * 0.355,
	                MINOR_INNER_POINT = imageWidth * 0.36,
	                TEXT_WIDTH = imageWidth * 0.1,
	                TEXT_TRANSLATE_X = imageWidth * 0.31,
	                CARDINAL_TRANSLATE_X = imageWidth * 0.36,
	                stdFont, smlFont,
	                i, val, to;
	
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	
	            ctx.save();
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.translate(centerX, centerY);
	
	            if (!degreeScale) {
	
	                stdFont = 0.12 * imageWidth + 'px serif';
	                smlFont = 0.06 * imageWidth + 'px serif';
	
	                //var angleStep = RAD_FACTOR;
	                ctx.lineWidth = 1;
	                ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();
	
	                for (i = 0; 360 > i; i += 2.5) {
	
	                    if (0 === i % 5) {
	                        ctx.beginPath();
	                        ctx.moveTo(imageWidth * 0.38, 0);
	                        ctx.lineTo(imageWidth * 0.36, 0);
	                        ctx.closePath();
	                        ctx.stroke();
	                    }
	
	                    // Draw the labels
	                    ctx.save();
	                    switch (i) {
	                    case 0: //E
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[2], 0, 0);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 45: //SE
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[3], 0, 0);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    case 90: //S
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[4], 0, 0);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 135: //SW
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[5], 0, 0);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    case 180: //W
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[6], 0, 0);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 225: //NW
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[7], 0, 0);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    case 270: //N
	                        ctx.translate(imageWidth * 0.35, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = stdFont;
	                        ctx.fillText(pointSymbols[0], 0, 0);
	                        ctx.translate(-imageWidth * 0.35, 0);
	                        break;
	                    case 315: //NE
	                        ctx.translate(imageWidth * 0.29, 0);
	                        ctx.rotate(HALF_PI);
	                        ctx.font = smlFont;
	                        ctx.fillText(pointSymbols[1], 0, 0);
	                        ctx.translate(-imageWidth * 0.29, 0);
	                        break;
	                    }
	                    ctx.restore();
	
	                    if (roseVisible && (0 === i || 22.5 === i || 45 === i || 67.5 === i || 90 === i || 112.5 === i || 135 === i || 157.5 === i || 180 === i || 202.5 === i || 225 === i || 247.5 === i || 270 === i || 292.5 === i || 315 === i || 337.5 === i || 360 === i)) {
	                        // ROSE_LINE
	                        ctx.save();
	                        ctx.beginPath();
	                        // indent the 16 half quadrant lines a bit for visual effect
	                        if (i % 45) {
	                            ctx.moveTo(imageWidth * 0.29, 0);
	                        } else {
	                            ctx.moveTo(imageWidth * 0.38, 0);
	                        }
	                        ctx.lineTo(imageWidth * 0.1, 0);
	                        ctx.closePath();
	                        ctx.restore();
	                        ctx.stroke();
	                    }
	                    ctx.rotate(angleStep * 2.5);
	                }
	            } else {
	                stdFont = Math.floor(0.1 * imageWidth) + 'px serif bold';
	                smlFont = Math.floor(imageWidth * 0.04) + 'px ' + stdFontName;
	
	                ctx.rotate(angleStep * 5);
	                for (i = 5; 360 >= i; i += 5) {
	                    // Draw the labels
	                    ctx.save();
	                    if (pointSymbolsVisible) {
	
	                        switch (i) {
	                        case 360:
	                            ctx.translate(CARDINAL_TRANSLATE_X, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[2], 0, 0, TEXT_WIDTH);
	                            ctx.translate(-CARDINAL_TRANSLATE_X, 0);
	                            break;
	                        case 90:
	                            ctx.translate(CARDINAL_TRANSLATE_X, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[4], 0, 0, TEXT_WIDTH);
	                            ctx.translate(-CARDINAL_TRANSLATE_X, 0);
	                            break;
	                        case 180:
	                            ctx.translate(CARDINAL_TRANSLATE_X, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[6], 0, 0, TEXT_WIDTH);
	                            ctx.translate(-CARDINAL_TRANSLATE_X, 0);
	                            break;
	                        case 270:
	                            ctx.translate(CARDINAL_TRANSLATE_X, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = stdFont;
	                            ctx.fillText(pointSymbols[0], 0, 0, TEXT_WIDTH);
	                            ctx.translate(-CARDINAL_TRANSLATE_X, 0);
	                            break;
	
	                        case 5:
	                        case 85:
	                        case 95:
	                        case 175:
	                        case 185:
	                        case 265:
	                        case 275:
	                        case 355:
	                            //leave room for ordinal labels
	                            break;
	
	                        default:
	                            if ((i + 90) % 20) {
	                                ctx.lineWidth = ((i + 90) % 5) ? 1.5 : 1;
	                                ctx.beginPath();
	                                ctx.moveTo(OUTER_POINT, 0);
	                                to = (i + 90) % 10 ? MINOR_INNER_POINT : MAJOR_INNER_POINT;
	                                ctx.lineTo(to, 0);
	                                ctx.closePath();
	                                ctx.stroke();
	                            } else {
	                                ctx.lineWidth = 1.5;
	                                ctx.beginPath();
	                                ctx.moveTo(OUTER_POINT, 0);
	                                ctx.lineTo(MAJOR_INNER_POINT, 0);
	                                ctx.closePath();
	                                ctx.stroke();
	                                val = (i + 90) % 360;
	                                ctx.translate(TEXT_TRANSLATE_X, 0);
	                                ctx.rotate(HALF_PI);
	                                ctx.font = smlFont;
	                                ctx.fillText(('0'.substring(val >= 100) + val), 0, 0, TEXT_WIDTH);
	                                ctx.translate(-TEXT_TRANSLATE_X, 0);
	                            }
	                        }
	                    } else {
	
	                        if ((i + 90) % 20) {
	                            ctx.lineWidth = ((i + 90) % 5) ? 1.5 : 1;
	                            ctx.beginPath();
	                            ctx.moveTo(OUTER_POINT, 0);
	                            to = (i + 90) % 10 ? MINOR_INNER_POINT : MAJOR_INNER_POINT;
	                            ctx.lineTo(to, 0);
	                            ctx.closePath();
	                            ctx.stroke();
	                        } else {
	                            ctx.lineWidth = 1.5;
	                            ctx.beginPath();
	                            ctx.moveTo(OUTER_POINT, 0);
	                            ctx.lineTo(MAJOR_INNER_POINT, 0);
	                            ctx.closePath();
	                            ctx.stroke();
	                            val = (i + 90) % 360;
	                            if (degreeScaleHalf) {
	                                //invert 180-360
	                                if (val > 180) {
	                                    val = -(360 - val);
	                                }
	                            }
	                            ctx.translate(TEXT_TRANSLATE_X, 0);
	                            ctx.rotate(HALF_PI);
	                            ctx.font = smlFont;
	                            ctx.fillText(val, 0, 0, TEXT_WIDTH);
	                            ctx.translate(-TEXT_TRANSLATE_X, 0);
	                        }
	                    }
	                    ctx.restore();
	                    ctx.rotate(angleStep * 5);
	                }
	
	            }
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var drawLcdTitles = function (ctx) {
	            if (lcdTitleStrings.length > 0) {
	                ctx.save();
	                ctx.textAlign = 'center';
	                ctx.textBaseline = 'middle';
	                ctx.fillStyle = (useColorLabels ? pointerColor.medium.getRgbaColor() : backgroundColor.labelColor.getRgbaColor());
	                ctx.font = 0.040 * imageWidth + 'px ' + stdFontName;
	                ctx.fillText(lcdTitleStrings[0], imageWidth / 2, imageHeight * 0.29, imageWidth * 0.3);
	                ctx.fillStyle = (useColorLabels ? pointerColorAverage.medium.getRgbaColor() : backgroundColor.labelColor.getRgbaColor());
	                ctx.fillText(lcdTitleStrings[1], imageWidth / 2, imageHeight * 0.71, imageWidth * 0.3);
	                if (titleString.length > 0) {
	                    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	                    ctx.font = 0.0467 * imageWidth + 'px ' + stdFontName;
	                    ctx.fillText(titleString, imageWidth / 2, imageHeight * 0.5, imageWidth * 0.3);
	                }
	            }
	        };
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	
	        var init = function (parameters) {
	            parameters = parameters || {};
	            var drawBackground = (undefined === parameters.background ? false : parameters.background);
	            var drawPointer = (undefined === parameters.pointer ? false : parameters.pointer);
	            var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	
	            initialized = true;
	
	            if (drawBackground && frameVisible) {
	                drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            if (drawBackground && backgroundVisible) {
	                // Create background in background buffer (backgroundBuffer)
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	
	                // Create custom layer in background buffer (backgroundBuffer)
	                drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);
	
	                // Create section in background buffer (backgroundBuffer)
	                if (null !== section && 0 < section.length) {
	                    var sectionIndex = section.length;
	                    do {
	                        sectionIndex--;
	                        drawAreaSectionImage(backgroundContext, section[sectionIndex].start, section[sectionIndex].stop, section[sectionIndex].color, false);
	                    }
	                    while (0 < sectionIndex);
	                }
	
	                // Create area in background buffer (backgroundBuffer)
	                if (null !== area && 0 < area.length) {
	                    var areaIndex = area.length;
	                    do {
	                        areaIndex--;
	                        drawAreaSectionImage(backgroundContext, area[areaIndex].start, area[areaIndex].stop, area[areaIndex].color, true);
	                    }
	                    while (0 < areaIndex);
	                }
	
	                drawTickmarksImage(backgroundContext);
	            }
	
	            if (drawBackground && roseVisible) {
	                drawRoseImage(backgroundContext, centerX, centerY, imageWidth, imageHeight, backgroundColor);
	            }
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            if (drawBackground && lcdVisible) {
	                lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor);
	                backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY1);
	                backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY2);
	                // Create title in background buffer (backgroundBuffer)
	                drawLcdTitles(backgroundContext);
	            }
	
	            if (drawPointer) {
	                drawPointerImage(pointerContextAverage, imageWidth, pointerTypeAverage, pointerColorAverage, backgroundColor.labelColor);
	                drawPointerImage(pointerContextLatest, imageWidth, pointerTypeLatest, pointerColor, backgroundColor.labelColor);
	            }
	
	            if (drawForeground && foregroundVisible) {
	                var knobVisible = (pointerTypeLatest.type === 'type15' || pointerTypeLatest.type === 'type16' ? false : true);
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, knobVisible, knobType, knobStyle);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetBackground = (undefined === buffers.background ? false : buffers.background);
	            var resetPointer = (undefined === buffers.pointer ? false : buffers.pointer);
	            var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            // Buffer for all static background painting code
	            if (resetBackground) {
	                backgroundBuffer.width = size;
	                backgroundBuffer.height = size;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	            // Buffers for pointer image painting code
	            if (resetPointer) {
	                pointerBufferLatest.width = size;
	                pointerBufferLatest.height = size;
	                pointerContextLatest = pointerBufferLatest.getContext('2d');
	
	                pointerBufferAverage.width = size;
	                pointerBufferAverage.height = size;
	                pointerContextAverage = pointerBufferAverage.getContext('2d');
	            }
	            // Buffer for static foreground painting code
	            if (resetForeground) {
	                foregroundBuffer.width = size;
	                foregroundBuffer.height = size;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        //************************************ Public methods **************************************
	        this.setValueLatest = function (newValue) {
	            // Actually need to handle 0-360 rather than 0-359
	            // 1-360 are used for directions
	            // 0 is used as a special case to indicate 'calm'
	            newValue = parseFloat(newValue);
	            newValue = newValue === 360 ? 360 : newValue % 360;
	            if (valueLatest !== newValue) {
	                valueLatest = newValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValueLatest = function () {
	            return valueLatest;
	        };
	
	        this.setValueAverage = function (newValue) {
	            // Actually need to handle 0-360 rather than 0-359
	            // 1-360 are used for directions
	            // 0 is used as a special case to indicate 'calm'
	            newValue = parseFloat(newValue);
	            newValue = newValue === 360 ? 360 : newValue % 360;
	            if (valueAverage !== newValue) {
	                valueAverage = newValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValueAverage = function () {
	            return valueAverage;
	        };
	
	        this.setValueAnimatedLatest = function (newValue, callback) {
	            var targetValue,
	                gauge = this,
	                diff,
	                time;
	            // Actually need to handle 0-360 rather than 0-359
	            // 1-360 are used for directions
	            // 0 is used as a special case to indicate 'calm'
	            newValue = parseFloat(newValue);
	            targetValue = (newValue === 360 ? 360 : newValue % 360);
	
	            if (valueLatest !== targetValue) {
	                if (undefined !== tweenLatest && tweenLatest.isPlaying) {
	                    tweenLatest.stop();
	                }
	
	                diff = getShortestAngle(valueLatest, targetValue);
	
	                if (diff !== 0) { // 360 - 0 is a diff of zero
	                    time = fullScaleDeflectionTime * Math.abs(diff) / 180;
	                    time = Math.max(time, fullScaleDeflectionTime / 5);
	                    tweenLatest = new Tween({}, '', Tween.regularEaseInOut, valueLatest, valueLatest + diff, time);
	                    tweenLatest.onMotionChanged = function (event) {
	                        valueLatest = event.target._pos === 360 ? 360 : event.target._pos % 360;
	                        if (!repainting) {
	                            repainting = true;
	                            requestAnimFrame(gauge.repaint);
	                        }
	                    };
	
	                    tweenLatest.onMotionFinished = function (event) {
	                        valueLatest = event.target._pos === 360 ? 360 : event.target._pos % 360;
	                        if (!repainting) {
	                            repainting = true;
	                            requestAnimFrame(gauge.repaint);
	                        }
	                        // do we have a callback function to process?
	                        if (callback && typeof(callback) === "function") {
	                            callback();
	                        }
	                    };
	
	                    tweenLatest.start();
	                } else {
	                    // target different from current, but diff is zero (0 -> 360 for instance), so just repaint
	                    valueLatest = targetValue;
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                }
	            }
	            return this;
	        };
	
	        this.setValueAnimatedAverage = function (newValue, callback) {
	            var targetValue,
	                gauge = this,
	                diff, time;
	            // Actually need to handle 0-360 rather than 0-359
	            // 1-360 are used for directions
	            // 0 is used as a special case to indicate 'calm'
	            newValue = parseFloat(newValue);
	            targetValue = (newValue === 360 ? 360 : newValue % 360);
	            if (valueAverage !== newValue) {
	                if (undefined !== tweenAverage && tweenAverage.isPlaying) {
	                    tweenAverage.stop();
	                }
	
	                diff = getShortestAngle(valueAverage, targetValue);
	                if (diff !== 0) { // 360 - 0 is a diff of zero
	                    time = fullScaleDeflectionTime * Math.abs(diff) / 180;
	                    time = Math.max(time, fullScaleDeflectionTime / 5);
	                    tweenAverage = new Tween({}, '', Tween.regularEaseInOut, valueAverage, valueAverage + diff, time);
	                    tweenAverage.onMotionChanged = function (event) {
	                        valueAverage = event.target._pos === 360 ? 360 : event.target._pos % 360;
	                        if (!repainting) {
	                            repainting = true;
	                            requestAnimFrame(gauge.repaint);
	                        }
	                    };
	
	                    tweenAverage.onMotionFinished = function (event) {
	                        valueLatest = event.target._pos === 360 ? 360 : event.target._pos % 360;
	                        if (!repainting) {
	                            repainting = true;
	                            requestAnimFrame(gauge.repaint);
	                        }
	                        // do we have a callback function to process?
	                        if (callback && typeof(callback) === "function") {
	                            callback();
	                        }
	                    };
	                    
	                    tweenAverage.start();
	                } else {
	                    // target different from current, but diff is zero (0 -> 360 for instance), so just repaint
	                    valueAverage = targetValue;
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                }
	            }
	            return this;
	        };
	
	        this.setArea = function (areaVal) {
	            area = areaVal;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setSection = function (areaSec) {
	            section = areaSec;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            frameDesign = newFrameDesign;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            backgroundColor = newBackgroundColor;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers({foreground: true});
	            foregroundType = newForegroundType;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColor = function (newPointerColor) {
	            resetBuffers({pointer: true});
	            pointerColor = newPointerColor;
	            init({pointer: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColorAverage = function (newPointerColor) {
	            resetBuffers({pointer: true});
	            pointerColorAverage = newPointerColor;
	            init({pointer: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerType = function (newPointerType) {
	            pointerTypeLatest = newPointerType;
	            resetBuffers({pointer: true,
	                          foreground: true
	                         });
	            init({pointer: true,
	                  foreground: true
	                  });
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerTypeAverage = function (newPointerType) {
	            pointerTypeAverage = newPointerType;
	            resetBuffers({pointer: true,
	                          foreground: true
	                         });
	            init({pointer: true,
	                  foreground: true
	                  });
	            this.repaint();
	            return this;
	        };
	
	        this.setPointSymbols = function (newPointSymbols) {
	            pointSymbols = newPointSymbols;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            lcdColor = newLcdColor;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdTitleStrings = function (titles) {
	            lcdTitleStrings = titles;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      led: true,
	                      pointer: true,
	                      foreground: true});
	            }
	
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            if (frameVisible || backgroundVisible) {
	                mainCtx.drawImage(backgroundBuffer, 0, 0);
	            }
	
	            // Draw lcd display
	            if (lcdVisible) {
	                drawLcdText(valueLatest, true);
	                drawLcdText(valueAverage, false);
	            }
	
	            // Define rotation angle
	            angleAverage = valueAverage * angleStep;
	
	            // we have to draw to a rotated temporary image area so we can translate in
	            // absolute x, y values when drawing to main context
	            var shadowOffset = imageWidth * 0.006;
	
	            // Define rotation center
	            mainCtx.save();
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(angleAverage);
	            mainCtx.translate(-centerX, -centerY);
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	            mainCtx.shadowBlur = shadowOffset * 2;
	            // Draw the pointer
	            mainCtx.drawImage(pointerBufferAverage, 0, 0);
	            // Define rotation angle difference for average pointer
	            angleLatest = valueLatest * angleStep  - angleAverage;
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(angleLatest);
	            mainCtx.translate(-centerX, -centerY);
	            mainCtx.drawImage(pointerBufferLatest, 0, 0);
	            mainCtx.restore();
	
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var horizon = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            pointerColor = (undefined === parameters.pointerColor ? steelseries.ColorDef.WHITE : parameters.pointerColor);
	
	        var tweenRoll;
	        var tweenPitch;
	        var repainting = false;
	        var roll = 0;
	        var pitch = 0;
	        var pitchPixel = (PI * size) / 360;
	        var pitchOffset = 0;
	        var upsidedown = false;
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight / 2;
	
	        var initialized = false;
	
	        // **************   Buffer creation  ********************
	        // Buffer for all static background painting code
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        // Buffer for pointer image painting code
	        var valueBuffer = createBuffer(size, size * PI);
	        var valueContext = valueBuffer.getContext('2d');
	
	        // Buffer for indicator painting code
	        var indicatorBuffer = createBuffer(size * 0.037383, size * 0.056074);
	        var indicatorContext = indicatorBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        // **************   Image creation  ********************
	        var drawHorizonBackgroundImage = function (ctx) {
	            ctx.save();
	
	            var imgWidth = size;
	            var imgHeight = size * PI;
	            var y;
	
	            // HORIZON
	            ctx.beginPath();
	            ctx.rect(0, 0, imgWidth, imgHeight);
	            ctx.closePath();
	            var HORIZON_GRADIENT = ctx.createLinearGradient(0, 0, 0, imgHeight);
	            HORIZON_GRADIENT.addColorStop(0, '#7fd5f0');
	            HORIZON_GRADIENT.addColorStop(0.5, '#7fd5f0');
	            HORIZON_GRADIENT.addColorStop(0.5, '#3c4439');
	            HORIZON_GRADIENT.addColorStop(1, '#3c4439');
	            ctx.fillStyle = HORIZON_GRADIENT;
	            ctx.fill();
	
	            ctx.lineWidth = 1;
	            var stepSizeY = imgHeight / 360 * 5;
	            var stepTen = false;
	            var step = 10;
	
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	            var fontSize = imgWidth * 0.04;
	            ctx.font = fontSize + 'px ' + stdFontName;
	            ctx.fillStyle = '#37596e';
	            for (y = imgHeight / 2 - stepSizeY; y > 0; y -= stepSizeY) {
	                if (step <= 90) {
	                    if (stepTen) {
	                        ctx.fillText(step, (imgWidth - (imgWidth * 0.2)) / 2 - 8, y, imgWidth * 0.375);
	                        ctx.fillText(step, imgWidth - (imgWidth - (imgWidth * 0.2)) / 2 + 8, y, imgWidth * 0.375);
	                        ctx.beginPath();
	                        ctx.moveTo((imgWidth - (imgWidth * 0.2)) / 2, y);
	                        ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.2)) / 2, y);
	                        ctx.closePath();
	                        step += 10;
	                    } else {
	                        ctx.beginPath();
	                        ctx.moveTo((imgWidth - (imgWidth * 0.1)) / 2, y);
	                        ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.1)) / 2, y);
	                        ctx.closePath();
	                    }
	                    ctx.stroke();
	                }
	                stepTen ^= true;
	            }
	            stepTen = false;
	            step = 10;
	            ctx.strokeStyle = '#FFFFFF';
	            ctx.lineWidth = 1.5;
	            ctx.beginPath();
	            ctx.moveTo(0, imgHeight / 2);
	            ctx.lineTo(imgWidth, imgHeight / 2);
	            ctx.closePath();
	            ctx.stroke();
	            ctx.fillStyle = '#FFFFFF';
	            ctx.lineWidth = 1;
	            for (y = imgHeight / 2 + stepSizeY; y <= imgHeight; y += stepSizeY) {
	                if (step <= 90) {
	                    if (stepTen) {
	                        ctx.fillText(-step, (imgWidth - (imgWidth * 0.2)) / 2 - 8, y, imgWidth * 0.375);
	                        ctx.fillText(-step, imgWidth - (imgWidth - (imgWidth * 0.2)) / 2 + 8, y, imgWidth * 0.375);
	                        ctx.beginPath();
	                        ctx.moveTo((imgWidth - (imgWidth * 0.2)) / 2, y);
	                        ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.2)) / 2, y);
	                        ctx.closePath();
	                        step += 10;
	                    } else {
	                        ctx.beginPath();
	                        ctx.moveTo((imgWidth - (imgWidth * 0.1)) / 2, y);
	                        ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.1)) / 2, y);
	                        ctx.closePath();
	                    }
	                    ctx.stroke();
	                }
	                stepTen ^= true;
	            }
	
	            ctx.restore();
	        };
	
	        var drawHorizonForegroundImage = function (ctx) {
	            ctx.save();
	
	            ctx.fillStyle = pointerColor.light.getRgbaColor();
	
	            // CENTERINDICATOR
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.476635, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.476635, imageHeight * 0.514018, imageWidth * 0.485981, imageHeight * 0.523364, imageWidth * 0.5, imageHeight * 0.523364);
	            ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.523364, imageWidth * 0.523364, imageHeight * 0.514018, imageWidth * 0.523364, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.523364, imageHeight * 0.485981, imageWidth * 0.514018, imageHeight * 0.476635, imageWidth * 0.5, imageHeight * 0.476635);
	            ctx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.476635, imageWidth * 0.476635, imageHeight * 0.485981, imageWidth * 0.476635, imageHeight * 0.5);
	            ctx.closePath();
	            ctx.moveTo(imageWidth * 0.415887, imageHeight * 0.504672);
	            ctx.lineTo(imageWidth * 0.415887, imageHeight * 0.495327);
	            ctx.bezierCurveTo(imageWidth * 0.415887, imageHeight * 0.495327, imageWidth * 0.467289, imageHeight * 0.495327, imageWidth * 0.467289, imageHeight * 0.495327);
	            ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.481308, imageHeight * 0.471962, imageWidth * 0.495327, imageHeight * 0.467289);
	            ctx.bezierCurveTo(imageWidth * 0.495327, imageHeight * 0.467289, imageWidth * 0.495327, imageHeight * 0.415887, imageWidth * 0.495327, imageHeight * 0.415887);
	            ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.415887);
	            ctx.bezierCurveTo(imageWidth * 0.504672, imageHeight * 0.415887, imageWidth * 0.504672, imageHeight * 0.467289, imageWidth * 0.504672, imageHeight * 0.467289);
	            ctx.bezierCurveTo(imageWidth * 0.518691, imageHeight * 0.471962, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.532710, imageHeight * 0.495327);
	            ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.495327, imageWidth * 0.584112, imageHeight * 0.495327, imageWidth * 0.584112, imageHeight * 0.495327);
	            ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.504672);
	            ctx.bezierCurveTo(imageWidth * 0.584112, imageHeight * 0.504672, imageWidth * 0.532710, imageHeight * 0.504672, imageWidth * 0.532710, imageHeight * 0.504672);
	            ctx.bezierCurveTo(imageWidth * 0.528037, imageHeight * 0.518691, imageWidth * 0.518691, imageHeight * 0.532710, imageWidth * 0.5, imageHeight * 0.532710);
	            ctx.bezierCurveTo(imageWidth * 0.481308, imageHeight * 0.532710, imageWidth * 0.471962, imageHeight * 0.518691, imageWidth * 0.467289, imageHeight * 0.504672);
	            ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.504672, imageWidth * 0.415887, imageHeight * 0.504672, imageWidth * 0.415887, imageHeight * 0.504672);
	            ctx.closePath();
	            ctx.fill();
	
	            // Tickmarks
	            var step = 5;
	            var stepRad = 5 * RAD_FACTOR;
	            ctx.translate(centerX, centerY);
	            ctx.rotate(-HALF_PI);
	            ctx.translate(-centerX, -centerY);
	            var angle;
	            for (angle = -90; angle <= 90; angle += step) {
	                if (angle % 45 === 0 || angle === 0) {
	                    ctx.strokeStyle = pointerColor.medium.getRgbaColor();
	                    ctx.lineWidth = 2;
	                    ctx.beginPath();
	                    ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785);
	                    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.113);
	                    ctx.closePath();
	                    ctx.stroke();
	                } else if (angle % 15 === 0) {
	                    ctx.strokeStyle = '#FFFFFF';
	                    ctx.lineWidth = 1;
	                    ctx.beginPath();
	                    ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785);
	                    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.103785);
	                    ctx.closePath();
	                    ctx.stroke();
	                } else {
	                    ctx.strokeStyle = '#FFFFFF';
	                    ctx.lineWidth = 0.5;
	                    ctx.beginPath();
	                    ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785);
	                    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.093785);
	                    ctx.closePath();
	                    ctx.stroke();
	                }
	                ctx.translate(centerX, centerY);
	                ctx.rotate(stepRad, centerX, centerY);
	                ctx.translate(-centerX, -centerY);
	            }
	
	            ctx.restore();
	        };
	
	        var drawIndicatorImage = function (ctx) {
	            ctx.save();
	
	            var imgWidth = imageWidth * 0.037383;
	            var imgHeight = imageHeight * 0.056074;
	
	            ctx.beginPath();
	            ctx.moveTo(imgWidth * 0.5, 0);
	            ctx.lineTo(0, imgHeight);
	            ctx.lineTo(imgWidth, imgHeight);
	            ctx.closePath();
	
	            ctx.fillStyle = pointerColor.light.getRgbaColor();
	            ctx.fill();
	            ctx.strokeStyle = pointerColor.medium.getRgbaColor();
	            ctx.stroke();
	
	            ctx.restore();
	        };
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	        var init = function () {
	            initialized = true;
	
	            if (frameVisible) {
	                drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            drawHorizonBackgroundImage(valueContext);
	
	            drawIndicatorImage(indicatorContext);
	
	            drawHorizonForegroundImage(foregroundContext);
	
	            if (foregroundVisible) {
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, true, knobType, knobStyle, gaugeType);
	            }
	        };
	
	        var resetBuffers = function () {
	            // Buffer for all static background painting code
	            backgroundBuffer.width = size;
	            backgroundBuffer.height = size;
	            backgroundContext = backgroundBuffer.getContext('2d');
	
	            // Buffer for pointer image painting code
	            valueBuffer.width = size;
	            valueBuffer.height = size * PI;
	            valueContext = valueBuffer.getContext('2d');
	
	            // Buffer for the indicator
	            indicatorBuffer.width = size * 0.037383;
	            indicatorBuffer.height = size * 0.056074;
	            indicatorContext = indicatorBuffer.getContext('2d');
	
	            // Buffer for static foreground painting code
	            foregroundBuffer.width = size;
	            foregroundBuffer.height = size;
	            foregroundContext = foregroundBuffer.getContext('2d');
	        };
	
	        //************************************ Public methods **************************************
	        this.setRoll = function (newRoll) {
	            newRoll = parseFloat(newRoll) % 360;
	            if (roll !== newRoll) {
	                roll = newRoll;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getRoll = function () {
	            return roll;
	        };
	
	        this.setRollAnimated = function (newRoll, callback) {
	            var gauge = this;
	            newRoll = parseFloat(newRoll) % 360;
	            if (roll !== newRoll) {
	
	                if (undefined !== tweenRoll && tweenRoll.isPlaying) {
	                    tweenRoll.stop();
	                }
	
	                tweenRoll = new Tween({}, '', Tween.regularEaseInOut, roll, newRoll, 1);
	
	                tweenRoll.onMotionChanged = function (event) {
	                    roll = event.target._pos;
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tweenRoll.onMotionFinished = callback;
	                }
	
	                tweenRoll.start();
	            }
	            return this;
	        };
	
	        this.setPitch = function (newPitch) {
	            // constrain to range -180..180
	            // normal range -90..90 and -180..-90/90..180 indicate inverted
	            newPitch = ((parseFloat(newPitch) + 180 - pitchOffset) % 360) - 180;
	            //pitch = -(newPitch + pitchOffset) % 180;
	            if (pitch !== newPitch) {
	                pitch = newPitch;
	                if (pitch > 90) {
	                    pitch = 90 - (pitch - 90);
	                    if (!upsidedown) {
	                        this.setRoll(roll - 180);
	                    }
	                    upsidedown = true;
	                } else if (pitch < -90) {
	                    pitch = -90 + (-90 - pitch);
	                    if (!upsidedown) {
	                        this.setRoll(roll + 180);
	                    }
	                    upsidedown = true;
	                } else {
	                    upsidedown = false;
	                }
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getPitch = function () {
	            return pitch;
	        };
	
	        this.setPitchAnimated = function (newPitch, callback) {
	            var gauge = this;
	            newPitch = parseFloat(newPitch);
	            // perform all range checking in setPitch()
	            if (pitch !== newPitch) {
	                if (undefined !== tweenPitch && tweenPitch.isPlaying) {
	                    tweenPitch.stop();
	                }
	                tweenPitch = new Tween({}, '', Tween.regularEaseInOut, pitch, newPitch, 1);
	                tweenPitch.onMotionChanged = function (event) {
	                    pitch = event.target._pos;
	                    if (pitch > 90) {
	                        pitch = 90 - (pitch - 90);
	                        if (!upsidedown) {
	                            this.setRoll(roll - 180);
	                        }
	                        upsidedown = true;
	                    } else if (pitch < -90) {
	                        pitch = -90 + (-90 - pitch);
	                        if (!upsidedown) {
	                            this.setRoll(roll + 180);
	                        }
	                        upsidedown = true;
	                    } else {
	                        upsidedown = false;
	                    }
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                    gauge.setPitch(event.target._pos);
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tweenPitch.onMotionFinished = callback;
	                }
	
	                tweenPitch.start();
	            }
	            return this;
	        };
	
	        this.setPitchOffset = function (newPitchOffset) {
	            pitchOffset = parseFloat(newPitchOffset);
	            this.repaint();
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers();
	            frameDesign = newFrameDesign;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers();
	            foregroundType = newForegroundType;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            mainCtx.drawImage(backgroundBuffer, 0, 0);
	
	            mainCtx.save();
	
	            // Set the clipping area
	            mainCtx.beginPath();
	            mainCtx.arc(centerX, centerY, imageWidth * 0.831775 / 2, 0, TWO_PI, true);
	            mainCtx.closePath();
	            mainCtx.clip();
	
	            // Rotate around roll
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(-(roll * RAD_FACTOR));
	            mainCtx.translate(-centerX, 0);
	            // Translate about dive
	            mainCtx.translate(0, (pitch * pitchPixel));
	
	            // Draw horizon
	            mainCtx.drawImage(valueBuffer, 0, -valueBuffer.height / 2);
	
	            // Draw the scale and angle indicator
	            mainCtx.translate(0, -(pitch * pitchPixel) - centerY);
	            mainCtx.drawImage(indicatorBuffer, (imageWidth * 0.5 - indicatorBuffer.width / 2), (imageWidth * 0.107476));
	            mainCtx.restore();
	
	            mainCtx.drawImage(foregroundBuffer, 0, 0);
	
	            mainCtx.restore();
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var led = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            ledColor = (undefined === parameters.ledColor ? steelseries.LedColor.RED_LED : parameters.ledColor);
	
	        var ledBlinking = false;
	        var ledTimerId = 0;
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        var initialized = false;
	
	        // Buffer for led on painting code
	        var ledBufferOn = doc.createElement('canvas');
	        ledBufferOn.width = size;
	        ledBufferOn.height = size;
	        var ledContextOn = ledBufferOn.getContext('2d');
	
	        // Buffer for led off painting code
	        var ledBufferOff = doc.createElement('canvas');
	        ledBufferOff.width = size;
	        ledBufferOff.height = size;
	        var ledContextOff = ledBufferOff.getContext('2d');
	
	        // Buffer for current led painting code
	        var ledBuffer = ledBufferOff;
	
	        var init = function () {
	            initialized = true;
	
	            // Draw LED ON in ledBuffer_ON
	            ledContextOn.clearRect(0, 0, ledContextOn.canvas.width, ledContextOn.canvas.height);
	            ledContextOn.drawImage(createLedImage(size, 1, ledColor), 0, 0);
	
	            // Draw LED ON in ledBuffer_OFF
	            ledContextOff.clearRect(0, 0, ledContextOff.canvas.width, ledContextOff.canvas.height);
	            ledContextOff.drawImage(createLedImage(size, 0, ledColor), 0, 0);
	        };
	
	        this.toggleLed = function () {
	            if (ledBuffer === ledBufferOn) {
	                ledBuffer = ledBufferOff;
	            } else {
	                ledBuffer = ledBufferOn;
	            }
	            repaint();
	            return this;
	        };
	
	        this.setLedColor = function (newColor) {
	            ledColor = newColor;
	            initialized = false;
	            repaint();
	            return this;
	        };
	
	        this.setLedOnOff = function (on) {
	            if (!!on) {
	                ledBuffer = ledBufferOn;
	            } else {
	                ledBuffer = ledBufferOff;
	            }
	            repaint();
	            return this;
	        };
	
	        this.blink = function (blink) {
	            if (!!blink) {
	                if (!ledBlinking) {
	                    ledTimerId = setInterval(this.toggleLed, 1000);
	                    ledBlinking = true;
	                }
	            } else {
	                if (ledBlinking) {
	                    clearInterval(ledTimerId);
	                    ledBlinking = false;
	                    ledBuffer = ledBufferOff;
	                }
	            }
	            return this;
	        };
	
	        var repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            mainCtx.drawImage(ledBuffer, 0, 0);
	
	            mainCtx.restore();
	        };
	
	        repaint();
	
	        return this;
	    };
	
	    var clock = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            pointerType = (undefined === parameters.pointerType ? steelseries.PointerType.TYPE1 : parameters.pointerType),
	            pointerColor = (undefined === parameters.pointerColor ? (pointerType === steelseries.PointerType.TYPE1 ? steelseries.ColorDef.GRAY : steelseries.ColorDef.BLACK) : parameters.pointerColor),
	            backgroundColor = (undefined === parameters.backgroundColor ? (pointerType === steelseries.PointerType.TYPE1 ? steelseries.BackgroundColor.ANTHRACITE : steelseries.BackgroundColor.LIGHT_GRAY) : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),
	            isAutomatic = (undefined === parameters.isAutomatic ? true : parameters.isAutomatic),
	            hour = (undefined === parameters.hour ? 11 : parameters.hour),
	            minute = (undefined === parameters.minute ? 5 : parameters.minute),
	            second = (undefined === parameters.second ? 0 : parameters.second),
	            secondMovesContinuous = (undefined === parameters.secondMovesContinuous ? false : parameters.secondMovesContinuous),
	            timeZoneOffsetHour = (undefined === parameters.timeZoneOffsetHour ? 0 : parameters.timeZoneOffsetHour),
	            timeZoneOffsetMinute = (undefined === parameters.timeZoneOffsetMinute ? 0 : parameters.timeZoneOffsetMinute),
	            secondPointerVisible = (undefined === parameters.secondPointerVisible ? true : parameters.secondPointerVisible);
	
	        // GaugeType specific private variables
	        var objDate = new Date();
	        var minutePointerAngle;
	        var hourPointerAngle;
	        var secondPointerAngle;
	        var tickTimer;
	        var tickInterval = (secondMovesContinuous ? 100 : 1000);
	        tickInterval = (secondPointerVisible ? tickInterval : 100);
	
	        var self = this;
	
	        // Constants
	        var ANGLE_STEP = 6;
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	        // Has a size been specified?
	        if (size === 0) {
	            size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        var imageWidth = size;
	        var imageHeight = size;
	
	        var centerX = imageWidth / 2;
	        var centerY = imageHeight / 2;
	
	        var initialized = false;
	
	        // Buffer for the frame
	        var frameBuffer = createBuffer(size, size);
	        var frameContext = frameBuffer.getContext('2d');
	
	        // Buffer for static background painting code
	        var backgroundBuffer = createBuffer(size, size);
	        var backgroundContext = backgroundBuffer.getContext('2d');
	
	        // Buffer for hour pointer image painting code
	        var hourBuffer = createBuffer(size, size);
	        var hourContext = hourBuffer.getContext('2d');
	
	        // Buffer for minute pointer image painting code
	        var minuteBuffer = createBuffer(size, size);
	        var minuteContext = minuteBuffer.getContext('2d');
	
	        // Buffer for second pointer image painting code
	        var secondBuffer = createBuffer(size, size);
	        var secondContext = secondBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        var foregroundBuffer = createBuffer(size, size);
	        var foregroundContext = foregroundBuffer.getContext('2d');
	
	        var drawTickmarksImage = function (ctx, ptrType) {
	            var tickAngle;
	            var SMALL_TICK_HEIGHT;
	            var BIG_TICK_HEIGHT;
	            var OUTER_POINT, INNER_POINT;
	            OUTER_POINT = imageWidth * 0.405;
	            ctx.save();
	            ctx.translate(centerX, centerY);
	
	            switch (ptrType.type) {
	            case 'type1':
	                // Draw minutes tickmarks
	                SMALL_TICK_HEIGHT = imageWidth * 0.074766;
	                INNER_POINT = OUTER_POINT - SMALL_TICK_HEIGHT;
	                ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	                ctx.lineWidth = imageWidth * 0.014018;
	
	                for (tickAngle = 0; tickAngle < 360; tickAngle += 30) {
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                    ctx.rotate(30 * RAD_FACTOR);
	                }
	
	                // Draw hours tickmarks
	                BIG_TICK_HEIGHT = imageWidth * 0.126168;
	                INNER_POINT = OUTER_POINT - BIG_TICK_HEIGHT;
	                ctx.lineWidth = imageWidth * 0.032710;
	
	                for (tickAngle = 0; tickAngle < 360; tickAngle += 90) {
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                    ctx.rotate(90 * RAD_FACTOR);
	                }
	                break;
	
	            case 'type2':
	            /* falls through */
	            default:
	                // Draw minutes tickmarks
	                SMALL_TICK_HEIGHT = imageWidth * 0.037383;
	                INNER_POINT = OUTER_POINT - SMALL_TICK_HEIGHT;
	                ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	                ctx.lineWidth = imageWidth * 0.009345;
	
	                for (tickAngle = 0; tickAngle < 360; tickAngle += 6) {
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                    ctx.rotate(6 * RAD_FACTOR);
	                }
	
	                // Draw hours tickmarks
	                BIG_TICK_HEIGHT = imageWidth * 0.084112;
	                INNER_POINT = OUTER_POINT - BIG_TICK_HEIGHT;
	                ctx.lineWidth = imageWidth * 0.028037;
	
	                for (tickAngle = 0; tickAngle < 360; tickAngle += 30) {
	                    ctx.beginPath();
	                    ctx.moveTo(OUTER_POINT, 0);
	                    ctx.lineTo(INNER_POINT, 0);
	                    ctx.closePath();
	                    ctx.stroke();
	                    ctx.rotate(30 * RAD_FACTOR);
	                }
	                break;
	            }
	            ctx.translate(-centerX, -centerY);
	            ctx.restore();
	        };
	
	        var drawHourPointer = function (ctx, ptrType) {
	            ctx.save();
	            var grad;
	
	            switch (ptrType.type) {
	            case 'type2':
	                ctx.beginPath();
	                ctx.lineWidth = imageWidth * 0.046728;
	                ctx.moveTo(centerX, imageWidth * 0.289719);
	                ctx.lineTo(centerX, imageWidth * 0.289719 + imageWidth * 0.224299);
	                ctx.strokeStyle = pointerColor.medium.getRgbaColor();
	                ctx.closePath();
	                ctx.stroke();
	                break;
	
	            case 'type1':
	            /* falls through */
	            default:
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.471962, imageHeight * 0.560747);
	                ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.214953);
	                ctx.lineTo(imageWidth * 0.5, imageHeight * 0.182242);
	                ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.214953);
	                ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.560747);
	                ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.560747);
	                ctx.closePath();
	                grad = ctx.createLinearGradient(imageWidth * 0.471962, imageHeight * 0.560747, imageWidth * 0.528037, imageHeight * 0.214953);
	                grad.addColorStop(1, pointerColor.veryLight.getRgbaColor());
	                grad.addColorStop(0, pointerColor.light.getRgbaColor());
	                ctx.fillStyle = grad;
	                ctx.strokeStyle = pointerColor.light.getRgbaColor();
	                ctx.fill();
	                ctx.stroke();
	                break;
	            }
	            ctx.restore();
	        };
	
	        var drawMinutePointer = function (ctx, ptrType) {
	            ctx.save();
	            var grad;
	
	            switch (ptrType.type) {
	            case 'type2':
	                ctx.beginPath();
	                ctx.lineWidth = imageWidth * 0.032710;
	                ctx.moveTo(centerX, imageWidth * 0.116822);
	                ctx.lineTo(centerX, imageWidth * 0.116822 + imageWidth * 0.387850);
	                ctx.strokeStyle = pointerColor.medium.getRgbaColor();
	                ctx.closePath();
	                ctx.stroke();
	                break;
	
	            case 'type1':
	            /* falls through */
	            default:
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.574766);
	                ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.135514);
	                ctx.lineTo(imageWidth * 0.5, imageHeight * 0.107476);
	                ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.140186);
	                ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.574766);
	                ctx.lineTo(imageWidth * 0.518691, imageHeight * 0.574766);
	                ctx.closePath();
	                grad = ctx.createLinearGradient(imageWidth * 0.518691, imageHeight * 0.574766, imageWidth * 0.476635, imageHeight * 0.140186);
	                grad.addColorStop(1, pointerColor.veryLight.getRgbaColor());
	                grad.addColorStop(0, pointerColor.light.getRgbaColor());
	                ctx.fillStyle = grad;
	                ctx.strokeStyle = pointerColor.light.getRgbaColor();
	                ctx.fill();
	                ctx.stroke();
	                break;
	            }
	            ctx.restore();
	        };
	
	        var drawSecondPointer = function (ctx, ptrType) {
	            ctx.save();
	            var grad;
	
	            switch (ptrType.type) {
	            case 'type2':
	                // top rectangle
	                ctx.lineWidth = imageWidth * 0.009345;
	                ctx.beginPath();
	                ctx.moveTo(centerX, imageWidth * 0.098130);
	                ctx.lineTo(centerX, imageWidth * 0.098130 + imageWidth * 0.126168);
	                ctx.closePath();
	                ctx.stroke();
	                // bottom rectangle
	                ctx.lineWidth = imageWidth * 0.018691;
	                ctx.beginPath();
	                ctx.moveTo(centerX, imageWidth * 0.308411);
	                ctx.lineTo(centerX, imageWidth * 0.308411 + imageWidth * 0.191588);
	                ctx.closePath();
	                ctx.stroke();
	                // circle
	                ctx.lineWidth = imageWidth * 0.016;
	                ctx.beginPath();
	                ctx.arc(centerX, imageWidth * 0.26, imageWidth * 0.085 / 2, 0, TWO_PI);
	                ctx.closePath();
	                ctx.stroke();
	                break;
	
	            case 'type1':
	            /* falls through */
	            default:
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.509345, imageHeight * 0.116822);
	                ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.574766);
	                ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.574766);
	                ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.116822);
	                ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.116822);
	                ctx.closePath();
	                grad = ctx.createLinearGradient(imageWidth * 0.509345, imageHeight * 0.116822, imageWidth * 0.490654, imageHeight * 0.574766);
	                grad.addColorStop(0, steelseries.ColorDef.RED.light.getRgbaColor());
	                grad.addColorStop(0.47, steelseries.ColorDef.RED.medium.getRgbaColor());
	                grad.addColorStop(1, steelseries.ColorDef.RED.dark.getRgbaColor());
	                ctx.fillStyle = grad;
	                ctx.strokeStyle = steelseries.ColorDef.RED.dark.getRgbaColor();
	                ctx.fill();
	                ctx.stroke();
	                break;
	            }
	            ctx.restore();
	        };
	
	        var drawKnob = function (ctx) {
	            var grad;
	
	            // draw the knob
	            ctx.beginPath();
	            ctx.arc(centerX, centerY, imageWidth * 0.045, 0, TWO_PI);
	            ctx.closePath();
	            grad = ctx.createLinearGradient(centerX - imageWidth * 0.045 / 2, centerY - imageWidth * 0.045 / 2, centerX + imageWidth * 0.045 / 2, centerY + imageWidth * 0.045 / 2);
	            grad.addColorStop(0, '#eef0f2');
	            grad.addColorStop(1, '#65696d');
	            ctx.fillStyle = grad;
	            ctx.fill();
	        };
	
	        var drawTopKnob = function (ctx, ptrType) {
	            var grad;
	
	            ctx.save();
	
	            switch (ptrType.type) {
	            case 'type2':
	                // draw knob
	                ctx.fillStyle = '#000000';
	                ctx.beginPath();
	                ctx.arc(centerX, centerY, imageWidth * 0.088785 / 2, 0, TWO_PI);
	                ctx.closePath();
	                ctx.fill();
	                break;
	
	            case 'type1':
	            /* falls through */
	            default:
	                // draw knob
	                grad = ctx.createLinearGradient(centerX - imageWidth * 0.027 / 2, centerY - imageWidth * 0.027 / 2, centerX + imageWidth * 0.027 / 2, centerY + imageWidth * 0.027 / 2);
	                grad.addColorStop(0, '#f3f4f7');
	                grad.addColorStop(0.11, '#f3f5f7');
	                grad.addColorStop(0.12, '#f1f3f5');
	                grad.addColorStop(0.2, '#c0c5cb');
	                grad.addColorStop(0.2, '#bec3c9');
	                grad.addColorStop(1, '#bec3c9');
	                ctx.fillStyle = grad;
	                ctx.beginPath();
	                ctx.arc(centerX, centerY, imageWidth * 0.027, 0, TWO_PI);
	                ctx.closePath();
	                ctx.fill();
	                break;
	            }
	
	            ctx.restore();
	        };
	
	        var calculateAngles = function (hour, minute, second) {
	            secondPointerAngle = second * ANGLE_STEP * RAD_FACTOR;
	            minutePointerAngle = minute * ANGLE_STEP * RAD_FACTOR;
	            hourPointerAngle = (hour + minute / 60) * ANGLE_STEP * 5 * RAD_FACTOR;
	        };
	
	        var tickTock = function () {
	            if (isAutomatic) {
	                objDate = new Date();
	            } else {
	                objDate.setHours(hour);
	                objDate.setMinutes(minute);
	                objDate.setSeconds(second);
	            }
	            // Seconds
	            second = objDate.getSeconds() + (secondMovesContinuous ? objDate.getMilliseconds() / 1000 : 0);
	
	            // Hours
	            if (timeZoneOffsetHour !== 0 && timeZoneOffsetMinute !== 0) {
	                hour = objDate.getUTCHours() + timeZoneOffsetHour;
	            } else {
	                hour = objDate.getHours();
	            }
	            hour = hour % 12;
	
	            // Minutes
	            if (timeZoneOffsetHour !== 0 && timeZoneOffsetMinute !== 0) {
	                minute = objDate.getUTCMinutes() + timeZoneOffsetMinute;
	            } else {
	                minute = objDate.getMinutes();
	            }
	            if (minute > 60) {
	                minute -= 60;
	                hour++;
	            }
	            if (minute < 0) {
	                minute += 60;
	                hour--;
	            }
	            hour = hour % 12;
	            // Calculate angles from current hour and minute values
	            calculateAngles(hour, minute, second);
	
	            if (isAutomatic) {
	                tickTimer = setTimeout(tickTock, tickInterval);
	            }
	
	            self.repaint();
	        };
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	        var init = function (parameters) {
	            parameters = parameters || {};
	            var drawFrame = (undefined === parameters.frame ? false : parameters.frame);
	            var drawBackground = (undefined === parameters.background ? false : parameters.background);
	            var drawPointers = (undefined === parameters.pointers ? false : parameters.pointers);
	            var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	
	            initialized = true;
	
	            if (drawFrame && frameVisible) {
	                drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            if (drawBackground && backgroundVisible) {
	                // Create background in background buffer (backgroundBuffer)
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	
	                // Create custom layer in background buffer (backgroundBuffer)
	                drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);
	
	                drawTickmarksImage(backgroundContext, pointerType);
	            }
	
	            if (drawPointers) {
	                drawHourPointer(hourContext, pointerType);
	                drawMinutePointer(minuteContext, pointerType);
	                drawSecondPointer(secondContext, pointerType);
	            }
	
	            if (drawForeground && foregroundVisible) {
	                drawTopKnob(foregroundContext, pointerType);
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetFrame = (undefined === buffers.frame ? false : buffers.frame);
	            var resetBackground = (undefined === buffers.background ? false : buffers.background);
	            var resetPointers = (undefined === buffers.pointers ? false : buffers.pointers);
	            var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            if (resetFrame) {
	                frameBuffer.width = size;
	                frameBuffer.height = size;
	                frameContext = frameBuffer.getContext('2d');
	            }
	
	            if (resetBackground) {
	                backgroundBuffer.width = size;
	                backgroundBuffer.height = size;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	
	            if (resetPointers) {
	                hourBuffer.width = size;
	                hourBuffer.height = size;
	                hourContext = hourBuffer.getContext('2d');
	
	                minuteBuffer.width = size;
	                minuteBuffer.height = size;
	                minuteContext = minuteBuffer.getContext('2d');
	
	                secondBuffer.width = size;
	                secondBuffer.height = size;
	                secondContext = secondBuffer.getContext('2d');
	            }
	
	            if (resetForeground) {
	                foregroundBuffer.width = size;
	                foregroundBuffer.height = size;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        //************************************ Public methods **************************************
	        this.getAutomatic = function () {
	            return isAutomatic;
	        };
	
	        this.setAutomatic = function (newValue) {
	            newValue = !!newValue;
	            if (isAutomatic && !newValue) {
	                // stop the clock!
	                clearTimeout(tickTimer);
	                isAutomatic = newValue;
	            } else if (!isAutomatic && newValue) {
	                // start the clock
	                isAutomatic = newValue;
	                tickTock();
	            }
	            return this;
	        };
	
	        this.getHour = function () {
	            return hour;
	        };
	
	        this.setHour = function (newValue) {
	            newValue = parseInt(newValue, 10) % 12;
	            if (hour !== newValue) {
	                hour = newValue;
	                calculateAngles(hour, minute, second);
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getMinute = function () {
	            return minute;
	        };
	
	        this.setMinute = function (newValue) {
	            newValue = parseInt(newValue, 10) % 60;
	            if (minute !== newValue) {
	                minute = newValue;
	                calculateAngles(hour, minute, second);
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getSecond = function () {
	            return second;
	        };
	
	        this.setSecond = function (newValue) {
	            second = parseInt(newValue, 10) % 60;
	            if (second !== newValue) {
	                second = newValue;
	                calculateAngles(hour, minute, second);
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getTimeZoneOffsetHour = function () {
	            return timeZoneOffsetHour;
	        };
	
	        this.setTimeZoneOffsetHour = function (newValue) {
	            timeZoneOffsetHour = parseInt(newValue, 10);
	            this.repaint();
	            return this;
	        };
	
	        this.getTimeZoneOffsetMinute = function () {
	            return timeZoneOffsetMinute;
	        };
	
	        this.setTimeZoneOffsetMinute = function (newValue) {
	            timeZoneOffsetMinute = parseInt(newValue, 10);
	            this.repaint();
	            return this;
	        };
	
	        this.getSecondPointerVisible = function () {
	            return secondPointerVisible;
	        };
	
	        this.setSecondPointerVisible = function (newValue) {
	            secondPointerVisible = !!newValue;
	            this.repaint();
	            return this;
	        };
	
	        this.getSecondMovesContinuous = function () {
	            return secondMovesContinuous;
	        };
	
	        this.setSecondMovesContinuous = function (newValue) {
	            secondMovesContinuous = !!newValue;
	            tickInterval = (secondMovesContinuous ? 100 : 1000);
	            tickInterval = (secondPointerVisible ? tickInterval : 100);
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({ frame: true,
	                           background: true });
	            backgroundColor = newBackgroundColor;
	            init({ frame: true,
	                   background: true });
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers({foreground: true});
	            foregroundType = newForegroundType;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerType = function (newPointerType) {
	            resetBuffers({ background: true,
	                           foreground: true,
	                           pointers: true });
	            pointerType = newPointerType;
	            if (pointerType.type === 'type1') {
	                pointerColor = steelseries.ColorDef.GRAY;
	                backgroundColor = steelseries.BackgroundColor.ANTHRACITE;
	            } else {
	                pointerColor = steelseries.ColorDef.BLACK;
	                backgroundColor = steelseries.BackgroundColor.LIGHT_GRAY;
	            }
	            init({ background: true,
	                   foreground: true,
	                   pointers: true });
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColor = function (newPointerColor) {
	            resetBuffers({pointers: true});
	            pointerColor = newPointerColor;
	            init({pointers: true});
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      pointers: true,
	                      foreground: true});
	            }
	
	            //mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            // Draw frame
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            if (backgroundVisible) {
	                mainCtx.drawImage(backgroundBuffer, 0, 0);
	            }
	
	            // have to draw to a rotated temporary image area so we can translate in
	            // absolute x, y values when drawing to main context
	            var shadowOffset = imageWidth * 0.006;
	
	            // draw hour pointer
	            // Define rotation center
	            mainCtx.save();
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(hourPointerAngle);
	            mainCtx.translate(-centerX, -centerY);
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	            mainCtx.shadowBlur = shadowOffset * 2;
	            // Draw the pointer
	            mainCtx.drawImage(hourBuffer, 0, 0);
	
	            // draw minute pointer
	            // Define rotation center
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(minutePointerAngle - hourPointerAngle);
	            mainCtx.translate(-centerX, -centerY);
	            mainCtx.drawImage(minuteBuffer, 0, 0);
	            mainCtx.restore();
	
	            if (pointerType.type === 'type1') {
	                drawKnob(mainCtx);
	            }
	
	            if (secondPointerVisible) {
	                // draw second pointer
	                // Define rotation center
	                mainCtx.save();
	                mainCtx.translate(centerX, centerY);
	                mainCtx.rotate(secondPointerAngle);
	                mainCtx.translate(-centerX, -centerY);
	                // Set the pointer shadow params
	                mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	                mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	                mainCtx.shadowBlur = shadowOffset * 2;
	                // Draw the pointer
	                mainCtx.drawImage(secondBuffer, 0, 0);
	                mainCtx.restore();
	            }
	
	            // Draw foreground
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	        };
	
	        // Visualize the component
	        tickTock();
	
	        return this;
	    };
	
	    var battery = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            value = (undefined === parameters.value ? 50 : parameters.value);
	
	        // Get the canvas context and clear it
	        var mainCtx = getCanvasContext(canvas);
	
	        // Has a size been specified?
	        if (size === 0) {
	            size = mainCtx.canvas.width;
	        }
	
	        var imageWidth = size;
	        var imageHeight = Math.ceil(size * 0.45);
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = imageWidth;
	        mainCtx.canvas.height = imageHeight;
	
	        var createBatteryImage = function (ctx, imageWidth, imageHeight, value) {
	            var grad;
	
	            // Background
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.025, imageHeight * 0.055555);
	            ctx.lineTo(imageWidth * 0.9, imageHeight * 0.055555);
	            ctx.lineTo(imageWidth * 0.9, imageHeight * 0.944444);
	            ctx.lineTo(imageWidth * 0.025, imageHeight * 0.944444);
	            ctx.lineTo(imageWidth * 0.025, imageHeight * 0.055555);
	            ctx.closePath();
	            //
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.925, 0);
	            ctx.lineTo(0, 0);
	            ctx.lineTo(0, imageHeight);
	            ctx.lineTo(imageWidth * 0.925, imageHeight);
	            ctx.lineTo(imageWidth * 0.925, imageHeight * 0.722222);
	            ctx.bezierCurveTo(imageWidth * 0.925, imageHeight * 0.722222, imageWidth * 0.975, imageHeight * 0.722222, imageWidth * 0.975, imageHeight * 0.722222);
	            ctx.bezierCurveTo(imageWidth, imageHeight * 0.722222, imageWidth, imageHeight * 0.666666, imageWidth, imageHeight * 0.666666);
	            ctx.bezierCurveTo(imageWidth, imageHeight * 0.666666, imageWidth, imageHeight * 0.333333, imageWidth, imageHeight * 0.333333);
	            ctx.bezierCurveTo(imageWidth, imageHeight * 0.333333, imageWidth, imageHeight * 0.277777, imageWidth * 0.975, imageHeight * 0.277777);
	            ctx.bezierCurveTo(imageWidth * 0.975, imageHeight * 0.277777, imageWidth * 0.925, imageHeight * 0.277777, imageWidth * 0.925, imageHeight * 0.277777);
	            ctx.lineTo(imageWidth * 0.925, 0);
	            ctx.closePath();
	            //
	            grad = ctx.createLinearGradient(0, 0, 0, imageHeight);
	            grad.addColorStop(0, '#ffffff');
	            grad.addColorStop(1, '#7e7e7e');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // Main
	            ctx.beginPath();
	            var end = Math.max(imageWidth * 0.875 * (value / 100), Math.ceil(imageWidth * 0.01));
	            ctx.rect(imageWidth * 0.025, imageWidth * 0.025, end, imageHeight * 0.888888);
	            ctx.closePath();
	            var BORDER_FRACTIONS = [0, 0.4, 1];
	            var BORDER_COLORS = [new RgbaColor(177, 25, 2, 1),   // 0xB11902
	                                 new RgbaColor(219, 167, 21, 1), // 0xDBA715
	                                 new RgbaColor(121, 162, 75, 1)  // 0x79A24B
	                                ];
	            var border = new GradientWrapper(0, 100, BORDER_FRACTIONS, BORDER_COLORS);
	            ctx.fillStyle = border.getColorAt(value / 100).getRgbColor();
	            ctx.fill();
	            ctx.beginPath();
	            end = Math.max(end - imageWidth * 0.05, 0);
	            ctx.rect(imageWidth * 0.05, imageWidth * 0.05, end, imageHeight * 0.777777);
	            ctx.closePath();
	            var LIQUID_COLORS_DARK = [new RgbaColor(198, 39, 5, 1),   // 0xC62705
	                                      new RgbaColor(228, 189, 32, 1), // 0xE4BD20
	                                      new RgbaColor(163, 216, 102, 1) // 0xA3D866
	                                    ];
	
	            var LIQUID_COLORS_LIGHT = [new RgbaColor(246, 121, 48, 1),   // 0xF67930
	                                       new RgbaColor(246, 244, 157, 1),  // 0xF6F49D
	                                       new RgbaColor(223, 233, 86, 1)    // 0xDFE956
	                                      ];
	            var LIQUID_GRADIENT_FRACTIONS = [0, 0.4, 1];
	            var liquidDark = new GradientWrapper(0, 100, LIQUID_GRADIENT_FRACTIONS, LIQUID_COLORS_DARK);
	            var liquidLight = new GradientWrapper(0, 100, LIQUID_GRADIENT_FRACTIONS, LIQUID_COLORS_LIGHT);
	            grad = ctx.createLinearGradient(imageWidth * 0.05, 0, imageWidth * 0.875, 0);
	            grad.addColorStop(0, liquidDark.getColorAt(value / 100).getRgbColor());
	            grad.addColorStop(0.5, liquidLight.getColorAt(value / 100).getRgbColor());
	            grad.addColorStop(1, liquidDark.getColorAt(value / 100).getRgbColor());
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // Foreground
	            ctx.beginPath();
	            ctx.rect(imageWidth * 0.025, imageWidth * 0.025, imageWidth * 0.875, imageHeight * 0.444444);
	            ctx.closePath();
	            grad = ctx.createLinearGradient(imageWidth * 0.025, imageWidth * 0.025, imageWidth * 0.875, imageHeight * 0.444444);
	            grad.addColorStop(0, 'rgba(255, 255, 255, 0)');
	            grad.addColorStop(1, 'rgba(255, 255, 255, 0.8)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	        };
	
	        // **************   Public methods  ********************
	        this.setValue = function (newValue) {
	            newValue = (newValue < 0 ? 0 : (newValue > 100 ? 100 : newValue));
	            if (value !== newValue) {
	                value = newValue;
	                this.repaint();
	            }
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.repaint = function () {
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	            createBatteryImage(mainCtx, imageWidth, imageHeight, value);
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var stopwatch = function (canvas, parameters) {
	        parameters = parameters || {};
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            pointerColor = (undefined === parameters.pointerColor ? steelseries.ColorDef.BLACK : parameters.pointerColor),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.LIGHT_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),
	
	            minutePointerAngle = 0,
	            secondPointerAngle = 0,
	            tickTimer,
	            ANGLE_STEP = 6,
	            self = this,
	
	            start = 0,
	            currentMilliSeconds = 0,
	            minutes = 0,
	            seconds = 0,
	            milliSeconds = 0,
	            running = false,
	            lap = false,
	            // Get the canvas context
	            mainCtx = getCanvasContext(canvas),
	
	            imageWidth, imageHeight,
	            centerX, centerY,
	
	            smallPointerSize, smallPointerX_Offset, smallPointerY_Offset,
	
	            initialized = false,
	
	            // Buffer for the frame
	            frameBuffer, frameContext,
	
	            // Buffer for static background painting code
	            backgroundBuffer, backgroundContext,
	
	            // Buffer for small pointer image painting code
	            smallPointerBuffer, smallPointerContext,
	
	            // Buffer for large pointer image painting code
	            largePointerBuffer, largePointerContext,
	
	            // Buffer for static foreground painting code
	            foregroundBuffer, foregroundContext,
	
	            drawTickmarksImage = function (ctx, width, range, text_scale, text_dist_factor, x_offset, y_offset) {
	                var STD_FONT_SIZE = text_scale * width,
	                    STD_FONT = STD_FONT_SIZE + 'px ' + stdFontName,
	                    TEXT_WIDTH = width * 0.15,
	                    THIN_STROKE = 0.5,
	                    MEDIUM_STROKE = 1,
	                    THICK_STROKE = 1.5,
	                    TEXT_DISTANCE = text_dist_factor * width,
	                    MIN_LENGTH = Math.round(0.025 * width),
	                    MED_LENGTH = Math.round(0.035 * width),
	                    MAX_LENGTH = Math.round(0.045 * width),
	                    TEXT_COLOR = backgroundColor.labelColor.getRgbaColor(),
	                    TICK_COLOR = backgroundColor.labelColor.getRgbaColor(),
	                    CENTER = width / 2,
	                    // Create the ticks itself
	                    RADIUS = width * 0.4,
	                    innerPoint, outerPoint, textPoint,
	                    counter = 0,
	                    numberCounter = 0,
	                    tickCounter = 0,
	                    valueCounter, // value for the tickmarks
	                    sinValue = 0,
	                    cosValue = 0,
	                    alpha, // angle for the tickmarks
	                    ALPHA_START = -PI,
	                    ANGLE_STEPSIZE = TWO_PI / (range);
	
	                ctx.width = ctx.height = width;
	                ctx.save();
	                ctx.textAlign = 'center';
	                ctx.textBaseline = 'middle';
	                ctx.font = STD_FONT;
	
	                for (alpha = ALPHA_START, valueCounter = 0; valueCounter <= range + 1; alpha -= ANGLE_STEPSIZE * 0.1, valueCounter += 0.1) {
	                    ctx.lineWidth = THIN_STROKE;
	                    sinValue = Math.sin(alpha);
	                    cosValue = Math.cos(alpha);
	
	                    // tickmark every 2 units
	                    if (counter % 2 === 0) {
	                        //ctx.lineWidth = THIN_STROKE;
	                        innerPoint = [CENTER + (RADIUS - MIN_LENGTH) * sinValue + x_offset, CENTER + (RADIUS - MIN_LENGTH) * cosValue + y_offset];
	                        outerPoint = [CENTER + RADIUS * sinValue + x_offset, CENTER + RADIUS * cosValue + y_offset];
	                        // Draw ticks
	                        ctx.strokeStyle = TICK_COLOR;
	                        ctx.beginPath();
	                        ctx.moveTo(innerPoint[0], innerPoint[1]);
	                        ctx.lineTo(outerPoint[0], outerPoint[1]);
	                        ctx.closePath();
	                        ctx.stroke();
	                    }
	
	                    // Different tickmark every 10 units
	                    if (counter === 10 || counter === 0) {
	                        ctx.fillStyle = TEXT_COLOR;
	                        ctx.lineWidth = MEDIUM_STROKE;
	                        outerPoint = [CENTER + RADIUS * sinValue + x_offset, CENTER + RADIUS * cosValue + y_offset];
	                        textPoint  = [CENTER + (RADIUS - TEXT_DISTANCE) * sinValue + x_offset, CENTER + (RADIUS - TEXT_DISTANCE) * cosValue + y_offset];
	
	                        // Draw text
	                        if (numberCounter === 5) {
	                            if (valueCounter !== range) {
	                                if (Math.round(valueCounter) !== 60) {
	                                    ctx.fillText(Math.round(valueCounter), textPoint[0], textPoint[1], TEXT_WIDTH);
	                                }
	                            }
	                            ctx.lineWidth = THICK_STROKE;
	                            innerPoint = [CENTER + (RADIUS - MAX_LENGTH) * sinValue + x_offset, CENTER + (RADIUS - MAX_LENGTH) * cosValue + y_offset];
	                            numberCounter = 0;
	                        } else {
	                            ctx.lineWidth = MEDIUM_STROKE;
	                            innerPoint = [CENTER + (RADIUS - MED_LENGTH) * sinValue + x_offset, CENTER + (RADIUS - MED_LENGTH) * cosValue + y_offset];
	                        }
	
	                        // Draw ticks
	                        ctx.strokeStyle = TICK_COLOR;
	                        ctx.beginPath();
	                        ctx.moveTo(innerPoint[0], innerPoint[1]);
	                        ctx.lineTo(outerPoint[0], outerPoint[1]);
	                        ctx.closePath();
	                        ctx.stroke();
	
	                        counter = 0;
	                        tickCounter++;
	                        numberCounter++;
	                    }
	                    counter++;
	                }
	                ctx.restore();
	            },
	
	            drawLargePointer = function (ctx) {
	                var grad, radius;
	
	                ctx.save();
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.509345, imageWidth * 0.457943);
	                ctx.lineTo(imageWidth * 0.5, imageWidth * 0.102803);
	                ctx.lineTo(imageWidth * 0.490654, imageWidth * 0.457943);
	                ctx.bezierCurveTo(imageWidth * 0.490654, imageWidth * 0.457943, imageWidth * 0.490654, imageWidth * 0.457943, imageWidth * 0.490654, imageWidth * 0.457943);
	                ctx.bezierCurveTo(imageWidth * 0.471962, imageWidth * 0.462616, imageWidth * 0.457943, imageWidth * 0.481308, imageWidth * 0.457943, imageWidth * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.457943, imageWidth * 0.518691, imageWidth * 0.471962, imageWidth * 0.537383, imageWidth * 0.490654, imageWidth * 0.542056);
	                ctx.bezierCurveTo(imageWidth * 0.490654, imageWidth * 0.542056, imageWidth * 0.490654, imageWidth * 0.542056, imageWidth * 0.490654, imageWidth * 0.542056);
	                ctx.lineTo(imageWidth * 0.490654, imageWidth * 0.621495);
	                ctx.lineTo(imageWidth * 0.509345, imageWidth * 0.621495);
	                ctx.lineTo(imageWidth * 0.509345, imageWidth * 0.542056);
	                ctx.bezierCurveTo(imageWidth * 0.509345, imageWidth * 0.542056, imageWidth * 0.509345, imageWidth * 0.542056, imageWidth * 0.509345, imageWidth * 0.542056);
	                ctx.bezierCurveTo(imageWidth * 0.528037, imageWidth * 0.537383, imageWidth * 0.542056, imageWidth * 0.518691, imageWidth * 0.542056, imageWidth * 0.5);
	                ctx.bezierCurveTo(imageWidth * 0.542056, imageWidth * 0.481308, imageWidth * 0.528037, imageWidth * 0.462616, imageWidth * 0.509345, imageWidth * 0.457943);
	                ctx.bezierCurveTo(imageWidth * 0.509345, imageWidth * 0.457943, imageWidth * 0.509345, imageWidth * 0.457943, imageWidth * 0.509345, imageWidth * 0.457943);
	                ctx.closePath();
	                grad = ctx.createLinearGradient(0, 0, 0, imageWidth * 0.621495);
	                grad.addColorStop(0, pointerColor.medium.getRgbaColor());
	                grad.addColorStop(0.388888, pointerColor.medium.getRgbaColor());
	                grad.addColorStop(0.5, pointerColor.light.getRgbaColor());
	                grad.addColorStop(0.611111, pointerColor.medium.getRgbaColor());
	                grad.addColorStop(1, pointerColor.medium.getRgbaColor());
	                ctx.fillStyle = grad;
	                ctx.strokeStyle = pointerColor.dark.getRgbaColor();
	                ctx.fill();
	                ctx.stroke();
	                // Draw the rings
	                ctx.beginPath();
	                radius = imageWidth * 0.065420 / 2;
	                ctx.arc(centerX, centerY, radius, 0, TWO_PI);
	                grad = ctx.createLinearGradient(centerX - radius, centerX + radius, 0, centerX + radius);
	                grad.addColorStop(0, '#e6b35c');
	                grad.addColorStop(0.01, '#e6b35c');
	                grad.addColorStop(0.99, '#c48200');
	                grad.addColorStop(1, '#c48200');
	                ctx.fillStyle = grad;
	                ctx.closePath();
	                ctx.fill();
	                ctx.beginPath();
	                radius = imageWidth * 0.046728 / 2;
	                ctx.arc(centerX, centerY, radius, 0, TWO_PI);
	                grad = ctx.createRadialGradient(centerX, centerX, 0, centerX, centerX, radius);
	                grad.addColorStop(0, '#c5c5c5');
	                grad.addColorStop(0.19, '#c5c5c5');
	                grad.addColorStop(0.22, '#000000');
	                grad.addColorStop(0.8, '#000000');
	                grad.addColorStop(0.99, '#707070');
	                grad.addColorStop(1, '#707070');
	                ctx.fillStyle = grad;
	                ctx.closePath();
	                ctx.fill();
	                ctx.restore();
	            },
	
	            drawSmallPointer = function (ctx) {
	                var grad, radius;
	
	                ctx.save();
	                ctx.beginPath();
	                ctx.moveTo(imageWidth * 0.476635, imageWidth * 0.313084);
	                ctx.bezierCurveTo(imageWidth * 0.476635, imageWidth * 0.322429, imageWidth * 0.485981, imageWidth * 0.331775, imageWidth * 0.495327, imageWidth * 0.336448);
	                ctx.bezierCurveTo(imageWidth * 0.495327, imageWidth * 0.336448, imageWidth * 0.495327, imageWidth * 0.350467, imageWidth * 0.495327, imageWidth * 0.350467);
	                ctx.lineTo(imageWidth * 0.504672, imageWidth * 0.350467);
	                ctx.bezierCurveTo(imageWidth * 0.504672, imageWidth * 0.350467, imageWidth * 0.504672, imageWidth * 0.336448, imageWidth * 0.504672, imageWidth * 0.336448);
	                ctx.bezierCurveTo(imageWidth * 0.514018, imageWidth * 0.331775, imageWidth * 0.523364, imageWidth * 0.322429, imageWidth * 0.523364, imageWidth * 0.313084);
	                ctx.bezierCurveTo(imageWidth * 0.523364, imageWidth * 0.303738, imageWidth * 0.514018, imageWidth * 0.294392, imageWidth * 0.504672, imageWidth * 0.289719);
	                ctx.bezierCurveTo(imageWidth * 0.504672, imageWidth * 0.289719, imageWidth * 0.5, imageWidth * 0.200934, imageWidth * 0.5, imageWidth * 0.200934);
	                ctx.bezierCurveTo(imageWidth * 0.5, imageWidth * 0.200934, imageWidth * 0.495327, imageWidth * 0.289719, imageWidth * 0.495327, imageWidth * 0.289719);
	                ctx.bezierCurveTo(imageWidth * 0.485981, imageWidth * 0.294392, imageWidth * 0.476635, imageWidth * 0.303738, imageWidth * 0.476635, imageWidth * 0.313084);
	                ctx.closePath();
	                grad = ctx.createLinearGradient(0, 0, imageWidth, 0);
	                grad.addColorStop(0, pointerColor.medium.getRgbaColor());
	                grad.addColorStop(0.388888, pointerColor.medium.getRgbaColor());
	                grad.addColorStop(0.5, pointerColor.light.getRgbaColor());
	                grad.addColorStop(0.611111, pointerColor.medium.getRgbaColor());
	                grad.addColorStop(1, pointerColor.medium.getRgbaColor());
	                ctx.fillStyle = grad;
	                ctx.strokeStyle = pointerColor.dark.getRgbaColor();
	                ctx.fill();
	                ctx.stroke();
	                // Draw the rings
	                ctx.beginPath();
	                radius = imageWidth * 0.037383 / 2;
	                ctx.arc(centerX, smallPointerY_Offset + smallPointerSize / 2, radius, 0, TWO_PI);
	                ctx.fillStyle = '#C48200';
	                ctx.closePath();
	                ctx.fill();
	                ctx.beginPath();
	                radius = imageWidth * 0.028037 / 2;
	                ctx.arc(centerX, smallPointerY_Offset + smallPointerSize / 2, radius, 0, TWO_PI);
	                ctx.fillStyle = '#999999';
	                ctx.closePath();
	                ctx.fill();
	                ctx.beginPath();
	                radius = imageWidth * 0.018691 / 2;
	                ctx.arc(centerX, smallPointerY_Offset + smallPointerSize / 2, radius, 0, TWO_PI);
	                ctx.fillStyle = '#000000';
	                ctx.closePath();
	                ctx.fill();
	                ctx.restore();
	            },
	
	            calculateAngles = function () {
	                currentMilliSeconds = new Date().getTime() - start;
	                secondPointerAngle = (currentMilliSeconds * ANGLE_STEP / 1000);
	                minutePointerAngle = (secondPointerAngle % 10800) / 30;
	
	                minutes = (currentMilliSeconds / 60000) % 30;
	                seconds = (currentMilliSeconds / 1000) % 60;
	                milliSeconds = (currentMilliSeconds) % 1000;
	            },
	
	            init = function (parameters) {
	                parameters = parameters || {};
	                var drawFrame = (undefined === parameters.frame ? false : parameters.frame),
	                    drawBackground = (undefined === parameters.background ? false : parameters.background),
	                    drawPointers = (undefined === parameters.pointers ? false : parameters.pointers),
	                    drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	
	                initialized = true;
	
	                if (drawFrame && frameVisible) {
	                    drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	                }
	
	                if (drawBackground && backgroundVisible) {
	                    // Create background in background buffer (backgroundBuffer)
	                    drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	
	                    // Create custom layer in background buffer (backgroundBuffer)
	                    drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);
	
	                    drawTickmarksImage(backgroundContext, imageWidth, 60, 0.075, 0.1, 0, 0);
	                    drawTickmarksImage(backgroundContext, smallPointerSize, 30, 0.095, 0.13, smallPointerX_Offset, smallPointerY_Offset);
	                }
	                if (drawPointers) {
	                    drawLargePointer(largePointerContext);
	                    drawSmallPointer(smallPointerContext);
	                }
	
	                if (drawForeground && foregroundVisible) {
	                    drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);
	                }
	            },
	
	            resetBuffers = function (buffers) {
	                buffers = buffers || {};
	                var resetFrame = (undefined === buffers.frame ? false : buffers.frame),
	                    resetBackground = (undefined === buffers.background ? false : buffers.background),
	                    resetPointers = (undefined === buffers.pointers ? false : buffers.pointers),
	                    resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	                if (resetFrame) {
	                    frameBuffer.width = size;
	                    frameBuffer.height = size;
	                    frameContext = frameBuffer.getContext('2d');
	                }
	
	                if (resetBackground) {
	                    backgroundBuffer.width = size;
	                    backgroundBuffer.height = size;
	                    backgroundContext = backgroundBuffer.getContext('2d');
	                }
	
	                if (resetPointers) {
	                    smallPointerBuffer.width = size;
	                    smallPointerBuffer.height = size;
	                    smallPointerContext = smallPointerBuffer.getContext('2d');
	
	                    largePointerBuffer.width = size;
	                    largePointerBuffer.height = size;
	                    largePointerContext = largePointerBuffer.getContext('2d');
	                }
	
	                if (resetForeground) {
	                    foregroundBuffer.width = size;
	                    foregroundBuffer.height = size;
	                    foregroundContext = foregroundBuffer.getContext('2d');
	                }
	            },
	
	            tickTock = function () {
	                if (!lap) {
	                    calculateAngles();
	                    self.repaint();
	                }
	                if (running) {
	                    tickTimer = setTimeout(tickTock, 200);
	                }
	
	            };
	
	        //************************************ Public methods **************************************
	        // Returns true if the stopwatch is running
	        this.isRunning = function () {
	            return running;
	        };
	
	        // Starts the stopwatch
	        this.start = function () {
	            if (!running) {
	                running = true;
	                start = new Date().getTime() - currentMilliSeconds;
	                tickTock();
	            }
	            return this;
	        };
	
	        // Stops the stopwatch
	        this.stop = function () {
	            if (running) {
	                running = false;
	                clearTimeout(tickTimer);
	                //calculateAngles();
	            }
	            if (lap) {
	                lap = false;
	                calculateAngles();
	                this.repaint();
	            }
	            return this;
	        };
	
	        // Resets the stopwatch
	        this.reset = function () {
	            if (running) {
	                running = false;
	                lap = false;
	                clearTimeout(tickTimer);
	            }
	            start = new Date().getTime();
	            calculateAngles();
	            this.repaint();
	            return this;
	        };
	
	        // Laptimer, stop/restart stopwatch
	        this.lap = function () {
	            if (running && !lap) {
	                lap = true;
	            } else if (lap) {
	                lap = false;
	            }
	            return this;
	        };
	
	        this.getMeasuredTime = function () {
	            return (minutes + ':' + seconds + ':' + milliSeconds);
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({ background: true });
	            backgroundColor = newBackgroundColor;
	            init({ background: true });
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers({foreground: true});
	            foregroundType = newForegroundType;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setPointerColor = function (newPointerColor) {
	            resetBuffers({pointers: true});
	            pointerColor = newPointerColor;
	            init({pointers: true});
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      pointers: true,
	                      foreground: true});
	            }
	
	            mainCtx.clearRect(0, 0, imageWidth, imageHeight);
	
	            // Draw frame
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            if (backgroundVisible) {
	                mainCtx.drawImage(backgroundBuffer, 0, 0);
	            }
	
	            // have to draw to a rotated temporary image area so we can translate in
	            // absolute x, y values when drawing to main context
	            var shadowOffset = imageWidth * 0.006;
	
	            var rotationAngle = (minutePointerAngle + (2 * Math.sin(minutePointerAngle * RAD_FACTOR))) * RAD_FACTOR;
	            var secRotationAngle = (secondPointerAngle + (2 * Math.sin(secondPointerAngle * RAD_FACTOR))) * RAD_FACTOR;
	
	            // Draw the minute pointer
	            // Define rotation center
	            mainCtx.save();
	            mainCtx.translate(centerX, smallPointerY_Offset + smallPointerSize / 2);
	            mainCtx.rotate(rotationAngle);
	            mainCtx.translate(-centerX, -(smallPointerY_Offset + smallPointerSize / 2));
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset / 2;
	            mainCtx.shadowBlur = shadowOffset;
	            // Draw the pointer
	            mainCtx.drawImage(smallPointerBuffer, 0, 0);
	            mainCtx.restore();
	
	            // Draw the second pointer
	            // Define rotation center
	            mainCtx.save();
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate(secRotationAngle);
	            mainCtx.translate(-centerX, -centerY);
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset / 2;
	            mainCtx.shadowBlur = shadowOffset;
	            // Draw the pointer
	            mainCtx.drawImage(largePointerBuffer, 0, 0);
	            // Undo the translations & shadow settings
	            mainCtx.restore();
	
	            // Draw the foreground
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	        };
	
	        // Has a size been specified?
	        size = (size === 0 ? Math.min(mainCtx.canvas.width, mainCtx.canvas.height) : size);
	
	        // Set the size - also clears it
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        imageWidth = size;
	        imageHeight = size;
	
	        centerX = imageWidth / 2;
	        centerY = imageHeight / 2;
	
	        smallPointerSize = 0.285 * imageWidth;
	        smallPointerX_Offset = centerX - smallPointerSize / 2;
	        smallPointerY_Offset = 0.17 * imageWidth;
	
	        // Buffer for the frame
	        frameBuffer = createBuffer(size, size);
	        frameContext = frameBuffer.getContext('2d');
	
	        // Buffer for static background painting code
	        backgroundBuffer = createBuffer(size, size);
	        backgroundContext = backgroundBuffer.getContext('2d');
	
	        // Buffer for small pointer image painting code
	        smallPointerBuffer = createBuffer(size, size);
	        smallPointerContext = smallPointerBuffer.getContext('2d');
	
	        // Buffer for large pointer image painting code
	        largePointerBuffer = createBuffer(size, size);
	        largePointerContext = largePointerBuffer.getContext('2d');
	
	        // Buffer for static foreground painting code
	        foregroundBuffer = createBuffer(size, size);
	        foregroundContext = foregroundBuffer.getContext('2d');
	
	        // Visualize the component
	        start = new Date().getTime();
	        tickTock();
	
	        return this;
	    };
	
	    var altimeter = function (canvas, parameters) {
	        parameters = parameters || {};
	            // parameters
	        var size = (undefined === parameters.size ? 0 : parameters.size),
	            frameDesign = (undefined === parameters.frameDesign ? steelseries.FrameDesign.METAL : parameters.frameDesign),
	            frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),
	            backgroundColor = (undefined === parameters.backgroundColor ? steelseries.BackgroundColor.DARK_GRAY : parameters.backgroundColor),
	            backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),
	            knobType = (undefined === parameters.knobType ? steelseries.KnobType.METAL_KNOB : parameters.knobType),
	            knobStyle = (undefined === parameters.knobStyle ? steelseries.KnobStyle.BLACK : parameters.knobStyle),
	            lcdColor = (undefined === parameters.lcdColor ? steelseries.LcdColor.BLACK : parameters.lcdColor),
	            lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),
	            digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),
	            foregroundType = (undefined === parameters.foregroundType ? steelseries.ForegroundType.TYPE1 : parameters.foregroundType),
	            foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),
	            customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),
	            //
	            minValue = 0, maxValue = 10, value = minValue,
	            value100 = 0, value1000 = 0, value10000 = 0,
	            angleStep100ft, angleStep1000ft, angleStep10000ft,
	            tickLabelPeriod = 1, // Draw value at every 10th tickmark
	            tween,
	            repainting = false,
	            imageWidth, imageHeight,
	            centerX, centerY,
	            stdFont,
	            mainCtx = getCanvasContext(canvas),  // Get the canvas context
	            // Constants
	            TICKMARK_OFFSET = PI,
	            //
	            initialized = false,
	            // **************   Buffer creation  ********************
	            // Buffer for the frame
	            frameBuffer = createBuffer(size, size),
	            frameContext = frameBuffer.getContext('2d'),
	            // Buffer for the background
	            backgroundBuffer = createBuffer(size, size),
	            backgroundContext = backgroundBuffer.getContext('2d'),
	
	            lcdBuffer,
	
	            // Buffer for 10000ft pointer image painting code
	            pointer10000Buffer = createBuffer(size, size),
	            pointer10000Context = pointer10000Buffer.getContext('2d'),
	
	            // Buffer for 1000ft pointer image painting code
	            pointer1000Buffer = createBuffer(size, size),
	            pointer1000Context = pointer1000Buffer.getContext('2d'),
	
	            // Buffer for 100ft pointer image painting code
	            pointer100Buffer = createBuffer(size, size),
	            pointer100Context = pointer100Buffer.getContext('2d'),
	
	            // Buffer for static foreground painting code
	            foregroundBuffer = createBuffer(size, size),
	            foregroundContext = foregroundBuffer.getContext('2d');
	            // End of variables
	
	        // Get the canvas context and clear it
	        mainCtx.save();
	        // Has a size been specified?
	        size = (size === 0 ? Math.min(mainCtx.canvas.width, mainCtx.canvas.height) : size);
	
	        // Set the size
	        mainCtx.canvas.width = size;
	        mainCtx.canvas.height = size;
	
	        imageWidth = size;
	        imageHeight = size;
	
	        centerX = imageWidth / 2;
	        centerY = imageHeight / 2;
	
	        stdFont = Math.floor(imageWidth * 0.09) + 'px ' + stdFontName;
	
	        // **************   Image creation  ********************
	        var drawLcdText = function (value) {
	            mainCtx.save();
	            mainCtx.textAlign = 'right';
	            mainCtx.textBaseline = 'middle';
	            mainCtx.strokeStyle = lcdColor.textColor;
	            mainCtx.fillStyle = lcdColor.textColor;
	
	            if (lcdColor === steelseries.LcdColor.STANDARD || lcdColor === steelseries.LcdColor.STANDARD_GREEN) {
	                mainCtx.shadowColor = 'gray';
	                mainCtx.shadowOffsetX = imageWidth * 0.007;
	                mainCtx.shadowOffsetY = imageWidth * 0.007;
	                mainCtx.shadowBlur = imageWidth * 0.009;
	            }
	            if (digitalFont) {
	                mainCtx.font = Math.floor(imageWidth * 0.075) + 'px ' + lcdFontName;
	            } else {
	                mainCtx.font = Math.floor(imageWidth * 0.075) + 'px ' + stdFontName;
	            }
	            mainCtx.fillText(Math.round(value), (imageWidth + (imageWidth * 0.4)) / 2 - 4, imageWidth * 0.607, imageWidth * 0.4);
	            mainCtx.restore();
	        };
	
	        var drawTickmarksImage = function (ctx, freeAreaAngle, offset, minVal, maxVal, angleStep) {
	            var MEDIUM_STROKE = Math.max(imageWidth * 0.012, 2),
	                THIN_STROKE = Math.max(imageWidth * 0.007, 1.5),
	                TEXT_DISTANCE = imageWidth * 0.13,
	                MED_LENGTH = imageWidth * 0.05,
	                MAX_LENGTH = imageWidth * 0.07,
	                RADIUS = imageWidth * 0.4,
	                counter = 0,
	                tickCounter = 0,
	                sinValue = 0,
	                cosValue = 0,
	                alpha,          // angle for tickmarks
	                valueCounter,   // value for tickmarks
	                ALPHA_START = -offset - (freeAreaAngle / 2);
	
	            ctx.save();
	            ctx.textAlign = 'center';
	            ctx.textBaseline = 'middle';
	            ctx.font = stdFont;
	            ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	            ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	
	            for (alpha = ALPHA_START, valueCounter = 0; valueCounter <= 10; alpha -= angleStep * 0.1, valueCounter += 0.1) {
	                sinValue = Math.sin(alpha);
	                cosValue = Math.cos(alpha);
	
	                // tickmark every 2 units
	                if (counter % 2 === 0) {
	                    ctx.lineWidth = THIN_STROKE;
	                    // Draw ticks
	                    ctx.beginPath();
	                    ctx.moveTo(centerX + (RADIUS - MED_LENGTH) * sinValue, centerY + (RADIUS - MED_LENGTH) * cosValue);
	                    ctx.lineTo(centerX + RADIUS * sinValue, centerY + RADIUS * cosValue);
	                    ctx.closePath();
	                    ctx.stroke();
	                }
	
	                // Different tickmark every 10 units
	                if (counter === 10 || counter === 0) {
	                    ctx.lineWidth = MEDIUM_STROKE;
	
	                    // if gauge is full circle, avoid painting maxValue over minValue
	                    if (freeAreaAngle === 0) {
	                        if (Math.round(valueCounter) !== maxValue) {
	                            ctx.fillText(Math.round(valueCounter).toString(), centerX + (RADIUS - TEXT_DISTANCE) * sinValue, centerY + (RADIUS - TEXT_DISTANCE) * cosValue);
	                        }
	                    }
	                    counter = 0;
	                    tickCounter++;
	
	                    // Draw ticks
	                    ctx.beginPath();
	                    ctx.moveTo(centerX + (RADIUS - MAX_LENGTH) * sinValue, centerY + (RADIUS - MAX_LENGTH) * cosValue);
	                    ctx.lineTo(centerX + RADIUS * sinValue, centerY + RADIUS * cosValue);
	                    ctx.closePath();
	                    ctx.stroke();
	                }
	                counter++;
	            }
	            ctx.restore();
	        };
	
	        var draw100ftPointer = function (ctx, shadow) {
	            var grad;
	
	            if (shadow) {
	                ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
	                ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';
	            } else {
	                grad = ctx.createLinearGradient(0, imageHeight * 0.168224, 0, imageHeight * 0.626168);
	                grad.addColorStop(0, '#ffffff');
	                grad.addColorStop(0.31, '#ffffff');
	                grad.addColorStop(0.3101, '#ffffff');
	                grad.addColorStop(0.32, '#202020');
	                grad.addColorStop(1, '#202020');
	                ctx.fillStyle = grad;
	            }
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962);
	            ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.471962, imageWidth * 0.509345, imageHeight * 0.467289, imageWidth * 0.509345, imageHeight * 0.467289);
	            ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.200934);
	            ctx.lineTo(imageWidth * 0.5, imageHeight * 0.168224);
	            ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.200934);
	            ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.467289);
	            ctx.bezierCurveTo(imageWidth * 0.490654, imageHeight * 0.467289, imageWidth * 0.481308, imageHeight * 0.471962, imageWidth * 0.481308, imageHeight * 0.471962);
	            ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.467289, imageHeight * 0.490654, imageWidth * 0.467289, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.514018, imageWidth * 0.476635, imageHeight * 0.528037, imageWidth * 0.490654, imageHeight * 0.532710);
	            ctx.bezierCurveTo(imageWidth * 0.490654, imageHeight * 0.532710, imageWidth * 0.490654, imageHeight * 0.579439, imageWidth * 0.490654, imageHeight * 0.588785);
	            ctx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.593457, imageWidth * 0.481308, imageHeight * 0.598130, imageWidth * 0.481308, imageHeight * 0.607476);
	            ctx.bezierCurveTo(imageWidth * 0.481308, imageHeight * 0.616822, imageWidth * 0.490654, imageHeight * 0.626168, imageWidth * 0.5, imageHeight * 0.626168);
	            ctx.bezierCurveTo(imageWidth * 0.509345, imageHeight * 0.626168, imageWidth * 0.518691, imageHeight * 0.616822, imageWidth * 0.518691, imageHeight * 0.607476);
	            ctx.bezierCurveTo(imageWidth * 0.518691, imageHeight * 0.598130, imageWidth * 0.514018, imageHeight * 0.593457, imageWidth * 0.504672, imageHeight * 0.588785);
	            ctx.bezierCurveTo(imageWidth * 0.504672, imageHeight * 0.579439, imageWidth * 0.504672, imageHeight * 0.532710, imageWidth * 0.509345, imageHeight * 0.532710);
	            ctx.bezierCurveTo(imageWidth * 0.523364, imageHeight * 0.528037, imageWidth * 0.532710, imageHeight * 0.514018, imageWidth * 0.532710, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.490654, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.518691, imageHeight * 0.471962);
	            ctx.closePath();
	            ctx.fill();
	            ctx.restore();
	        };
	
	        var draw1000ftPointer = function (ctx) {
	            var grad;
	
	            grad = ctx.createLinearGradient(0, imageHeight * 0.401869, 0, imageHeight * 0.616822);
	            grad.addColorStop(0, '#ffffff');
	            grad.addColorStop(0.51, '#ffffff');
	            grad.addColorStop(0.52, '#ffffff');
	            grad.addColorStop(0.5201, '#202020');
	            grad.addColorStop(0.53, '#202020');
	            grad.addColorStop(1, '#202020');
	            ctx.fillStyle = grad;
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962);
	            ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.462616, imageWidth * 0.528037, imageHeight * 0.401869, imageWidth * 0.528037, imageHeight * 0.401869);
	            ctx.lineTo(imageWidth * 0.5, imageHeight * 0.331775);
	            ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.401869);
	            ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.401869, imageWidth * 0.485981, imageHeight * 0.462616, imageWidth * 0.481308, imageHeight * 0.471962);
	            ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.467289, imageHeight * 0.490654, imageWidth * 0.467289, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.514018, imageWidth * 0.476635, imageHeight * 0.528037, imageWidth * 0.490654, imageHeight * 0.532710);
	            ctx.bezierCurveTo(imageWidth * 0.490654, imageHeight * 0.532710, imageWidth * 0.462616, imageHeight * 0.574766, imageWidth * 0.462616, imageHeight * 0.593457);
	            ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.616822, imageWidth * 0.5, imageHeight * 0.612149, imageWidth * 0.5, imageHeight * 0.612149);
	            ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.612149, imageWidth * 0.532710, imageHeight * 0.616822, imageWidth * 0.537383, imageHeight * 0.593457);
	            ctx.bezierCurveTo(imageWidth * 0.537383, imageHeight * 0.574766, imageWidth * 0.509345, imageHeight * 0.532710, imageWidth * 0.509345, imageHeight * 0.532710);
	            ctx.bezierCurveTo(imageWidth * 0.523364, imageHeight * 0.528037, imageWidth * 0.532710, imageHeight * 0.514018, imageWidth * 0.532710, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.490654, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.518691, imageHeight * 0.471962);
	            ctx.closePath();
	            ctx.fill();
	            ctx.restore();
	        };
	
	        var draw10000ftPointer = function (ctx) {
	            ctx.fillStyle = '#ffffff';
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962);
	            ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.471962, imageWidth * 0.514018, imageHeight * 0.467289, imageWidth * 0.514018, imageHeight * 0.467289);
	            ctx.lineTo(imageWidth * 0.514018, imageHeight * 0.317757);
	            ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.303738);
	            ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.182242);
	            ctx.lineTo(imageWidth * 0.532710, imageHeight * 0.116822);
	            ctx.lineTo(imageWidth * 0.462616, imageHeight * 0.116822);
	            ctx.lineTo(imageWidth * 0.495327, imageHeight * 0.182242);
	            ctx.lineTo(imageWidth * 0.495327, imageHeight * 0.299065);
	            ctx.lineTo(imageWidth * 0.485981, imageHeight * 0.317757);
	            ctx.lineTo(imageWidth * 0.485981, imageHeight * 0.467289);
	            ctx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.467289, imageWidth * 0.485981, imageHeight * 0.471962, imageWidth * 0.481308, imageHeight * 0.471962);
	            ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.467289, imageHeight * 0.490654, imageWidth * 0.467289, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.518691, imageWidth * 0.481308, imageHeight * 0.532710, imageWidth * 0.5, imageHeight * 0.532710);
	            ctx.bezierCurveTo(imageWidth * 0.518691, imageHeight * 0.532710, imageWidth * 0.532710, imageHeight * 0.518691, imageWidth * 0.532710, imageHeight * 0.5);
	            ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.490654, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.518691, imageHeight * 0.471962);
	            ctx.closePath();
	            ctx.fill();
	        };
	
	        function calcAngleStep() {
	            angleStep100ft = (TWO_PI) / (maxValue - minValue);
	            angleStep1000ft = angleStep100ft / 10;
	            angleStep10000ft = angleStep1000ft / 10;
	        }
	
	        function calcValues() {
	            value100 = (value % 1000) / 100;
	            value1000 = (value % 10000) / 100;
	            value10000 = (value % 100000) / 100;
	        }
	
	        // **************   Initialization  ********************
	        // Draw all static painting code to background
	        var init = function (parameters) {
	            parameters = parameters || {};
	            // Parameters
	            var drawFrame = (undefined === parameters.frame ? false : parameters.frame),
	                drawBackground = (undefined === parameters.background ? false : parameters.background),
	                drawPointers = (undefined === parameters.pointers ? false : parameters.pointers),
	                drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);
	
	            initialized = true;
	
	            calcAngleStep();
	
	            // Create frame in frame buffer (backgroundBuffer)
	            if (drawFrame && frameVisible) {
	                drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);
	            }
	
	            if (drawBackground && backgroundVisible) {
	                // Create background in background buffer (backgroundBuffer)
	                drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);
	
	                // Create custom layer in background buffer (backgroundBuffer)
	                drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);
	
	                // Create tickmarks in background buffer (backgroundBuffer)
	                drawTickmarksImage(backgroundContext, 0, TICKMARK_OFFSET, 0, 10, angleStep100ft, tickLabelPeriod, 0, true, true, null);
	            }
	
	            // Create lcd background if selected in background buffer (backgroundBuffer)
	            if (drawBackground && lcdVisible) {
	                lcdBuffer = createLcdBackgroundImage(imageWidth * 0.4, imageHeight * 0.09, lcdColor);
	                backgroundContext.drawImage(lcdBuffer, (imageWidth - (imageWidth * 0.4)) / 2, imageHeight * 0.56);
	            }
	
	            if (drawPointers) {
	                // Create 100ft pointer in buffer
	                draw100ftPointer(pointer100Context, false);
	                // Create 1000ft pointer in buffer
	                draw1000ftPointer(pointer1000Context, false);
	                // Create 10000ft pointer in buffer
	                draw10000ftPointer(pointer10000Context, false);
	            }
	
	            if (drawForeground && foregroundVisible) {
	                drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, true, knobType, knobStyle);
	            }
	        };
	
	        var resetBuffers = function (buffers) {
	            buffers = buffers || {};
	            var resetFrame = (undefined === buffers.frame ? false : buffers.frame),
	                resetBackground = (undefined === buffers.background ? false : buffers.background),
	                resetPointers = (undefined === buffers.pointers ? false : buffers.pointers),
	                resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);
	
	            if (resetFrame) {
	                frameBuffer.width = size;
	                frameBuffer.height = size;
	                frameContext = frameBuffer.getContext('2d');
	            }
	
	            if (resetBackground) {
	                backgroundBuffer.width = size;
	                backgroundBuffer.height = size;
	                backgroundContext = backgroundBuffer.getContext('2d');
	            }
	
	            if (resetPointers) {
	                pointer100Buffer.width = size;
	                pointer100Buffer.height = size;
	                pointer100Context = pointer100Buffer.getContext('2d');
	
	                pointer1000Buffer.width = size;
	                pointer1000Buffer.height = size;
	                pointer1000Context = pointer1000Buffer.getContext('2d');
	
	                pointer10000Buffer.width = size;
	                pointer10000Buffer.height = size;
	                pointer10000Context = pointer10000Buffer.getContext('2d');
	            }
	
	            if (resetForeground) {
	                foregroundBuffer.width = size;
	                foregroundBuffer.height = size;
	                foregroundContext = foregroundBuffer.getContext('2d');
	            }
	        };
	
	        //************************************ Public methods **************************************
	        this.setValue = function (newValue) {
	            value = parseFloat(newValue);
	            this.repaint();
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.setValueAnimated = function (newValue, callback) {
	            newValue = parseFloat(newValue);
	            var targetValue = (newValue < minValue ? minValue : newValue),
	                gauge = this,
	                time;
	
	            if (value !== targetValue) {
	                if (undefined !==  tween && tween.isPlaying) {
	                    tween.stop();
	                }
	                // Allow 5 secs per 10,000ft
	                time = Math.max(Math.abs(value - targetValue) / 10000 * 5, 1);
	                tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);
	                //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);
	                tween.onMotionChanged = function (event) {
	                        value = event.target._pos;
	                        if (!repainting) {
	                            repainting = true;
	                            requestAnimFrame(gauge.repaint);
	                        }
	                    };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            return this;
	        };
	
	        this.setFrameDesign = function (newFrameDesign) {
	            resetBuffers({frame: true});
	            frameDesign = newFrameDesign;
	            init({frame: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setBackgroundColor = function (newBackgroundColor) {
	            resetBuffers({background: true,
	                          pointer: true       // type2 & 13 depend on background
	                });
	            backgroundColor = newBackgroundColor;
	            init({background: true,   // type2 & 13 depend on background
	                  pointer: true
	                });
	            this.repaint();
	            return this;
	        };
	
	        this.setForegroundType = function (newForegroundType) {
	            resetBuffers({foreground: true});
	            foregroundType = newForegroundType;
	            init({foreground: true});
	            this.repaint();
	            return this;
	        };
	
	        this.setLcdColor = function (newLcdColor) {
	            lcdColor = newLcdColor;
	            resetBuffers({background: true});
	            init({background: true});
	            this.repaint();
	            return this;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init({frame: true,
	                      background: true,
	                      led: true,
	                      pointers: true,
	                      foreground: true});
	            }
	
	            //mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            // Draw frame
	            if (frameVisible) {
	                mainCtx.drawImage(frameBuffer, 0, 0);
	            }
	
	            // Draw buffered image to visible canvas
	            mainCtx.drawImage(backgroundBuffer, 0, 0);
	
	            // Draw lcd display
	            if (lcdVisible) {
	                drawLcdText(value);
	            }
	
	            // re-calculate the spearate pointer values
	            calcValues();
	
	            var shadowOffset = imageWidth * 0.006 * 0.5;
	
	            mainCtx.save();
	            //Draw 10000ft pointer
	            // Define rotation center
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate((value10000 - minValue) * angleStep10000ft);
	            mainCtx.translate(-centerX, -centerY);
	            // Set the pointer shadow params
	            mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	            mainCtx.shadowBlur = shadowOffset * 2;
	            // Draw the pointer
	            mainCtx.drawImage(pointer10000Buffer, 0, 0);
	
	            shadowOffset = imageWidth * 0.006 * 0.75;
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	
	            //Draw 1000ft pointer
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate((value1000 - minValue) * angleStep1000ft - (value10000 - minValue) * angleStep10000ft);
	            mainCtx.translate(-centerX, -centerY);
	            mainCtx.drawImage(pointer1000Buffer, 0, 0);
	
	            shadowOffset = imageWidth * 0.006;
	            mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;
	
	            //Draw 100ft pointer
	            mainCtx.translate(centerX, centerY);
	            mainCtx.rotate((value100 - minValue) * angleStep100ft - (value1000 - minValue) * angleStep1000ft);
	            mainCtx.translate(-centerX, -centerY);
	            mainCtx.drawImage(pointer100Buffer, 0, 0);
	            mainCtx.restore();
	
	            //Draw the foregound
	            if (foregroundVisible) {
	                mainCtx.drawImage(foregroundBuffer, 0, 0);
	            }
	
	            repainting = false;
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var trafficlight = function (canvas, parameters) {
	        parameters = parameters || {};
	        var width = (undefined === parameters.width ? 0 : parameters.width),
	            height = (undefined === parameters.height ? 0 : parameters.height),
	            //
	            mainCtx = getCanvasContext(canvas),
	            prefHeight, imageWidth, imageHeight,
	            redOn = false,
	            yellowOn = false,
	            greenOn = false,
	            initialized = false,
	            housingBuffer = doc.createElement('canvas'),
	            housingCtx = housingBuffer.getContext('2d'),
	            lightGreenBuffer = doc.createElement('canvas'),
	            lightGreenCtx = lightGreenBuffer.getContext('2d'),
	            greenOnBuffer = doc.createElement('canvas'),
	            greenOnCtx = greenOnBuffer.getContext('2d'),
	            greenOffBuffer = doc.createElement('canvas'),
	            greenOffCtx = greenOffBuffer.getContext('2d'),
	            lightYellowBuffer = doc.createElement('canvas'),
	            lightYellowCtx = lightYellowBuffer.getContext('2d'),
	            yellowOnBuffer = doc.createElement('canvas'),
	            yellowOnCtx = yellowOnBuffer.getContext('2d'),
	            yellowOffBuffer = doc.createElement('canvas'),
	            yellowOffCtx = yellowOffBuffer.getContext('2d'),
	            lightRedBuffer = doc.createElement('canvas'),
	            lightRedCtx = lightRedBuffer.getContext('2d'),
	            redOnBuffer = doc.createElement('canvas'),
	            redOnCtx = redOnBuffer.getContext('2d'),
	            redOffBuffer = doc.createElement('canvas'),
	            redOffCtx = redOffBuffer.getContext('2d');
	            // End of variables
	
	        // Has a size been specified?
	        if (width === 0) {
	            width = mainCtx.canvas.width;
	        }
	        if (height === 0) {
	            height = mainCtx.canvas.height;
	        }
	
	        // Set the size - also clears the canvas
	        mainCtx.canvas.width = width;
	        mainCtx.canvas.height = height;
	
	        prefHeight = width < (height * 0.352517) ? (width * 2.836734) : height;
	        imageWidth = prefHeight * 0.352517;
	        imageHeight = prefHeight;
	
	        housingBuffer.width = imageWidth;
	        housingBuffer.height = imageHeight;
	
	        lightGreenBuffer.width = imageWidth;
	        lightGreenBuffer.height = imageHeight;
	
	        greenOnBuffer.width = imageWidth;
	        greenOnBuffer.height = imageHeight;
	
	        greenOffBuffer.width = imageWidth;
	        greenOffBuffer.height = imageHeight;
	
	        lightYellowBuffer.width = imageWidth;
	        lightYellowBuffer.height = imageHeight;
	
	        yellowOnBuffer.width = imageWidth;
	        yellowOnBuffer.height = imageHeight;
	
	        yellowOffBuffer.width = imageWidth;
	        yellowOffBuffer.height = imageHeight;
	
	        lightRedBuffer.width = imageWidth;
	        lightRedBuffer.height = imageHeight;
	
	        redOnBuffer.width = imageWidth;
	        redOnBuffer.height = imageHeight;
	
	        redOffBuffer.width = imageWidth;
	        redOffBuffer.height = imageHeight;
	
	        var drawHousing = function (ctx) {
	            var housingFill, housingFrontFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.107142 * imageWidth, 0);
	            ctx.lineTo(imageWidth - 0.107142 * imageWidth, 0);
	            ctx.quadraticCurveTo(imageWidth, 0, imageWidth, 0.107142 * imageWidth);
	            ctx.lineTo(imageWidth, imageHeight - 0.107142 * imageWidth);
	            ctx.quadraticCurveTo(imageWidth, imageHeight, imageWidth - 0.107142 * imageWidth, imageHeight);
	            ctx.lineTo(0.107142 * imageWidth, imageHeight);
	            ctx.quadraticCurveTo(0, imageHeight, 0, imageHeight - 0.107142 * imageWidth);
	            ctx.lineTo(0, 0.107142 * imageWidth);
	            ctx.quadraticCurveTo(0, 0, 0.107142 * imageWidth, imageHeight);
	            ctx.closePath();
	            housingFill = ctx.createLinearGradient(0.040816 * imageWidth, 0.007194 * imageHeight, 0.952101 * imageWidth, 0.995882 * imageHeight);
	            housingFill.addColorStop(0, 'rgb(152, 152, 154)');
	            housingFill.addColorStop(0.01, 'rgb(152, 152, 154)');
	            housingFill.addColorStop(0.09, '#333333');
	            housingFill.addColorStop(0.24, 'rgb(152, 152, 154)');
	            housingFill.addColorStop(0.55, 'rgb(31, 31, 31)');
	            housingFill.addColorStop(0.78, '#363636');
	            housingFill.addColorStop(0.98, '#000000');
	            housingFill.addColorStop(1, '#000000');
	            ctx.fillStyle = housingFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.030612 * imageWidth + 0.084183 * imageWidth, 0.010791 * imageHeight);
	            ctx.lineTo(0.030612 * imageWidth + 0.938775 * imageWidth - 0.084183 * imageWidth, 0.010791 * imageHeight);
	            ctx.quadraticCurveTo(0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight, 0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight + 0.084183 * imageWidth);
	            ctx.lineTo(0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight - 0.084183 * imageWidth);
	            ctx.quadraticCurveTo(0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight, 0.030612 * imageWidth + 0.938775 * imageWidth - 0.084183 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight);
	            ctx.lineTo(0.030612 * imageWidth + 0.084183 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight);
	            ctx.quadraticCurveTo(0.030612 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight, 0.030612 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight - 0.084183 * imageWidth);
	            ctx.lineTo(0.030612 * imageWidth, 0.010791 * imageHeight + 0.084183 * imageWidth);
	            ctx.quadraticCurveTo(0.030612 * imageWidth, 0.010791 * imageHeight, 0.030612 * imageWidth + 0.084183 * imageWidth, 0.010791 * imageHeight);
	            ctx.closePath();
	            housingFrontFill = ctx.createLinearGradient(-0.132653 * imageWidth, -0.053956 * imageHeight, 2.061408 * imageWidth, 0.667293 * imageHeight);
	            housingFrontFill.addColorStop(0, '#000000');
	            housingFrontFill.addColorStop(0.01, '#000000');
	            housingFrontFill.addColorStop(0.16, '#373735');
	            housingFrontFill.addColorStop(0.31, '#000000');
	            housingFrontFill.addColorStop(0.44, '#303030');
	            housingFrontFill.addColorStop(0.65, '#000000');
	            housingFrontFill.addColorStop(0.87, '#363636');
	            housingFrontFill.addColorStop(0.98, '#000000');
	            housingFrontFill.addColorStop(1, '#000000');
	            ctx.fillStyle = housingFrontFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.restore();
	        };
	
	        var drawLightGreen = function (ctx) {
	            var lightGreenFrameFill, lightGreenInnerFill, lightGreenEffectFill, lightGreenInnerShadowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.805755 * imageHeight, 0.397959 * imageWidth, 0, TWO_PI, false);
	            lightGreenFrameFill = ctx.createLinearGradient(0, 0.665467 * imageHeight, 0, 0.946043 * imageHeight);
	            lightGreenFrameFill.addColorStop(0, '#ffffff');
	            lightGreenFrameFill.addColorStop(0.05, 'rgb(204, 204, 204)');
	            lightGreenFrameFill.addColorStop(0.1, 'rgb(153, 153, 153)');
	            lightGreenFrameFill.addColorStop(0.17, '#666666');
	            lightGreenFrameFill.addColorStop(0.27, '#333333');
	            lightGreenFrameFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightGreenFrameFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1.083333, 1);
	            ctx.beginPath();
	            ctx.arc(0.461538 * imageWidth, 0.816546 * imageHeight, 0.367346 * imageWidth, 0, TWO_PI, false);
	            lightGreenInnerFill = ctx.createLinearGradient(0, 0.687050 * imageHeight, 0, 0.946043 * imageHeight);
	            lightGreenInnerFill.addColorStop(0, '#000000');
	            lightGreenInnerFill.addColorStop(0.35, '#040404');
	            lightGreenInnerFill.addColorStop(0.66, '#000000');
	            lightGreenInnerFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightGreenInnerFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);
	            lightGreenEffectFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.362244 * imageWidth);
	            lightGreenEffectFill.addColorStop(0, '#000000');
	            lightGreenEffectFill.addColorStop(0.88, '#000000');
	            lightGreenEffectFill.addColorStop(0.95, 'rgb(94, 94, 94)');
	            lightGreenEffectFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightGreenEffectFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);
	            lightGreenInnerShadowFill = ctx.createLinearGradient(0, 0.687050 * imageHeight, 0, 0.917266 * imageHeight);
	            lightGreenInnerShadowFill.addColorStop(0, '#000000');
	            lightGreenInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)');
	            ctx.fillStyle = lightGreenInnerShadowFill;
	            ctx.fill();
	            ctx.restore();
	            ctx.restore();
	        };
	
	        var drawGreenOn = function (ctx) {
	            var greenOnFill, greenOnGlowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            greenOnFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth);
	            greenOnFill.addColorStop(0, 'rgb(85, 185, 123)');
	            greenOnFill.addColorStop(1, 'rgb(0, 31, 0)');
	            ctx.fillStyle = greenOnFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0, 0.812949 * imageHeight);
	            ctx.bezierCurveTo(0, 0.910071 * imageHeight, 0.224489 * imageWidth, 0.989208 * imageHeight, 0.5 * imageWidth, 0.989208 * imageHeight);
	            ctx.bezierCurveTo(0.775510 * imageWidth, 0.989208 * imageHeight, imageWidth, 0.910071 * imageHeight, imageWidth, 0.809352 * imageHeight);
	            ctx.bezierCurveTo(0.908163 * imageWidth, 0.751798 * imageHeight, 0.704081 * imageWidth, 0.687050 * imageHeight, 0.5 * imageWidth, 0.687050 * imageHeight);
	            ctx.bezierCurveTo(0.285714 * imageWidth, 0.687050 * imageHeight, 0.081632 * imageWidth, 0.751798 * imageHeight, 0, 0.812949 * imageHeight);
	            ctx.closePath();
	            greenOnGlowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.515306 * imageWidth);
	            greenOnGlowFill.addColorStop(0, 'rgb(65, 187, 126)');
	            greenOnGlowFill.addColorStop(1, 'rgba(4, 37, 8, 0)');
	            ctx.fillStyle = greenOnGlowFill;
	            ctx.fill();
	            ctx.restore();
	            ctx.restore();
	        };
	
	        var drawGreenOff = function (ctx) {
	            var greenOffFill, greenOffInnerShadowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            greenOffFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth);
	            greenOffFill.addColorStop(0, 'rgba(0, 255, 0, 0.25)');
	            greenOffFill.addColorStop(1, 'rgba(0, 255, 0, 0.05)');
	            ctx.fillStyle = greenOffFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            greenOffInnerShadowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth);
	            greenOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)');
	            greenOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)');
	            greenOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)');
	            greenOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)');
	            greenOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.12)');
	            greenOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)');
	            ctx.fillStyle = greenOffInnerShadowFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat');
	            ctx.fill();
	
	            ctx.restore();
	        };
	
	        var drawLightYellow = function (ctx) {
	            var lightYellowFrameFill, lightYellowInnerFill, lightYellowEffectFill, lightYellowInnerShadowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.496402 * imageHeight, 0.397959 * imageWidth, 0, TWO_PI, false);
	            lightYellowFrameFill = ctx.createLinearGradient(0, 0.356115 * imageHeight, 0, 0.636690 * imageHeight);
	            lightYellowFrameFill.addColorStop(0, '#ffffff');
	            lightYellowFrameFill.addColorStop(0.05, 'rgb(204, 204, 204)');
	            lightYellowFrameFill.addColorStop(0.1, 'rgb(153, 153, 153)');
	            lightYellowFrameFill.addColorStop(0.17, '#666666');
	            lightYellowFrameFill.addColorStop(0.27, '#333333');
	            lightYellowFrameFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightYellowFrameFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1.083333, 1);
	            ctx.beginPath();
	            ctx.arc(0.461538 * imageWidth, 0.507194 * imageHeight, 0.367346 * imageWidth, 0, TWO_PI, false);
	            lightYellowInnerFill = ctx.createLinearGradient(0, 0.377697 * imageHeight, 0, 0.636690 * imageHeight);
	            lightYellowInnerFill.addColorStop(0, '#000000');
	            lightYellowInnerFill.addColorStop(0.35, '#040404');
	            lightYellowInnerFill.addColorStop(0.66, '#000000');
	            lightYellowInnerFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightYellowInnerFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);
	            lightYellowEffectFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.362244 * imageWidth);
	            lightYellowEffectFill.addColorStop(0, '#000000');
	            lightYellowEffectFill.addColorStop(0.88, '#000000');
	            lightYellowEffectFill.addColorStop(0.95, '#5e5e5e');
	            lightYellowEffectFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightYellowEffectFill;
	            ctx.fill();
	            ctx.restore();
	
	            //lIGHT_YELLOW_4_E_INNER_SHADOW_3_4
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);
	            lightYellowInnerShadowFill = ctx.createLinearGradient(0, 0.377697 * imageHeight, 0, 0.607913 * imageHeight);
	            lightYellowInnerShadowFill.addColorStop(0, '#000000');
	            lightYellowInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)');
	            ctx.fillStyle = lightYellowInnerShadowFill;
	            ctx.fill();
	            ctx.restore();
	            ctx.restore();
	        };
	
	        var drawYellowOn = function (ctx) {
	            var yellowOnFill, yellowOnGlowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            yellowOnFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth);
	            yellowOnFill.addColorStop(0, '#fed434');
	            yellowOnFill.addColorStop(1, '#82330c');
	            ctx.fillStyle = yellowOnFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0, 0.503597 * imageHeight);
	            ctx.bezierCurveTo(0, 0.600719 * imageHeight, 0.224489 * imageWidth, 0.679856 * imageHeight, 0.5 * imageWidth, 0.679856 * imageHeight);
	            ctx.bezierCurveTo(0.775510 * imageWidth, 0.679856 * imageHeight, imageWidth, 0.600719 * imageHeight, imageWidth, 0.5 * imageHeight);
	            ctx.bezierCurveTo(0.908163 * imageWidth, 0.442446 * imageHeight, 0.704081 * imageWidth, 0.377697 * imageHeight, 0.5 * imageWidth, 0.377697 * imageHeight);
	            ctx.bezierCurveTo(0.285714 * imageWidth, 0.377697 * imageHeight, 0.081632 * imageWidth, 0.442446 * imageHeight, 0, 0.503597 * imageHeight);
	            ctx.closePath();
	            yellowOnGlowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.515306 * imageWidth);
	            yellowOnGlowFill.addColorStop(0, '#fed434');
	            yellowOnGlowFill.addColorStop(1, 'rgba(130, 51, 12, 0)');
	            ctx.fillStyle = yellowOnGlowFill;
	            ctx.fill();
	            ctx.restore();
	            ctx.restore();
	        };
	
	        var drawYellowOff = function (ctx) {
	            var yellowOffFill, yellowOffInnerShadowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            yellowOffFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth);
	            yellowOffFill.addColorStop(0, 'rgba(255, 255, 0, 0.25)');
	            yellowOffFill.addColorStop(1, 'rgba(255, 255, 0, 0.05)');
	            ctx.fillStyle = yellowOffFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            yellowOffInnerShadowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth);
	            yellowOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)');
	            yellowOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)');
	            yellowOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)');
	            yellowOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)');
	            yellowOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.13)');
	            yellowOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)');
	            ctx.fillStyle = yellowOffInnerShadowFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat');
	            ctx.fill();
	
	            ctx.restore();
	        };
	
	        var drawLightRed = function (ctx) {
	            var lightRedFrameFill, lightRedInnerFill, lightRedEffectFill, lightRedInnerShadowFill;
	
	            ctx.save();
	
	            //lIGHT_RED_7_E_FRAME_0_1
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.187050 * imageHeight, 0.397959 * imageWidth, 0, TWO_PI, false);
	            lightRedFrameFill = ctx.createLinearGradient((0.5 * imageWidth), (0.046762 * imageHeight), ((0.500000) * imageWidth), ((0.327338) * imageHeight));
	            lightRedFrameFill.addColorStop(0, '#ffffff');
	            lightRedFrameFill.addColorStop(0.05, '#cccccc');
	            lightRedFrameFill.addColorStop(0.1, '#999999');
	            lightRedFrameFill.addColorStop(0.17, '#666666');
	            lightRedFrameFill.addColorStop(0.27, '#333333');
	            lightRedFrameFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightRedFrameFill;
	            ctx.fill();
	            ctx.restore();
	
	            //lIGHT_RED_7_E_INNER_CLIP_1_2
	            ctx.save();
	            ctx.scale(1.083333, 1);
	            ctx.beginPath();
	            ctx.arc(0.461538 * imageWidth, 0.197841 * imageHeight, 0.367346 * imageWidth, 0, TWO_PI, false);
	            lightRedInnerFill = ctx.createLinearGradient((0.5 * imageWidth), (0.068345 * imageHeight), ((0.500000) * imageWidth), ((0.327338) * imageHeight));
	            lightRedInnerFill.addColorStop(0, '#000000');
	            lightRedInnerFill.addColorStop(0.35, '#040404');
	            lightRedInnerFill.addColorStop(0.66, '#000000');
	            lightRedInnerFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightRedInnerFill;
	            ctx.fill();
	            ctx.restore();
	
	            //lIGHT_RED_7_E_LIGHT_EFFECT_2_3
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);
	            lightRedEffectFill = ctx.createRadialGradient((0.5) * imageWidth, ((0.190647) * imageHeight), 0, ((0.5) * imageWidth), ((0.190647) * imageHeight), 0.362244 * imageWidth);
	            lightRedEffectFill.addColorStop(0, '#000000');
	            lightRedEffectFill.addColorStop(0.88, '#000000');
	            lightRedEffectFill.addColorStop(0.95, '#5e5e5e');
	            lightRedEffectFill.addColorStop(1, '#010101');
	            ctx.fillStyle = lightRedEffectFill;
	            ctx.fill();
	            ctx.restore();
	
	            //lIGHT_RED_7_E_INNER_SHADOW_3_4
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);
	            lightRedInnerShadowFill = ctx.createLinearGradient((0.5 * imageWidth), (0.068345 * imageHeight), ((0.500000) * imageWidth), ((0.298561) * imageHeight));
	            lightRedInnerShadowFill.addColorStop(0, '#000000');
	            lightRedInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)');
	            ctx.fillStyle = lightRedInnerShadowFill;
	            ctx.fill();
	            ctx.restore();
	            ctx.restore();
	        };
	
	        var drawRedOn = function (ctx) {
	            var redOnFill, redOnGlowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            redOnFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth);
	            redOnFill.addColorStop(0, '#ff0000');
	            redOnFill.addColorStop(1, '#410004');
	            ctx.fillStyle = redOnFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0, 0.194244 * imageHeight);
	            ctx.bezierCurveTo(0, 0.291366 * imageHeight, 0.224489 * imageWidth, 0.370503 * imageHeight, 0.5 * imageWidth, 0.370503 * imageHeight);
	            ctx.bezierCurveTo(0.775510 * imageWidth, 0.370503 * imageHeight, imageWidth, 0.291366 * imageHeight, imageWidth, 0.190647 * imageHeight);
	            ctx.bezierCurveTo(0.908163 * imageWidth, 0.133093 * imageHeight, 0.704081 * imageWidth, 0.068345 * imageHeight, 0.5 * imageWidth, 0.068345 * imageHeight);
	            ctx.bezierCurveTo(0.285714 * imageWidth, 0.068345 * imageHeight, 0.081632 * imageWidth, 0.133093 * imageHeight, 0, 0.194244 * imageHeight);
	            ctx.closePath();
	            redOnGlowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.515306 * imageWidth);
	            redOnGlowFill.addColorStop(0, '#ff0000');
	            redOnGlowFill.addColorStop(1, 'rgba(118, 5, 1, 0)');
	            ctx.fillStyle = redOnGlowFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.restore();
	        };
	
	        var drawRedOff = function (ctx) {
	            var redOffFill, redOffInnerShadowFill;
	
	            ctx.save();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            redOffFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth);
	            redOffFill.addColorStop(0, 'rgba(255, 0, 0, 0.25)');
	            redOffFill.addColorStop(1, 'rgba(255, 0, 0, 0.05)');
	            ctx.fillStyle = redOffFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.save();
	            ctx.scale(1, 1);
	            ctx.beginPath();
	            ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);
	            redOffInnerShadowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth);
	            redOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)');
	            redOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)');
	            redOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)');
	            redOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)');
	            redOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.13)');
	            redOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)');
	            ctx.fillStyle = redOffInnerShadowFill;
	            ctx.fill();
	            ctx.restore();
	
	            ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat');
	            ctx.fill();
	
	            ctx.restore();
	        };
	
	        function drawToBuffer(width, height, drawFunction) {
	            var buffer = doc.createElement('canvas');
	            buffer.width = width;
	            buffer.height = height;
	            drawFunction(buffer.getContext('2d'));
	            return buffer;
	        }
	
	        var hatchBuffer = drawToBuffer(2, 2, function (ctx) {
	            ctx.save();
	            ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
	            ctx.beginPath();
	            ctx.lineTo(0, 0, 1, 0);
	            ctx.lineTo(0, 1, 0, 1);
	            ctx.stroke();
	            ctx.restore();
	        });
	
	        var init = function () {
	            initialized = true;
	
	            drawHousing(housingCtx);
	            drawLightGreen(lightGreenCtx);
	            drawGreenOn(greenOnCtx);
	            drawGreenOff(greenOffCtx);
	            drawLightYellow(lightYellowCtx);
	            drawYellowOn(yellowOnCtx);
	            drawYellowOff(yellowOffCtx);
	            drawLightRed(lightRedCtx);
	            drawRedOn(redOnCtx);
	            drawRedOff(redOffCtx);
	        };
	
	        // **************   P U B L I C   M E T H O D S   ********************************
	        this.setRedOn = function (on) {
	            redOn = !!on;
	            this.repaint();
	        };
	
	        this.isRedOn = function () {
	            return redOn;
	        };
	
	        this.setYellowOn = function (on) {
	            yellowOn = !!on;
	            this.repaint();
	        };
	
	        this.isYellowOn = function () {
	            return yellowOn;
	        };
	
	        this.setGreenOn = function (on) {
	            greenOn = !!on;
	            this.repaint();
	        };
	
	        this.isGreenOn = function () {
	            return greenOn;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            mainCtx.save();
	            mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);
	
	            // housing
	            mainCtx.drawImage(housingBuffer, 0, 0);
	
	            // Green light
	            mainCtx.drawImage(lightGreenBuffer, 0, 0);
	
	            if (greenOn) {
	                mainCtx.drawImage(greenOnBuffer, 0, 0);
	            }
	
	            mainCtx.drawImage(greenOffBuffer, 0, 0);
	
	            // Yellow light
	            mainCtx.drawImage(lightYellowBuffer, 0, 0);
	
	            if (yellowOn) {
	                mainCtx.drawImage(yellowOnBuffer, 0, 0);
	            }
	
	            mainCtx.drawImage(yellowOffBuffer, 0, 0);
	
	            // Red light
	            mainCtx.drawImage(lightRedBuffer, 0, 0);
	
	            if (redOn) {
	                mainCtx.drawImage(redOnBuffer, 0, 0);
	            }
	
	            mainCtx.drawImage(redOffBuffer, 0, 0);
	            mainCtx.restore();
	        };
	
	        // Visualize the component
	        this.repaint();
	
	        return this;
	    };
	
	    var lightbulb = function (canvas, parameters) {
	        parameters = parameters || {};
	        var mainCtx,
	            // parameters
	            width = (undefined === parameters.width ? 0 : parameters.width),
	            height = (undefined === parameters.height ? 0 : parameters.height),
	            glowColor = (undefined === parameters.glowColor ? '#ffff00' : parameters.glowColor),
	            //
	            size, imageWidth, imageHeight,
	            initialized = false,
	            lightOn = false,
	            alpha = 1,
	            offBuffer = doc.createElement('canvas'),
	            offCtx = offBuffer.getContext('2d'),
	            onBuffer = doc.createElement('canvas'),
	            onCtx = onBuffer.getContext('2d'),
	            bulbBuffer = doc.createElement('canvas'),
	            bulbCtx = bulbBuffer.getContext('2d');
	            // End of variables
	
	        // Get the canvas context and clear it
	        mainCtx = document.getElementById(canvas).getContext('2d');
	
	        // Has a size been specified?
	        if (width === 0) {
	            width = mainCtx.canvas.width;
	        }
	        if (height === 0) {
	            height = mainCtx.canvas.height;
	        }
	
	        // Get the size
	        mainCtx.canvas.width = width;
	        mainCtx.canvas.height = height;
	        size = width < height ? width : height;
	        imageWidth = size;
	        imageHeight = size;
	
	        function drawToBuffer(width, height, drawFunction) {
	            var buffer = doc.createElement('canvas');
	            buffer.width = width;
	            buffer.height = height;
	            drawFunction(buffer.getContext('2d'));
	            return buffer;
	        }
	
	        var getColorValues = function (color) {
	            var colorData,
	                lookupBuffer = drawToBuffer(1, 1, function (ctx) {
	                    ctx.fillStyle = color;
	                    ctx.beginPath();
	                    ctx.rect(0, 0, 1, 1);
	                    ctx.fill();
	                });
	
	            colorData = lookupBuffer.getContext('2d').getImageData(0, 0, 2, 2).data;
	            return [colorData[0], colorData[1], colorData[2]];
	        };
	
	        offBuffer.width = imageWidth;
	        offBuffer.height = imageHeight;
	
	        onBuffer.width = imageWidth;
	        onBuffer.height = imageHeight;
	
	        bulbBuffer.width = imageWidth;
	        bulbBuffer.height = imageHeight;
	
	        var drawOff = function (ctx) {
	            var glassOffFill;
	
	            ctx.save();
	
	            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.289473 * imageWidth, 0.438596 * imageHeight);
	            ctx.bezierCurveTo(0.289473 * imageWidth, 0.561403 * imageHeight, 0.385964 * imageWidth, 0.605263 * imageHeight, 0.385964 * imageWidth, 0.745614 * imageHeight);
	            ctx.bezierCurveTo(0.385964 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight);
	            ctx.bezierCurveTo(0.587719 * imageWidth, 0.605263 * imageHeight, 0.692982 * imageWidth, 0.561403 * imageHeight, 0.692982 * imageWidth, 0.438596 * imageHeight);
	            ctx.bezierCurveTo(0.692982 * imageWidth, 0.324561 * imageHeight, 0.605263 * imageWidth, 0.228070 * imageHeight, 0.5 * imageWidth, 0.228070 * imageHeight);
	            ctx.bezierCurveTo(0.385964 * imageWidth, 0.228070 * imageHeight, 0.289473 * imageWidth, 0.324561 * imageHeight, 0.289473 * imageWidth, 0.438596 * imageHeight);
	            ctx.closePath();
	            glassOffFill = ctx.createLinearGradient(0, 0.289473 * imageHeight, 0, 0.701754 * imageHeight);
	            glassOffFill.addColorStop(0, '#eeeeee');
	            glassOffFill.addColorStop(0.99, '#999999');
	            glassOffFill.addColorStop(1, '#999999');
	            ctx.fillStyle = glassOffFill;
	            ctx.fill();
	            ctx.lineCap = 'butt';
	            ctx.lineJoin = 'round';
	            ctx.lineWidth = 0.008771 * imageWidth;
	            ctx.strokeStyle = '#cccccc';
	            ctx.stroke();
	            ctx.restore();
	            ctx.restore();
	        };
	
	        var drawOn = function (ctx) {
	            var glassOnFill,
	                data = getColorValues(glowColor),
	                red = data[0],
	                green = data[1],
	                blue = data[2],
	                hsl = rgbToHsl(red, green, blue);
	
	            ctx.save();
	            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.289473 * imageWidth, 0.438596 * imageHeight);
	            ctx.bezierCurveTo(0.289473 * imageWidth, 0.561403 * imageHeight, 0.385964 * imageWidth, 0.605263 * imageHeight, 0.385964 * imageWidth, 0.745614 * imageHeight);
	            ctx.bezierCurveTo(0.385964 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight);
	            ctx.bezierCurveTo(0.587719 * imageWidth, 0.605263 * imageHeight, 0.692982 * imageWidth, 0.561403 * imageHeight, 0.692982 * imageWidth, 0.438596 * imageHeight);
	            ctx.bezierCurveTo(0.692982 * imageWidth, 0.324561 * imageHeight, 0.605263 * imageWidth, 0.228070 * imageHeight, 0.5 * imageWidth, 0.228070 * imageHeight);
	            ctx.bezierCurveTo(0.385964 * imageWidth, 0.228070 * imageHeight, 0.289473 * imageWidth, 0.324561 * imageHeight, 0.289473 * imageWidth, 0.438596 * imageHeight);
	            ctx.closePath();
	
	            glassOnFill = ctx.createLinearGradient(0, 0.289473 * imageHeight, 0, 0.701754 * imageHeight);
	
	            if (red === green && green === blue) {
	                glassOnFill.addColorStop(0, 'hsl(0, 60%, 0%)');
	                glassOnFill.addColorStop(1, 'hsl(0, 40%, 0%)');
	            } else {
	                glassOnFill.addColorStop(0, 'hsl(' + hsl[0] * 255 + ', ' + hsl[1] * 100 + '%, 70%)');
	                glassOnFill.addColorStop(1, 'hsl(' + hsl[0] * 255 + ', ' + hsl[1] * 100 + '%, 80%)');
	            }
	            ctx.fillStyle = glassOnFill;
	
	            // sets shadow properties
	            ctx.shadowOffsetX = 0;
	            ctx.shadowOffsetY = 0;
	            ctx.shadowBlur = 30;
	            ctx.shadowColor = glowColor;
	
	            ctx.fill();
	
	            ctx.lineCap = 'butt';
	            ctx.lineJoin = 'round';
	            ctx.lineWidth = 0.008771 * imageWidth;
	            ctx.strokeStyle = 'rgba(' + red + ', ' + green + ', ' + blue + ', 0.4)';
	            ctx.stroke();
	
	            ctx.restore();
	
	            ctx.restore();
	        };
	
	        var drawBulb = function (ctx) {
	            var highlight, winding, winding1, contactPlate;
	
	            ctx.save();
	
	            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
	
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.350877 * imageWidth, 0.333333 * imageHeight);
	            ctx.bezierCurveTo(0.350877 * imageWidth, 0.280701 * imageHeight, 0.412280 * imageWidth, 0.236842 * imageHeight, 0.5 * imageWidth, 0.236842 * imageHeight);
	            ctx.bezierCurveTo(0.578947 * imageWidth, 0.236842 * imageHeight, 0.640350 * imageWidth, 0.280701 * imageHeight, 0.640350 * imageWidth, 0.333333 * imageHeight);
	            ctx.bezierCurveTo(0.640350 * imageWidth, 0.385964 * imageHeight, 0.578947 * imageWidth, 0.429824 * imageHeight, 0.5 * imageWidth, 0.429824 * imageHeight);
	            ctx.bezierCurveTo(0.412280 * imageWidth, 0.429824 * imageHeight, 0.350877 * imageWidth, 0.385964 * imageHeight, 0.350877 * imageWidth, 0.333333 * imageHeight);
	            ctx.closePath();
	            highlight = ctx.createLinearGradient(0, 0.245614 * imageHeight, 0, 0.429824 * imageHeight);
	            highlight.addColorStop(0, '#ffffff');
	            highlight.addColorStop(0.99, 'rgba(255, 255, 255, 0)');
	            highlight.addColorStop(1, 'rgba(255, 255, 255, 0)');
	            ctx.fillStyle = highlight;
	            ctx.fill();
	            ctx.restore();
	
	            //winding
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.377192 * imageWidth, 0.745614 * imageHeight);
	            ctx.bezierCurveTo(0.377192 * imageWidth, 0.745614 * imageHeight, 0.429824 * imageWidth, 0.728070 * imageHeight, 0.491228 * imageWidth, 0.728070 * imageHeight);
	            ctx.bezierCurveTo(0.561403 * imageWidth, 0.728070 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.763157 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.780701 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.798245 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.815789 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.833333 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.850877 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.868421 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.885964 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.894736 * imageHeight);
	            ctx.bezierCurveTo(0.605263 * imageWidth, 0.894736 * imageHeight, 0.570175 * imageWidth, 0.956140 * imageHeight, 0.535087 * imageWidth, 0.991228 * imageHeight);
	            ctx.bezierCurveTo(0.526315 * imageWidth, 0.991228 * imageHeight, 0.517543 * imageWidth, imageHeight, 0.5 * imageWidth, imageHeight);
	            ctx.bezierCurveTo(0.482456 * imageWidth, imageHeight, 0.473684 * imageWidth, imageHeight, 0.464912 * imageWidth, 0.991228 * imageHeight);
	            ctx.bezierCurveTo(0.421052 * imageWidth, 0.947368 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.894736 * imageHeight);
	            ctx.lineTo(0.385964 * imageWidth, 0.885964 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.868421 * imageHeight);
	            ctx.lineTo(0.385964 * imageWidth, 0.850877 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.833333 * imageHeight);
	            ctx.lineTo(0.385964 * imageWidth, 0.815789 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.798245 * imageHeight);
	            ctx.lineTo(0.377192 * imageWidth, 0.789473 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.771929 * imageHeight);
	            ctx.lineTo(0.377192 * imageWidth, 0.763157 * imageHeight);
	            ctx.lineTo(0.377192 * imageWidth, 0.745614 * imageHeight);
	            ctx.closePath();
	            winding = ctx.createLinearGradient(0.473684 * imageWidth, 0.728070 * imageHeight, 0.484702 * imageWidth, 0.938307 * imageHeight);
	            winding.addColorStop(0, '#333333');
	            winding.addColorStop(0.04, '#d9dad6');
	            winding.addColorStop(0.19, '#e4e5e0');
	            winding.addColorStop(0.24, '#979996');
	            winding.addColorStop(0.31, '#fbffff');
	            winding.addColorStop(0.4, '#818584');
	            winding.addColorStop(0.48, '#f5f7f4');
	            winding.addColorStop(0.56, '#959794');
	            winding.addColorStop(0.64, '#f2f2f0');
	            winding.addColorStop(0.7, '#828783');
	            winding.addColorStop(0.78, '#fcfcfc');
	            winding.addColorStop(1, '#666666');
	            ctx.fillStyle = winding;
	            ctx.fill();
	            ctx.restore();
	
	            // winding
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.377192 * imageWidth, 0.745614 * imageHeight);
	            ctx.bezierCurveTo(0.377192 * imageWidth, 0.745614 * imageHeight, 0.429824 * imageWidth, 0.728070 * imageHeight, 0.491228 * imageWidth, 0.728070 * imageHeight);
	            ctx.bezierCurveTo(0.561403 * imageWidth, 0.728070 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.763157 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.780701 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.798245 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.815789 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.833333 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.850877 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.868421 * imageHeight);
	            ctx.lineTo(0.596491 * imageWidth, 0.885964 * imageHeight);
	            ctx.lineTo(0.605263 * imageWidth, 0.894736 * imageHeight);
	            ctx.bezierCurveTo(0.605263 * imageWidth, 0.894736 * imageHeight, 0.570175 * imageWidth, 0.956140 * imageHeight, 0.535087 * imageWidth, 0.991228 * imageHeight);
	            ctx.bezierCurveTo(0.526315 * imageWidth, 0.991228 * imageHeight, 0.517543 * imageWidth, imageHeight, 0.5 * imageWidth, imageHeight);
	            ctx.bezierCurveTo(0.482456 * imageWidth, imageHeight, 0.473684 * imageWidth, imageHeight, 0.464912 * imageWidth, 0.991228 * imageHeight);
	            ctx.bezierCurveTo(0.421052 * imageWidth, 0.947368 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.894736 * imageHeight);
	            ctx.lineTo(0.385964 * imageWidth, 0.885964 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.868421 * imageHeight);
	            ctx.lineTo(0.385964 * imageWidth, 0.850877 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.833333 * imageHeight);
	            ctx.lineTo(0.385964 * imageWidth, 0.815789 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.798245 * imageHeight);
	            ctx.lineTo(0.377192 * imageWidth, 0.789473 * imageHeight);
	            ctx.lineTo(0.394736 * imageWidth, 0.771929 * imageHeight);
	            ctx.lineTo(0.377192 * imageWidth, 0.763157 * imageHeight);
	            ctx.lineTo(0.377192 * imageWidth, 0.745614 * imageHeight);
	            ctx.closePath();
	            winding1 = ctx.createLinearGradient(0.377192 * imageWidth, 0.789473 * imageHeight, 0.605263 * imageWidth, 0.789473 * imageHeight);
	            winding1.addColorStop(0, 'rgba(0, 0, 0, 0.4)');
	            winding1.addColorStop(0.15, 'rgba(0, 0, 0, 0.32)');
	            winding1.addColorStop(0.85, 'rgba(0, 0, 0, 0.33)');
	            winding1.addColorStop(1, 'rgba(0, 0, 0, 0.4)');
	            ctx.fillStyle = winding1;
	            ctx.fill();
	            ctx.restore();
	
	            // contact plate
	            ctx.save();
	            ctx.beginPath();
	            ctx.moveTo(0.421052 * imageWidth, 0.947368 * imageHeight);
	            ctx.bezierCurveTo(0.438596 * imageWidth, 0.956140 * imageHeight, 0.447368 * imageWidth, 0.973684 * imageHeight, 0.464912 * imageWidth, 0.991228 * imageHeight);
	            ctx.bezierCurveTo(0.473684 * imageWidth, imageHeight, 0.482456 * imageWidth, imageHeight, 0.5 * imageWidth, imageHeight);
	            ctx.bezierCurveTo(0.517543 * imageWidth, imageHeight, 0.526315 * imageWidth, 0.991228 * imageHeight, 0.535087 * imageWidth, 0.991228 * imageHeight);
	            ctx.bezierCurveTo(0.543859 * imageWidth, 0.982456 * imageHeight, 0.561403 * imageWidth, 0.956140 * imageHeight, 0.578947 * imageWidth, 0.947368 * imageHeight);
	            ctx.bezierCurveTo(0.552631 * imageWidth, 0.938596 * imageHeight, 0.526315 * imageWidth, 0.938596 * imageHeight, 0.5 * imageWidth, 0.938596 * imageHeight);
	            ctx.bezierCurveTo(0.473684 * imageWidth, 0.938596 * imageHeight, 0.447368 * imageWidth, 0.938596 * imageHeight, 0.421052 * imageWidth, 0.947368 * imageHeight);
	            ctx.closePath();
	            contactPlate = ctx.createLinearGradient(0, 0.938596 * imageHeight, 0, imageHeight);
	            contactPlate.addColorStop(0, '#050a06');
	            contactPlate.addColorStop(0.61, '#070602');
	            contactPlate.addColorStop(0.71, '#999288');
	            contactPlate.addColorStop(0.83, '#010101');
	            contactPlate.addColorStop(1, '#000000');
	            ctx.fillStyle = contactPlate;
	            ctx.fill();
	            ctx.restore();
	            ctx.restore();
	        };
	
	        var clearCanvas = function (ctx) {
	            // Store the current transformation matrix
	            ctx.save();
	
	            // Use the identity matrix while clearing the canvas
	            ctx.setTransform(1, 0, 0, 1, 0, 0);
	            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
	
	            // Restore the transform
	            ctx.restore();
	        };
	
	        var init = function () {
	            initialized = true;
	            drawOff(offCtx);
	            drawOn(onCtx);
	            drawBulb(bulbCtx);
	        };
	
	        // **************   P U B L I C   M E T H O D S   ********************************
	        this.setOn = function (on) {
	            lightOn = !!on;
	            this.repaint();
	            return this;
	        };
	
	        this.isOn = function () {
	            return lightOn;
	        };
	
	        this.setAlpha = function (a) {
	            alpha = a;
	            this.repaint();
	            return this;
	        };
	
	        this.getAlpha = function () {
	            return alpha;
	        };
	
	        this.setGlowColor = function (color) {
	            glowColor = color;
	            init();
	            this.repaint();
	            return this;
	        };
	
	        this.getGlowColor = function () {
	            return glowColor;
	        };
	
	        // Component visualization
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            clearCanvas(mainCtx);
	
	            mainCtx.save();
	
	            mainCtx.drawImage(offBuffer, 0, 0);
	
	            mainCtx.globalAlpha = alpha;
	            if (lightOn) {
	                mainCtx.drawImage(onBuffer, 0, 0);
	            }
	            mainCtx.globalAlpha = 1;
	            mainCtx.drawImage(bulbBuffer, 0, 0);
	            mainCtx.restore();
	        };
	
	        this.repaint();
	
	        return this;
	    };
	
	    var odometer = function (canvas, parameters) {
	        parameters = parameters || {};
	
	        // parameters
	        var _context = (undefined === parameters._context ? null : parameters._context),  // If component used internally by steelseries
	            height = (undefined === parameters.height ? 0 : parameters.height),
	            digits = (undefined === parameters.digits ? 6 : parameters.digits),
	            decimals = (undefined === parameters.decimals ? 1 : parameters.decimals),
	            decimalBackColor = (undefined === parameters.decimalBackColor ? '#F0F0F0' : parameters.decimalBackColor),
	            decimalForeColor = (undefined === parameters.decimalForeColor ? '#F01010' : parameters.decimalForeColor),
	            font = (undefined === parameters.font ? 'sans-serif' : parameters.font),
	            value = (undefined === parameters.value ? 0 : parameters.value),
	            valueBackColor = (undefined === parameters.valueBackColor ? '#050505' : parameters.valueBackColor),
	            valueForeColor = (undefined === parameters.valueForeColor ? '#F8F8F8' : parameters.valueForeColor),
	            wobbleFactor = (undefined === parameters.wobbleFactor ? 0.07 : parameters.wobbleFactor),
	            //
	            initialized = false,
	            tween, ctx,
	            repainting = false,
	            digitHeight, digitWidth, stdFont,
	            width, columnHeight, verticalSpace, zeroOffset,
	            wobble = [],
	            //buffers
	            backgroundBuffer, backgroundContext,
	            foregroundBuffer, foregroundContext,
	            digitBuffer, digitContext,
	            decimalBuffer, decimalContext;
	            // End of variables
	
	        // Get the canvas context and clear it
	        if (_context) {
	            ctx = _context;
	        } else {
	            ctx = getCanvasContext(canvas);
	        }
	
	        // Has a height been specified?
	        if (height === 0) {
	            height = ctx.canvas.height;
	        }
	
	        // Cannot display negative values yet
	        if (value < 0) {
	            value = 0;
	        }
	
	        digitHeight = Math.floor(height * 0.85);
	        stdFont = '600 ' + digitHeight + 'px ' + font;
	
	        digitWidth = Math.floor(height * 0.68);
	        width = digitWidth * (digits + decimals);
	        columnHeight = digitHeight * 11;
	        verticalSpace = columnHeight / 12;
	        zeroOffset = verticalSpace * 0.81;
	
	        // Resize and clear the main context
	        ctx.canvas.width = width;
	        ctx.canvas.height = height;
	
	        // Create buffers
	        backgroundBuffer = createBuffer(width, height);
	        backgroundContext = backgroundBuffer.getContext('2d');
	
	        foregroundBuffer = createBuffer(width, height);
	        foregroundContext = foregroundBuffer.getContext('2d');
	
	        digitBuffer = createBuffer(digitWidth, columnHeight * 1.1);
	        digitContext = digitBuffer.getContext('2d');
	
	        decimalBuffer = createBuffer(digitWidth, columnHeight * 1.1);
	        decimalContext = decimalBuffer.getContext('2d');
	
	        function init() {
	            var grad, i;
	
	            initialized = true;
	
	            // Create the foreground
	            foregroundContext.rect(0, 0, width, height);
	            grad = foregroundContext.createLinearGradient(0, 0, 0, height);
	            grad.addColorStop(0, 'rgba(0, 0, 0, 1)');
	            grad.addColorStop(0.1, 'rgba(0, 0, 0, 0.4)');
	            grad.addColorStop(0.33, 'rgba(255, 255, 255, 0.45)');
	            grad.addColorStop(0.46, 'rgba(255, 255, 255, 0)');
	            grad.addColorStop(0.9, 'rgba(0, 0, 0, 0.4)');
	            grad.addColorStop(1, 'rgba(0, 0, 0, 1)');
	            foregroundContext.fillStyle = grad;
	            foregroundContext.fill();
	
	            // Create a digit column
	            // background
	            digitContext.rect(0, 0, digitWidth, columnHeight * 1.1);
	            digitContext.fillStyle = valueBackColor;
	            digitContext.fill();
	            // edges
	            digitContext.strokeStyle = '#f0f0f0';
	            digitContext.lineWidth = '1px'; //height * 0.1 + 'px';
	            digitContext.moveTo(0, 0);
	            digitContext.lineTo(0, columnHeight * 1.1);
	            digitContext.stroke();
	            digitContext.strokeStyle = '#202020';
	            digitContext.moveTo(digitWidth, 0);
	            digitContext.lineTo(digitWidth, columnHeight * 1.1);
	            digitContext.stroke();
	            // numerals
	            digitContext.textAlign = 'center';
	            digitContext.textBaseline = 'middle';
	            digitContext.font = stdFont;
	            digitContext.fillStyle = valueForeColor;
	            // put the digits 901234567890 vertically into the buffer
	            for (i = 9; i < 21; i++) {
	                digitContext.fillText(i % 10, digitWidth * 0.5, verticalSpace * (i - 9) + verticalSpace / 2);
	            }
	
	            // Create a decimal column
	            if (decimals > 0) {
	                // background
	                decimalContext.rect(0, 0, digitWidth, columnHeight * 1.1);
	                decimalContext.fillStyle = decimalBackColor;
	                decimalContext.fill();
	                // edges
	                decimalContext.strokeStyle = '#f0f0f0';
	                decimalContext.lineWidth = '1px'; //height * 0.1 + 'px';
	                decimalContext.moveTo(0, 0);
	                decimalContext.lineTo(0, columnHeight * 1.1);
	                decimalContext.stroke();
	                decimalContext.strokeStyle = '#202020';
	                decimalContext.moveTo(digitWidth, 0);
	                decimalContext.lineTo(digitWidth, columnHeight * 1.1);
	                decimalContext.stroke();
	                // numerals
	                decimalContext.textAlign = 'center';
	                decimalContext.textBaseline = 'middle';
	                decimalContext.font = stdFont;
	                decimalContext.fillStyle = decimalForeColor;
	                // put the digits 901234567890 vertically into the buffer
	                for (i = 9; i < 21; i++) {
	                    decimalContext.fillText(i % 10, digitWidth * 0.5, verticalSpace * (i - 9) + verticalSpace / 2);
	                }
	            }
	            // wobble factors
	            for (i = 0; i < (digits + decimals); i++) {
	                wobble[i] = Math.random() * wobbleFactor * height - wobbleFactor * height / 2;
	            }
	
	        }
	
	        function drawDigits() {
	            var pos = 1,
	            val = value, i, num, numb, frac, prevNum;
	
	            // do not use Math.pow() - rounding errors!
	            for (i = 0; i < decimals; i++) {
	                val *= 10;
	            }
	
	            numb = Math.floor(val);
	            frac = val - numb;
	            numb = String(numb);
	            prevNum = 9;
	
	            for (i = 0; i < decimals + digits; i++) {
	                num = +numb.substring(numb.length - i - 1, numb.length - i) || 0;
	                if (prevNum !== 9) {
	                    frac = 0;
	                }
	                if (i < decimals) {
	                    backgroundContext.drawImage(decimalBuffer, width - digitWidth * pos, -(verticalSpace * (num + frac) + zeroOffset + wobble[i]));
	                } else {
	                    backgroundContext.drawImage(digitBuffer, width - digitWidth * pos, -(verticalSpace * (num + frac) + zeroOffset + wobble[i]));
	                }
	                pos++;
	                prevNum = num;
	            }
	        }
	
	        this.setValueAnimated = function (newVal, callback) {
	            var gauge = this;
	            newVal = parseFloat(newVal);
	
	            if (newVal < 0) {
	                newVal = 0;
	            }
	            if (value !== newVal) {
	                if (undefined !== tween && tween.isPlaying) {
	                    tween.stop();
	                }
	
	                tween = new Tween({}, '', Tween.strongEaseOut, value, newVal, 2);
	                tween.onMotionChanged = function (event) {
	                    value = event.target._pos;
	                    if (!repainting) {
	                        repainting = true;
	                        requestAnimFrame(gauge.repaint);
	                    }
	                };
	
	                // do we have a callback function to process?
	                if (callback && typeof(callback) === "function") {
	                    tween.onMotionFinished = callback;
	                }
	
	                tween.start();
	            }
	            this.repaint();
	            return this;
	        };
	
	        this.setValue = function (newVal) {
	            value = parseFloat(newVal);
	            if (value < 0) {
	                value = 0;
	            }
	            this.repaint();
	            return this;
	        };
	
	        this.getValue = function () {
	            return value;
	        };
	
	        this.repaint = function () {
	            if (!initialized) {
	                init();
	            }
	
	            // draw digits
	            drawDigits();
	
	            // draw the foreground
	            backgroundContext.drawImage(foregroundBuffer, 0, 0);
	
	            // paint back to the main context
	            ctx.drawImage(backgroundBuffer, 0, 0);
	
	            repainting = false;
	        };
	
	        this.repaint();
	    };
	
	    //************************************  I M A G E   -   F U N C T I O N S  *****************************************
	
	    var drawRoseImage = function (ctx, centerX, centerY, imageWidth, imageHeight, backgroundColor) {
	        var fill = true,
	            i, grad,
	            symbolColor = backgroundColor.symbolColor.getRgbaColor();
	
	        ctx.save();
	        ctx.lineWidth = 1;
	        ctx.fillStyle = symbolColor;
	        ctx.strokeStyle = symbolColor;
	        ctx.translate(centerX, centerY);
	        // broken ring
	        for (i = 0; i < 360; i += 15) {
	            fill = !fill;
	
	            ctx.beginPath();
	            ctx.arc(0, 0, imageWidth * 0.26, i * RAD_FACTOR, (i + 15) * RAD_FACTOR, false);
	            ctx.arc(0, 0, imageWidth * 0.23, (i + 15) * RAD_FACTOR, i * RAD_FACTOR, true);
	            ctx.closePath();
	            if (fill) {
	                ctx.fill();
	            }
	            ctx.stroke();
	        }
	
	        ctx.translate(-centerX, -centerY);
	
	/*
	        // PATH1_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.560747, imageHeight * 0.584112);
	        ctx.lineTo(imageWidth * 0.640186, imageHeight * 0.644859);
	        ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.560747);
	        ctx.lineTo(imageWidth * 0.560747, imageHeight * 0.584112);
	        ctx.closePath();
	        ctx.fillStyle = fillColorPath;
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH2_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.411214, imageHeight * 0.560747);
	        ctx.lineTo(imageWidth * 0.355140, imageHeight * 0.644859);
	        ctx.lineTo(imageWidth * 0.439252, imageHeight * 0.588785);
	        ctx.lineTo(imageWidth * 0.411214, imageHeight * 0.560747);
	        ctx.closePath();
	        ctx.fillStyle = fillColorPath;
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH3_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.584112, imageHeight * 0.443925);
	        ctx.lineTo(imageWidth * 0.640186, imageHeight * 0.359813);
	        ctx.lineTo(imageWidth * 0.560747, imageHeight * 0.420560);
	        ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.443925);
	        ctx.closePath();
	        ctx.fillStyle = fillColorPath;
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH4_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.439252, imageHeight * 0.415887);
	        ctx.lineTo(imageWidth * 0.355140, imageHeight * 0.359813);
	        ctx.lineTo(imageWidth * 0.415887, imageHeight * 0.439252);
	        ctx.lineTo(imageWidth * 0.439252, imageHeight * 0.415887);
	        ctx.closePath();
	        ctx.fillStyle = fillColorPath;
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH5_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.397196);
	        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.196261);
	        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.397196);
	        ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.397196);
	        ctx.closePath();
	        var PATH5_2_GRADIENT = ctx.createLinearGradient(0.476635 * imageWidth, 0, 0.518691 * imageWidth, 0);
	        PATH5_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');
	        PATH5_2_GRADIENT.addColorStop(0.48, 'rgb(222, 223, 218)');
	        PATH5_2_GRADIENT.addColorStop(0.49, backgroundColor.symbolColor.getRgbaColor());
	        PATH5_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());
	        ctx.fillStyle = PATH5_2_GRADIENT;
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH6_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.471962, imageHeight * 0.607476);
	        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.813084);
	        ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.607476);
	        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.607476);
	        ctx.closePath();
	        var PATH6_2_GRADIENT = ctx.createLinearGradient(0.518691 * imageWidth, 0, (0.518691 + -0.037383) * imageWidth, 0);
	        PATH6_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');
	        PATH6_2_GRADIENT.addColorStop(0.56, 'rgb(222, 223, 218)');
	        PATH6_2_GRADIENT.addColorStop(0.5601, backgroundColor.symbolColor.getRgbaColor());
	        PATH6_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());
	        ctx.fillStyle = PATH6_2_GRADIENT;
	        ctx.lineWidth = 1;
	        ctx.lineCap = 'square';
	        ctx.lineJoin = 'miter';
	        ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH7_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.602803, imageHeight * 0.528037);
	        ctx.lineTo(imageWidth * 0.803738, imageHeight * 0.5);
	        ctx.lineTo(imageWidth * 0.602803, imageHeight * 0.476635);
	        ctx.lineTo(imageWidth * 0.602803, imageHeight * 0.528037);
	        ctx.closePath();
	        var PATH7_2_GRADIENT = ctx.createLinearGradient(0, 0.485981 * imageHeight, 0, 0.514018 * imageHeight);
	        PATH7_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');
	        PATH7_2_GRADIENT.addColorStop(0.48, 'rgb(222, 223, 218)');
	        PATH7_2_GRADIENT.addColorStop(0.49, backgroundColor.symbolColor.getRgbaColor());
	        PATH7_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());
	        ctx.fillStyle = PATH7_2_GRADIENT;
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH8_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.392523, imageHeight * 0.476635);
	        ctx.lineTo(imageWidth * 0.191588, imageHeight * 0.5);
	        ctx.lineTo(imageWidth * 0.392523, imageHeight * 0.528037);
	        ctx.lineTo(imageWidth * 0.392523, imageHeight * 0.476635);
	        ctx.closePath();
	        var PATH8_2_GRADIENT = ctx.createLinearGradient(0, 0.528037 * imageHeight, 0, 0.485981 * imageHeight);
	        PATH8_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');
	        PATH8_2_GRADIENT.addColorStop(0.52, 'rgb(222, 223, 218)');
	        PATH8_2_GRADIENT.addColorStop(0.53, backgroundColor.symbolColor.getRgbaColor());
	        PATH8_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());
	        ctx.fillStyle = PATH8_2_GRADIENT;
	        ctx.fill();
	        ctx.stroke();
	
	        // PATH9_2
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.406542, imageHeight * 0.504672);
	        ctx.bezierCurveTo(imageWidth * 0.406542, imageHeight * 0.453271, imageWidth * 0.448598, imageHeight * 0.411214, imageWidth * 0.5, imageHeight * 0.411214);
	        ctx.bezierCurveTo(imageWidth * 0.546728, imageHeight * 0.411214, imageWidth * 0.588785, imageHeight * 0.453271, imageWidth * 0.588785, imageHeight * 0.504672);
	        ctx.bezierCurveTo(imageWidth * 0.588785, imageHeight * 0.551401, imageWidth * 0.546728, imageHeight * 0.593457, imageWidth * 0.5, imageHeight * 0.593457);
	        ctx.bezierCurveTo(imageWidth * 0.448598, imageHeight * 0.593457, imageWidth * 0.406542, imageHeight * 0.551401, imageWidth * 0.406542, imageHeight * 0.504672);
	        ctx.closePath();
	        ctx.moveTo(imageWidth * 0.387850, imageHeight * 0.504672);
	        ctx.bezierCurveTo(imageWidth * 0.387850, imageHeight * 0.560747, imageWidth * 0.439252, imageHeight * 0.612149, imageWidth * 0.5, imageHeight * 0.612149);
	        ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.612149, imageWidth * 0.607476, imageHeight * 0.560747, imageWidth * 0.607476, imageHeight * 0.504672);
	        ctx.bezierCurveTo(imageWidth * 0.607476, imageHeight * 0.443925, imageWidth * 0.556074, imageHeight * 0.392523, imageWidth * 0.5, imageHeight * 0.392523);
	        ctx.bezierCurveTo(imageWidth * 0.439252, imageHeight * 0.392523, imageWidth * 0.387850, imageHeight * 0.443925, imageWidth * 0.387850, imageHeight * 0.504672);
	        ctx.closePath();
	        ctx.fillStyle = fillColorPath;
	        ctx.lineWidth = 1;
	        ctx.lineCap = 'square';
	        ctx.lineJoin = 'miter';
	        ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();
	        ctx.fill();
	        ctx.stroke();
	        ctx.restore();
	*/
	        // Replacement code, not quite the same but much smaller!
	
	        for (i = 0; 360 >= i; i += 90) {
	            // Small pointers
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.560747, imageHeight * 0.584112);
	            ctx.lineTo(imageWidth * 0.640186, imageHeight * 0.644859);
	            ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.560747);
	            ctx.lineTo(imageWidth * 0.560747, imageHeight * 0.584112);
	            ctx.closePath();
	            ctx.fillStyle = symbolColor;
	            ctx.fill();
	            ctx.stroke();
	            // Large pointers
	            ctx.beginPath();
	            ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.397196);
	            ctx.lineTo(imageWidth * 0.5, imageHeight * 0.196261);
	            ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.397196);
	            ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.397196);
	            ctx.closePath();
	            grad = ctx.createLinearGradient(0.476635 * imageWidth, 0, 0.518691 * imageWidth, 0);
	            grad.addColorStop(0, 'rgb(222, 223, 218)');
	            grad.addColorStop(0.48, 'rgb(222, 223, 218)');
	            grad.addColorStop(0.49, symbolColor);
	            grad.addColorStop(1, symbolColor);
	            ctx.fillStyle = grad;
	            ctx.fill();
	            ctx.stroke();
	            ctx.translate(centerX, centerY);
	            ctx.rotate(i * RAD_FACTOR);
	            ctx.translate(-centerX, -centerY);
	        }
	
	        // Central ring
	        ctx.beginPath();
	        ctx.translate(centerX, centerY);
	        ctx.arc(0, 0, imageWidth * 0.1, 0, TWO_PI, false);
	        ctx.lineWidth = imageWidth * 0.022;
	        ctx.stroke();
	        ctx.translate(-centerX, -centerY);
	
	        ctx.restore();
	
	    };
	
	    var drawPointerImage = function (ctx, size, ptrType, ptrColor, lblColor) {
	        var ptrBuffer, ptrCtx,
	            grad, radius,
	            cacheKey = size.toString() + ptrType.type + ptrColor.light.getHexColor() + ptrColor.medium.getHexColor();
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!drawPointerImage.cache[cacheKey]) {
	            // create a pointer buffer
	            ptrBuffer = createBuffer(size, size);
	            ptrCtx = ptrBuffer.getContext('2d');
	
	            switch (ptrType.type) {
	            case 'type2':
	                grad = ptrCtx.createLinearGradient(0, size * 0.471962, 0, size * 0.130841);
	                grad.addColorStop(0, lblColor.getRgbaColor());
	                grad.addColorStop(0.36, lblColor.getRgbaColor());
	                grad.addColorStop(0.361, ptrColor.light.getRgbaColor());
	                grad.addColorStop(1, ptrColor.light.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.518691, size * 0.471962);
	                ptrCtx.lineTo(size * 0.509345, size * 0.462616);
	                ptrCtx.lineTo(size * 0.509345, size * 0.341121);
	                ptrCtx.lineTo(size * 0.504672, size * 0.130841);
	                ptrCtx.lineTo(size * 0.495327, size * 0.130841);
	                ptrCtx.lineTo(size * 0.490654, size * 0.341121);
	                ptrCtx.lineTo(size * 0.490654, size * 0.462616);
	                ptrCtx.lineTo(size * 0.481308, size * 0.471962);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                break;
	
	            case 'type3':
	                ptrCtx.beginPath();
	                ptrCtx.rect(size * 0.495327, size * 0.130841, size * 0.009345, size * 0.373831);
	                ptrCtx.closePath();
	                ptrCtx.fillStyle = ptrColor.light.getRgbaColor();
	                ptrCtx.fill();
	                break;
	
	            case 'type4':
	                grad = ptrCtx.createLinearGradient(0.467289 * size, 0, 0.528036 * size, 0);
	                grad.addColorStop(0, ptrColor.dark.getRgbaColor());
	                grad.addColorStop(0.51, ptrColor.dark.getRgbaColor());
	                grad.addColorStop(0.52, ptrColor.light.getRgbaColor());
	                grad.addColorStop(1, ptrColor.light.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.5, size * 0.126168);
	                ptrCtx.lineTo(size * 0.514018, size * 0.135514);
	                ptrCtx.lineTo(size * 0.532710, size * 0.5);
	                ptrCtx.lineTo(size * 0.523364, size * 0.602803);
	                ptrCtx.lineTo(size * 0.476635, size * 0.602803);
	                ptrCtx.lineTo(size * 0.467289, size * 0.5);
	                ptrCtx.lineTo(size * 0.485981, size * 0.135514);
	                ptrCtx.lineTo(size * 0.5, size * 0.126168);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                break;
	
	            case 'type5':
	                grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);
	                grad.addColorStop(0, ptrColor.light.getRgbaColor());
	                grad.addColorStop(0.5, ptrColor.light.getRgbaColor());
	                grad.addColorStop(0.5, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(1, ptrColor.medium.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.5, size * 0.495327);
	                ptrCtx.lineTo(size * 0.528037, size * 0.495327);
	                ptrCtx.lineTo(size * 0.5, size * 0.149532);
	                ptrCtx.lineTo(size * 0.471962, size * 0.495327);
	                ptrCtx.lineTo(size * 0.5, size * 0.495327);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	
	                ptrCtx.lineWidth = 1;
	                ptrCtx.lineCap = 'square';
	                ptrCtx.lineJoin = 'miter';
	                ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();
	                ptrCtx.stroke();
	                break;
	
	            case 'type6':
	                ptrCtx.fillStyle = ptrColor.medium.getRgbaColor();
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.481308, size * 0.485981);
	                ptrCtx.lineTo(size * 0.481308, size * 0.392523);
	                ptrCtx.lineTo(size * 0.485981, size * 0.317757);
	                ptrCtx.lineTo(size * 0.495327, size * 0.130841);
	                ptrCtx.lineTo(size * 0.504672, size * 0.130841);
	                ptrCtx.lineTo(size * 0.514018, size * 0.317757);
	                ptrCtx.lineTo(size * 0.518691, size * 0.387850);
	                ptrCtx.lineTo(size * 0.518691, size * 0.485981);
	                ptrCtx.lineTo(size * 0.504672, size * 0.485981);
	                ptrCtx.lineTo(size * 0.504672, size * 0.387850);
	                ptrCtx.lineTo(size * 0.5, size * 0.317757);
	                ptrCtx.lineTo(size * 0.495327, size * 0.392523);
	                ptrCtx.lineTo(size * 0.495327, size * 0.485981);
	                ptrCtx.lineTo(size * 0.481308, size * 0.485981);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                break;
	
	            case 'type7':
	                grad = ptrCtx.createLinearGradient(0.481308 * size, 0, 0.518691 * size, 0);
	                grad.addColorStop(0, ptrColor.dark.getRgbaColor());
	                grad.addColorStop(1, ptrColor.medium.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.490654, size * 0.130841);
	                ptrCtx.lineTo(size * 0.481308, size * 0.5);
	                ptrCtx.lineTo(size * 0.518691, size * 0.5);
	                ptrCtx.lineTo(size * 0.504672, size * 0.130841);
	                ptrCtx.lineTo(size * 0.490654, size * 0.130841);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                break;
	
	            case 'type8':
	                grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);
	                grad.addColorStop(0, ptrColor.light.getRgbaColor());
	                grad.addColorStop(0.5, ptrColor.light.getRgbaColor());
	                grad.addColorStop(0.5, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(1, ptrColor.medium.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.5, size * 0.532710);
	                ptrCtx.lineTo(size * 0.532710, size * 0.5);
	                ptrCtx.bezierCurveTo(size * 0.532710, size * 0.5, size * 0.509345, size * 0.457943, size * 0.5, size * 0.149532);
	                ptrCtx.bezierCurveTo(size * 0.490654, size * 0.457943, size * 0.467289, size * 0.5, size * 0.467289, size * 0.5);
	                ptrCtx.lineTo(size * 0.5, size * 0.532710);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                ptrCtx.stroke();
	                break;
	
	            case 'type9':
	                grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);
	                grad.addColorStop(0, 'rgb(50, 50, 50)');
	                grad.addColorStop(0.5, '#666666');
	                grad.addColorStop(1, 'rgb(50, 50, 50)');
	                ptrCtx.fillStyle = grad;
	                ptrCtx.strokeStyle = '#2E2E2E';
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.495327, size * 0.233644);
	                ptrCtx.lineTo(size * 0.504672, size * 0.233644);
	                ptrCtx.lineTo(size * 0.514018, size * 0.439252);
	                ptrCtx.lineTo(size * 0.485981, size * 0.439252);
	                ptrCtx.lineTo(size * 0.495327, size * 0.233644);
	                ptrCtx.closePath();
	                ptrCtx.moveTo(size * 0.490654, size * 0.130841);
	                ptrCtx.lineTo(size * 0.471962, size * 0.471962);
	                ptrCtx.lineTo(size * 0.471962, size * 0.528037);
	                ptrCtx.bezierCurveTo(size * 0.471962, size * 0.528037, size * 0.476635, size * 0.602803, size * 0.476635, size * 0.602803);
	                ptrCtx.bezierCurveTo(size * 0.476635, size * 0.607476, size * 0.481308, size * 0.607476, size * 0.5, size * 0.607476);
	                ptrCtx.bezierCurveTo(size * 0.518691, size * 0.607476, size * 0.523364, size * 0.607476, size * 0.523364, size * 0.602803);
	                ptrCtx.bezierCurveTo(size * 0.523364, size * 0.602803, size * 0.528037, size * 0.528037, size * 0.528037, size * 0.528037);
	                ptrCtx.lineTo(size * 0.528037, size * 0.471962);
	                ptrCtx.lineTo(size * 0.509345, size * 0.130841);
	                ptrCtx.lineTo(size * 0.490654, size * 0.130841);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.495327, size * 0.219626);
	                ptrCtx.lineTo(size * 0.504672, size * 0.219626);
	                ptrCtx.lineTo(size * 0.504672, size * 0.135514);
	                ptrCtx.lineTo(size * 0.495327, size * 0.135514);
	                ptrCtx.lineTo(size * 0.495327, size * 0.219626);
	                ptrCtx.closePath();
	
	                ptrCtx.fillStyle = ptrColor.medium.getRgbaColor();
	                ptrCtx.fill();
	                break;
	
	            case 'type10':
	                // POINTER_TYPE10
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.5, size * 0.149532);
	                ptrCtx.bezierCurveTo(size * 0.5, size * 0.149532, size * 0.443925, size * 0.490654, size * 0.443925, size * 0.5);
	                ptrCtx.bezierCurveTo(size * 0.443925, size * 0.532710, size * 0.467289, size * 0.556074, size * 0.5, size * 0.556074);
	                ptrCtx.bezierCurveTo(size * 0.532710, size * 0.556074, size * 0.556074, size * 0.532710, size * 0.556074, size * 0.5);
	                ptrCtx.bezierCurveTo(size * 0.556074, size * 0.490654, size * 0.5, size * 0.149532, size * 0.5, size * 0.149532);
	                ptrCtx.closePath();
	                grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);
	                grad.addColorStop(0, ptrColor.light.getRgbaColor());
	                grad.addColorStop(0.5, ptrColor.light.getRgbaColor());
	                grad.addColorStop(0.5, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(1, ptrColor.medium.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.strokeStyle = ptrColor.medium.getRgbaColor();
	                ptrCtx.lineWidth = 1;
	                ptrCtx.lineCap = 'square';
	                ptrCtx.lineJoin = 'miter';
	                ptrCtx.fill();
	                ptrCtx.stroke();
	                break;
	
	            case 'type11':
	                // POINTER_TYPE11
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(0.5 * size, 0.168224 * size);
	                ptrCtx.lineTo(0.485981 * size, 0.5 * size);
	                ptrCtx.bezierCurveTo(0.485981 * size, 0.5 * size, 0.481308 * size, 0.584112 * size, 0.5 * size, 0.584112 * size);
	                ptrCtx.bezierCurveTo(0.514018 * size, 0.584112 * size, 0.509345 * size, 0.5 * size, 0.509345 * size, 0.5 * size);
	                ptrCtx.lineTo(0.5 * size, 0.168224 * size);
	                ptrCtx.closePath();
	                grad = ptrCtx.createLinearGradient(0, 0.168224 * size, 0, 0.584112 * size);
	                grad.addColorStop(0, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(1, ptrColor.dark.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();
	                ptrCtx.fill();
	                ptrCtx.stroke();
	                break;
	
	            case 'type12':
	                // POINTER_TYPE12
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(0.5 * size, 0.168224 * size);
	                ptrCtx.lineTo(0.485981 * size, 0.5 * size);
	                ptrCtx.lineTo(0.5 * size, 0.504672 * size);
	                ptrCtx.lineTo(0.509345 * size, 0.5 * size);
	                ptrCtx.lineTo(0.5 * size, 0.168224 * size);
	                ptrCtx.closePath();
	                grad = ptrCtx.createLinearGradient(0, 0.168224 * size, 0, 0.504672 * size);
	                grad.addColorStop(0, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(1, ptrColor.dark.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();
	                ptrCtx.fill();
	                ptrCtx.stroke();
	                break;
	
	            case 'type13':
	                // POINTER_TYPE13
	            case 'type14':
	                // POINTER_TYPE14 (same shape as 13)
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(0.485981 * size, 0.168224 * size);
	                ptrCtx.lineTo(0.5 * size, 0.130841 * size);
	                ptrCtx.lineTo(0.509345 * size, 0.168224 * size);
	                ptrCtx.lineTo(0.509345 * size, 0.509345 * size);
	                ptrCtx.lineTo(0.485981 * size, 0.509345 * size);
	                ptrCtx.lineTo(0.485981 * size, 0.168224 * size);
	                ptrCtx.closePath();
	                if (ptrType.type === 'type13') {
	                    // TYPE13
	                    grad = ptrCtx.createLinearGradient(0, 0.5 * size, 0, 0.130841 * size);
	                    grad.addColorStop(0, lblColor.getRgbaColor());
	                    grad.addColorStop(0.85, lblColor.getRgbaColor());
	                    grad.addColorStop(0.85, ptrColor.medium.getRgbaColor());
	                    grad.addColorStop(1, ptrColor.medium.getRgbaColor());
	                    ptrCtx.fillStyle = grad;
	                } else {
	                    // TYPE14
	                    grad = ptrCtx.createLinearGradient(0.485981 * size, 0, 0.509345 * size, 0);
	                    grad.addColorStop(0, ptrColor.veryDark.getRgbaColor());
	                    grad.addColorStop(0.5, ptrColor.light.getRgbaColor());
	                    grad.addColorStop(1, ptrColor.veryDark.getRgbaColor());
	                    ptrCtx.fillStyle = grad;
	                }
	                ptrCtx.fill();
	                break;
	
	            case 'type15':
	                // POINTER TYPE15 - Classic with crescent
	            case 'type16':
	                // POINTER TYPE16 - Classic without crescent
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.509345, size * 0.457943);
	                ptrCtx.lineTo(size * 0.5015, size * 0.13);
	                ptrCtx.lineTo(size * 0.4985, size * 0.13);
	                ptrCtx.lineTo(size * 0.490654, size * 0.457943);
	                ptrCtx.bezierCurveTo(size * 0.490654, size * 0.457943, size * 0.490654, size * 0.457943, size * 0.490654, size * 0.457943);
	                ptrCtx.bezierCurveTo(size * 0.471962, size * 0.462616, size * 0.457943, size * 0.481308, size * 0.457943, size * 0.5);
	                ptrCtx.bezierCurveTo(size * 0.457943, size * 0.518691, size * 0.471962, size * 0.537383, size * 0.490654, size * 0.542056);
	                ptrCtx.bezierCurveTo(size * 0.490654, size * 0.542056, size * 0.490654, size * 0.542056, size * 0.490654, size * 0.542056);
	                if (ptrType.type === 'type15') {
	                    ptrCtx.lineTo(size * 0.490654, size * 0.57);
	                    ptrCtx.bezierCurveTo(size * 0.46, size * 0.58, size * 0.46, size * 0.62, size * 0.490654, size * 0.63);
	                    ptrCtx.bezierCurveTo(size * 0.47, size * 0.62, size * 0.48, size * 0.59, size * 0.5, size * 0.59);
	                    ptrCtx.bezierCurveTo(size * 0.53, size * 0.59, size * 0.52, size * 0.62, size * 0.509345, size * 0.63);
	                    ptrCtx.bezierCurveTo(size * 0.54, size * 0.62, size * 0.54, size * 0.58, size * 0.509345, size * 0.57);
	                    ptrCtx.lineTo(size * 0.509345, size * 0.57);
	                } else {
	                    ptrCtx.lineTo(size * 0.490654, size * 0.621495);
	                    ptrCtx.lineTo(size * 0.509345, size * 0.621495);
	                }
	                ptrCtx.lineTo(size * 0.509345, size * 0.542056);
	                ptrCtx.bezierCurveTo(size * 0.509345, size * 0.542056, size * 0.509345, size * 0.542056, size * 0.509345, size * 0.542056);
	                ptrCtx.bezierCurveTo(size * 0.528037, size * 0.537383, size * 0.542056, size * 0.518691, size * 0.542056, size * 0.5);
	                ptrCtx.bezierCurveTo(size * 0.542056, size * 0.481308, size * 0.528037, size * 0.462616, size * 0.509345, size * 0.457943);
	                ptrCtx.bezierCurveTo(size * 0.509345, size * 0.457943, size * 0.509345, size * 0.457943, size * 0.509345, size * 0.457943);
	                ptrCtx.closePath();
	                if (ptrType.type === 'type15') {
	                    grad = ptrCtx.createLinearGradient(0, 0, 0, size * 0.63);
	                } else {
	                    grad = ptrCtx.createLinearGradient(0, 0, 0, size * 0.621495);
	                }
	                grad.addColorStop(0, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(0.388888, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(0.5, ptrColor.light.getRgbaColor());
	                grad.addColorStop(0.611111, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(1, ptrColor.medium.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();
	                ptrCtx.fill();
	                ptrCtx.stroke();
	                // Draw the rings
	                ptrCtx.beginPath();
	                radius = size * 0.065420 / 2;
	                ptrCtx.arc(size * 0.5, size * 0.5, radius, 0, TWO_PI);
	                grad = ptrCtx.createLinearGradient(size * 0.5 - radius, size * 0.5 + radius, 0, size * 0.5 + radius);
	                grad.addColorStop(0, '#e6b35c');
	                grad.addColorStop(0.01, '#e6b35c');
	                grad.addColorStop(0.99, '#c48200');
	                grad.addColorStop(1, '#c48200');
	                ptrCtx.fillStyle = grad;
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                ptrCtx.beginPath();
	                radius = size * 0.046728 / 2;
	                ptrCtx.arc(size * 0.5, size * 0.5, radius, 0, TWO_PI);
	                grad = ptrCtx.createRadialGradient(size * 0.5, size * 0.5, 0, size * 0.5, size * 0.5, radius);
	                grad.addColorStop(0, '#c5c5c5');
	                grad.addColorStop(0.19, '#c5c5c5');
	                grad.addColorStop(0.22, '#000000');
	                grad.addColorStop(0.8, '#000000');
	                grad.addColorStop(0.99, '#707070');
	                grad.addColorStop(1, '#707070');
	                ptrCtx.fillStyle = grad;
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                break;
	
	            case 'type1':
	            /* falls through */
	            default:
	                grad = ptrCtx.createLinearGradient(0, size * 0.471962, 0, size * 0.130841);
	                grad.addColorStop(0, ptrColor.veryDark.getRgbaColor());
	                grad.addColorStop(0.3, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(0.59, ptrColor.medium.getRgbaColor());
	                grad.addColorStop(1, ptrColor.veryDark.getRgbaColor());
	                ptrCtx.fillStyle = grad;
	                ptrCtx.beginPath();
	                ptrCtx.moveTo(size * 0.518691, size * 0.471962);
	                ptrCtx.bezierCurveTo(size * 0.514018, size * 0.457943, size * 0.509345, size * 0.415887, size * 0.509345, size * 0.401869);
	                ptrCtx.bezierCurveTo(size * 0.504672, size * 0.383177, size * 0.5, size * 0.130841, size * 0.5, size * 0.130841);
	                ptrCtx.bezierCurveTo(size * 0.5, size * 0.130841, size * 0.490654, size * 0.383177, size * 0.490654, size * 0.397196);
	                ptrCtx.bezierCurveTo(size * 0.490654, size * 0.415887, size * 0.485981, size * 0.457943, size * 0.481308, size * 0.471962);
	                ptrCtx.bezierCurveTo(size * 0.471962, size * 0.481308, size * 0.467289, size * 0.490654, size * 0.467289, size * 0.5);
	                ptrCtx.bezierCurveTo(size * 0.467289, size * 0.518691, size * 0.481308, size * 0.532710, size * 0.5, size * 0.532710);
	                ptrCtx.bezierCurveTo(size * 0.518691, size * 0.532710, size * 0.532710, size * 0.518691, size * 0.532710, size * 0.5);
	                ptrCtx.bezierCurveTo(size * 0.532710, size * 0.490654, size * 0.528037, size * 0.481308, size * 0.518691, size * 0.471962);
	                ptrCtx.closePath();
	                ptrCtx.fill();
	                break;
	            }
	            // cache buffer
	            drawPointerImage.cache[cacheKey] = ptrBuffer;
	        }
	        ctx.drawImage(drawPointerImage.cache[cacheKey], 0, 0);
	        return this;
	    };
	    drawPointerImage.cache = {};
	
	    var drawRadialFrameImage = function (ctx, frameDesign, centerX, centerY, imageWidth, imageHeight) {
	        var radFBuffer, radFCtx,
	            grad, outerX, innerX, fractions, colors,
	            cacheKey = imageWidth.toString() + imageHeight + frameDesign.design;
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!drawRadialFrameImage.cache[cacheKey]) {
	            // Setup buffer
	            radFBuffer = createBuffer(imageWidth, imageHeight);
	            radFCtx = radFBuffer.getContext('2d');
	
	            // outer gray frame
	            radFCtx.fillStyle = '#848484';
	            radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.5)';
	            radFCtx.beginPath();
	            radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);
	            radFCtx.closePath();
	            radFCtx.fill();
	            radFCtx.stroke();
	
	            radFCtx.beginPath();
	            radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);
	            radFCtx.closePath();
	
	            // main gradient frame
	            switch (frameDesign.design) {
	            case 'metal':
	                grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, '#fefefe');
	                grad.addColorStop(0.07, 'rgb(210, 210, 210)');
	                grad.addColorStop(0.12, 'rgb(179, 179, 179)');
	                grad.addColorStop(1, 'rgb(213, 213, 213)');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                break;
	
	            case 'brass':
	                grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, 'rgb(249, 243, 155)');
	                grad.addColorStop(0.05, 'rgb(246, 226, 101)');
	                grad.addColorStop(0.10, 'rgb(240, 225, 132)');
	                grad.addColorStop(0.50, 'rgb(90, 57, 22)');
	                grad.addColorStop(0.90, 'rgb(249, 237, 139)');
	                grad.addColorStop(0.95, 'rgb(243, 226, 108)');
	                grad.addColorStop(1, 'rgb(202, 182, 113)');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                break;
	
	            case 'steel':
	                grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, 'rgb(231, 237, 237)');
	                grad.addColorStop(0.05, 'rgb(189, 199, 198)');
	                grad.addColorStop(0.10, 'rgb(192, 201, 200)');
	                grad.addColorStop(0.50, 'rgb(23, 31, 33)');
	                grad.addColorStop(0.90, 'rgb(196, 205, 204)');
	                grad.addColorStop(0.95, 'rgb(194, 204, 203)');
	                grad.addColorStop(1, 'rgb(189, 201, 199)');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                break;
	
	            case 'gold':
	                grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, 'rgb(255, 255, 207)');
	                grad.addColorStop(0.15, 'rgb(255, 237, 96)');
	                grad.addColorStop(0.22, 'rgb(254, 199, 57)');
	                grad.addColorStop(0.3, 'rgb(255, 249, 203)');
	                grad.addColorStop(0.38, 'rgb(255, 199, 64)');
	                grad.addColorStop(0.44, 'rgb(252, 194, 60)');
	                grad.addColorStop(0.51, 'rgb(255, 204, 59)');
	                grad.addColorStop(0.6, 'rgb(213, 134, 29)');
	                grad.addColorStop(0.68, 'rgb(255, 201, 56)');
	                grad.addColorStop(0.75, 'rgb(212, 135, 29)');
	                grad.addColorStop(1, 'rgb(247, 238, 101)');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                break;
	
	            case 'anthracite':
	                grad = radFCtx.createLinearGradient(0, 0.004672 * imageHeight, 0, 0.995326 * imageHeight);
	                grad.addColorStop(0, 'rgb(118, 117, 135)');
	                grad.addColorStop(0.06, 'rgb(74, 74, 82)');
	                grad.addColorStop(0.12, 'rgb(50, 50, 54)');
	                grad.addColorStop(1, 'rgb(79, 79, 87)');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                break;
	
	            case 'tiltedGray':
	                grad = radFCtx.createLinearGradient(0.233644 * imageWidth, 0.084112 * imageHeight, 0.81258 * imageWidth, 0.910919 * imageHeight);
	                grad.addColorStop(0, '#ffffff');
	                grad.addColorStop(0.07, 'rgb(210, 210, 210)');
	                grad.addColorStop(0.16, 'rgb(179, 179, 179)');
	                grad.addColorStop(0.33, '#ffffff');
	                grad.addColorStop(0.55, '#c5c5c5');
	                grad.addColorStop(0.79, '#ffffff');
	                grad.addColorStop(1, '#666666');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                break;
	
	            case 'tiltedBlack':
	                grad = radFCtx.createLinearGradient(0.228971 * imageWidth, 0.079439 * imageHeight, 0.802547 * imageWidth, 0.898591 * imageHeight);
	                grad.addColorStop(0, '#666666');
	                grad.addColorStop(0.21, '#000000');
	                grad.addColorStop(0.47, '#666666');
	                grad.addColorStop(0.99, '#000000');
	                grad.addColorStop(1, '#000000');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                break;
	
	            case 'glossyMetal':
	                grad = radFCtx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageWidth, 0.5 * imageWidth);
	                grad.addColorStop(0, 'rgb(207, 207, 207)');
	                grad.addColorStop(0.96, 'rgb(205, 204, 205)');
	                grad.addColorStop(1, 'rgb(244, 244, 244)');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	                radFCtx.beginPath();
	                radFCtx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.973962 * imageWidth / 2, 0, TWO_PI);
	                radFCtx.closePath();
	                grad = radFCtx.createLinearGradient(0, imageHeight - 0.971962 * imageHeight, 0, 0.971962 * imageHeight);
	                grad.addColorStop(0, 'rgb(249, 249, 249)');
	                grad.addColorStop(0.23, 'rgb(200, 195, 191)');
	                grad.addColorStop(0.36, '#ffffff');
	                grad.addColorStop(0.59, 'rgb(29, 29, 29)');
	                grad.addColorStop(0.76, 'rgb(200, 194, 192)');
	                grad.addColorStop(1, 'rgb(209, 209, 209)');
	                radFCtx.fillStyle = grad;
	                radFCtx.fill();
	
	                radFCtx.beginPath();
	                radFCtx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.869158 * imageWidth / 2, 0, TWO_PI);
	                radFCtx.closePath();
	                radFCtx.fillStyle = '#f6f6f6';
	                radFCtx.fill();
	
	                radFCtx.beginPath();
	                radFCtx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.85 * imageWidth / 2, 0, TWO_PI);
	                radFCtx.closePath();
	                radFCtx.fillStyle = '#333333';
	                radFCtx.fill();
	                break;
	
	            case 'blackMetal':
	                fractions = [0,
	                             0.125,
	                             0.347222,
	                             0.5,
	                             0.680555,
	                             0.875,
	                             1];
	
	                colors = [ new RgbaColor(254, 254, 254, 1),
	                           new RgbaColor(0, 0, 0, 1),
	                           new RgbaColor(153, 153, 153, 1),
	                           new RgbaColor(0, 0, 0, 1),
	                           new RgbaColor(153, 153, 153, 1),
	                           new RgbaColor(0, 0, 0, 1),
	                           new RgbaColor(254, 254, 254, 1)];
	
	                radFCtx.save();
	                radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);
	                radFCtx.clip();
	                outerX = imageWidth * 0.495327;
	                innerX = imageWidth * 0.420560;
	                grad = new ConicalGradient(fractions, colors);
	                grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX);
	                // fade outer edge
	                radFCtx.strokeStyle = '#848484';
	                radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)';
	                radFCtx.beginPath();
	                radFCtx.lineWidth = imageWidth / 90;
	                radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);
	                radFCtx.closePath();
	                radFCtx.stroke();
	                radFCtx.restore();
	                break;
	
	            case 'shinyMetal':
	                fractions = [0,
	                             0.125,
	                             0.25,
	                             0.347222,
	                             0.5,
	                             0.652777,
	                             0.75,
	                             0.875,
	                             1];
	
	                colors = [ new RgbaColor(254, 254, 254, 1),
	                           new RgbaColor(210, 210, 210, 1),
	                           new RgbaColor(179, 179, 179, 1),
	                           new RgbaColor(238, 238, 238, 1),
	                           new RgbaColor(160, 160, 160, 1),
	                           new RgbaColor(238, 238, 238, 1),
	                           new RgbaColor(179, 179, 179, 1),
	                           new RgbaColor(210, 210, 210, 1),
	                           new RgbaColor(254, 254, 254, 1)];
	
	                radFCtx.save();
	                radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);
	                radFCtx.clip();
	                outerX = imageWidth * 0.495327;
	                innerX = imageWidth * 0.420560;
	                grad = new ConicalGradient(fractions, colors);
	                grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX);
	                // fade outer edge
	                radFCtx.strokeStyle = '#848484';
	                radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)';
	                radFCtx.beginPath();
	                radFCtx.lineWidth = imageWidth / 90;
	                radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);
	                radFCtx.closePath();
	                radFCtx.stroke();
	                radFCtx.restore();
	                break;
	
	            case 'chrome':
	                fractions = [0,
	                             0.09,
	                             0.12,
	                             0.16,
	                             0.25,
	                             0.29,
	                             0.33,
	                             0.38,
	                             0.48,
	                             0.52,
	                             0.63,
	                             0.68,
	                             0.8,
	                             0.83,
	                             0.87,
	                             0.97,
	                             1];
	
	                colors = [ new RgbaColor(255, 255, 255, 1),
	                           new RgbaColor(255, 255, 255, 1),
	                           new RgbaColor(136, 136, 138, 1),
	                           new RgbaColor(164, 185, 190, 1),
	                           new RgbaColor(158, 179, 182, 1),
	                           new RgbaColor(112, 112, 112, 1),
	                           new RgbaColor(221, 227, 227, 1),
	                           new RgbaColor(155, 176, 179, 1),
	                           new RgbaColor(156, 176, 177, 1),
	                           new RgbaColor(254, 255, 255, 1),
	                           new RgbaColor(255, 255, 255, 1),
	                           new RgbaColor(156, 180, 180, 1),
	                           new RgbaColor(198, 209, 211, 1),
	                           new RgbaColor(246, 248, 247, 1),
	                           new RgbaColor(204, 216, 216, 1),
	                           new RgbaColor(164, 188, 190, 1),
	                           new RgbaColor(255, 255, 255, 1)];
	
	                radFCtx.save();
	                radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);
	                radFCtx.clip();
	                outerX = imageWidth * 0.495327;
	                innerX = imageWidth * 0.420560;
	                grad = new ConicalGradient(fractions, colors);
	                grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX);
	                // fade outer edge
	                radFCtx.strokeStyle = '#848484';
	                radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)';
	                radFCtx.beginPath();
	                radFCtx.lineWidth = imageWidth / 90;
	                radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);
	                radFCtx.closePath();
	                radFCtx.stroke();
	                radFCtx.restore();
	
	                break;
	            }
	
	            // inner bright frame
	            radFCtx.fillStyle = 'rgb(191, 191, 191)';
	            radFCtx.beginPath();
	            radFCtx.arc(centerX, centerY, imageWidth * 0.841121 / 2, 0, TWO_PI, true);
	            radFCtx.closePath();
	            radFCtx.fill();
	
	            // clip out center so it is transparent if the background is not visible
	            radFCtx.globalCompositeOperation = 'destination-out';
	            // Background ellipse
	            radFCtx.beginPath();
	            radFCtx.arc(centerX, centerY, imageWidth * 0.83 / 2, 0, TWO_PI, true);
	            radFCtx.closePath();
	            radFCtx.fill();
	
	            // cache the buffer
	            drawRadialFrameImage.cache[cacheKey] = radFBuffer;
	        }
	        ctx.drawImage(drawRadialFrameImage.cache[cacheKey], 0, 0);
	        return this;
	    };
	    drawRadialFrameImage.cache = {};
	
	    var drawLinearFrameImage = function (ctx, frameDesign, imageWidth, imageHeight, vertical) {
	        var frameWidth,
	            linFBuffer, linFCtx,
	            OUTER_FRAME_CORNER_RADIUS,
	            FRAME_MAIN_CORNER_RADIUS,
	            SUBTRACT_CORNER_RADIUS,
	            grad,
	            fractions = [],
	            colors = [],
	            cacheKey = imageWidth.toString() + imageHeight + frameDesign.design + vertical;
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!drawLinearFrameImage.cache[cacheKey]) {
	            frameWidth = Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04;
	            frameWidth = Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1);
	
	            // Setup buffer
	            linFBuffer = createBuffer(imageWidth, imageHeight);
	            linFCtx = linFBuffer.getContext('2d');
	
	            // Calculate corner radii
	            if (vertical) {
	                OUTER_FRAME_CORNER_RADIUS = imageWidth * 0.05;
	                FRAME_MAIN_CORNER_RADIUS = OUTER_FRAME_CORNER_RADIUS - 1;
	                SUBTRACT_CORNER_RADIUS = imageWidth * 0.028571;
	            } else {
	                OUTER_FRAME_CORNER_RADIUS = imageHeight * 0.05;
	                FRAME_MAIN_CORNER_RADIUS = OUTER_FRAME_CORNER_RADIUS - 1;
	                SUBTRACT_CORNER_RADIUS = imageHeight * 0.028571;
	            }
	
	            roundedRectangle(linFCtx, 0, 0, imageWidth, imageHeight, OUTER_FRAME_CORNER_RADIUS);
	            linFCtx.fillStyle = '#838383';
	            linFCtx.fill();
	
	            roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, FRAME_MAIN_CORNER_RADIUS);
	
	            // main gradient frame
	            switch (frameDesign.design) {
	            case 'metal':
	                grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, '#fefefe');
	                grad.addColorStop(0.07, 'rgb(210, 210, 210)');
	                grad.addColorStop(0.12, 'rgb(179, 179, 179)');
	                grad.addColorStop(1, 'rgb(213, 213, 213)');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	                break;
	
	            case 'brass':
	                grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, 'rgb(249, 243, 155)');
	                grad.addColorStop(0.05, 'rgb(246, 226, 101)');
	                grad.addColorStop(0.10, 'rgb(240, 225, 132)');
	                grad.addColorStop(0.50, 'rgb(90, 57, 22)');
	                grad.addColorStop(0.90, 'rgb(249, 237, 139)');
	                grad.addColorStop(0.95, 'rgb(243, 226, 108)');
	                grad.addColorStop(1, 'rgb(202, 182, 113)');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	                break;
	
	            case 'steel':
	                grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, 'rgb(231, 237, 237)');
	                grad.addColorStop(0.05, 'rgb(189, 199, 198)');
	                grad.addColorStop(0.10, 'rgb(192, 201, 200)');
	                grad.addColorStop(0.50, 'rgb(23, 31, 33)');
	                grad.addColorStop(0.90, 'rgb(196, 205, 204)');
	                grad.addColorStop(0.95, 'rgb(194, 204, 203)');
	                grad.addColorStop(1, 'rgb(189, 201, 199)');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	                break;
	
	            case 'gold':
	                grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);
	                grad.addColorStop(0, 'rgb(255, 255, 207)');
	                grad.addColorStop(0.15, 'rgb(255, 237, 96)');
	                grad.addColorStop(0.22, 'rgb(254, 199, 57)');
	                grad.addColorStop(0.3, 'rgb(255, 249, 203)');
	                grad.addColorStop(0.38, 'rgb(255, 199, 64)');
	                grad.addColorStop(0.44, 'rgb(252, 194, 60)');
	                grad.addColorStop(0.51, 'rgb(255, 204, 59)');
	                grad.addColorStop(0.6, 'rgb(213, 134, 29)');
	                grad.addColorStop(0.68, 'rgb(255, 201, 56)');
	                grad.addColorStop(0.75, 'rgb(212, 135, 29)');
	                grad.addColorStop(1, 'rgb(247, 238, 101)');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	                break;
	
	            case 'anthracite':
	                grad = linFCtx.createLinearGradient(0, 0.004672 * imageHeight, 0, 0.995326 * imageHeight);
	                grad.addColorStop(0, 'rgb(118, 117, 135)');
	                grad.addColorStop(0.06, 'rgb(74, 74, 82)');
	                grad.addColorStop(0.12, 'rgb(50, 50, 54)');
	                grad.addColorStop(1, 'rgb(79, 79, 87)');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	                break;
	
	            case 'tiltedGray':
	                grad = linFCtx.createLinearGradient(0.233644 * imageWidth, 0.084112 * imageHeight, 0.81258 * imageWidth, 0.910919 * imageHeight);
	                grad.addColorStop(0, '#ffffff');
	                grad.addColorStop(0.07, 'rgb(210, 210, 210)');
	                grad.addColorStop(0.16, 'rgb(179, 179, 179)');
	                grad.addColorStop(0.33, '#ffffff');
	                grad.addColorStop(0.55, '#c5c5c5');
	                grad.addColorStop(0.79, '#ffffff');
	                grad.addColorStop(1, '#666666');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	                break;
	
	            case 'tiltedBlack':
	                grad = linFCtx.createLinearGradient(0.228971 * imageWidth, 0.079439 * imageHeight, 0.802547 * imageWidth, 0.898591 * imageHeight);
	                grad.addColorStop(0, '#666666');
	                grad.addColorStop(0.21, '#000000');
	                grad.addColorStop(0.47, '#666666');
	                grad.addColorStop(0.99, '#000000');
	                grad.addColorStop(1, '#000000');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	                break;
	
	            case 'glossyMetal':
	                // The smaller side is important for the contour gradient
	    // Java version uses a contour gradient for the outer frame rim
	    // but this is only 1 pixel wide, so a plain color fill is essentially
	    // the same.
	    /*
	                var frameMainFractions4 = [
	                                            0,
	                                            (imageWidth >= imageHeight ? 32 / imageHeight : 32 / imageWidth) * 0.04,
	                                            1
	                                            ];
	                var frameMainColors4 = [
	                                        new RgbaColor(244, 244, 244, 1),
	                                        new RgbaColor(207, 207, 207, 1),
	                                        new RgbaColor(207, 207, 207, 1)
	                                        ];
	                var frameMainGradient4 = new contourGradient(linFCtx, 0, 0, imageWidth,  imageHeight, frameMainFractions4, frameMainColors4);
	                // Outer frame rim
	                roundedRectangle(linFCtx, 1, 1, imageWidth-2, imageHeight-2, OUTER_FRAME_CORNER_RADIUS);
	                linFCtx.clip();
	                frameMainGradient4.paintContext();
	    */
	                // Outer frame rim
	    //                roundedRectangle(linFCtx, 1, 1, imageWidth-2, imageHeight-2, OUTER_FRAME_CORNER_RADIUS);
	    //                linFCtx.clip();
	    //                linFCtx.fillStyle = '#cfcfcf';
	    //                linFCtx.fill();
	
	                // Main frame
	    //                roundedRectangle(linFCtx, 2, 2, imageWidth - 4, imageHeight - 4, FRAME_MAIN_CORNER_RADIUS);
	    //                linFCtx.clip();
	                roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);
	                linFCtx.clip();
	                grad = linFCtx.createLinearGradient(0, 1, 0, imageHeight - 2);
	    // The fractions from the Java version of linear gauge
	    /*
	                grad.addColorStop(0, 'rgb(249, 249, 249)');
	                grad.addColorStop(0.1, 'rgb(200, 195, 191)');
	                grad.addColorStop(0.26, '#ffffff');
	                grad.addColorStop(0.73, 'rgb(29, 29, 29)');
	                grad.addColorStop(1, 'rgb(209, 209, 209)');
	    */
	    // Modified fractions from the radial gauge - looks better imho
	                grad.addColorStop(0, 'rgb(249, 249, 249)');
	                grad.addColorStop(0.2, 'rgb(200, 195, 191)');
	                grad.addColorStop(0.3, '#ffffff');
	                grad.addColorStop(0.6, 'rgb(29, 29, 29)');
	                grad.addColorStop(0.8, 'rgb(200, 194, 192)');
	                grad.addColorStop(1, 'rgb(209, 209, 209)');
	                linFCtx.fillStyle = grad;
	                linFCtx.fill();
	
	                // Inner frame bright
	                roundedRectangle(linFCtx, frameWidth - 2, frameWidth - 2, imageWidth - (frameWidth - 2) * 2, imageHeight - (frameWidth - 2) * 2, SUBTRACT_CORNER_RADIUS);
	                linFCtx.clip();
	                linFCtx.fillStyle = '#f6f6f6';
	                linFCtx.fill();
	
	                // Inner frame dark
	                roundedRectangle(linFCtx, frameWidth - 1, frameWidth - 1, imageWidth - (frameWidth - 1) * 2, imageHeight - (frameWidth - 1) * 2, SUBTRACT_CORNER_RADIUS);
	                linFCtx.clip();
	                linFCtx.fillStyle = '#333333';
	                linFCtx.fill();
	                break;
	
	            case 'blackMetal':
	                fractions = [0,
	                             0.125,
	                             0.347222,
	                             0.5,
	                             0.680555,
	                             0.875,
	                             1];
	
	                colors = [ new RgbaColor('#FFFFFF'),
	                           new RgbaColor('#000000'),
	                           new RgbaColor('#999999'),
	                           new RgbaColor('#000000'),
	                           new RgbaColor('#999999'),
	                           new RgbaColor('#000000'),
	                           new RgbaColor('#FFFFFF')];
	                // Set the clip
	                linFCtx.beginPath();
	                roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);
	                linFCtx.closePath();
	                linFCtx.clip();
	                grad = new ConicalGradient(fractions, colors);
	                grad.fillRect(linFCtx, imageWidth / 2, imageHeight / 2, imageWidth, imageHeight, frameWidth, frameWidth);
	                break;
	
	            case 'shinyMetal':
	                fractions = [0,
	                             0.125,
	                             0.25,
	                             0.347222,
	                             0.5,
	                             0.652777,
	                             0.75,
	                             0.875,
	                             1];
	
	                colors = [ new RgbaColor('#FFFFFF'),
	                           new RgbaColor('#D2D2D2'),
	                           new RgbaColor('#B3B3B3'),
	                           new RgbaColor('#EEEEEE'),
	                           new RgbaColor('#A0A0A0'),
	                           new RgbaColor('#EEEEEE'),
	                           new RgbaColor('#B3B3B3'),
	                           new RgbaColor('#D2D2D2'),
	                           new RgbaColor('#FFFFFF')];
	                // Set the clip
	                linFCtx.beginPath();
	                roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);
	                linFCtx.closePath();
	                linFCtx.clip();
	                grad = new ConicalGradient(fractions, colors);
	                grad.fillRect(linFCtx, imageWidth / 2, imageHeight / 2, imageWidth, imageHeight, frameWidth, frameWidth);
	                break;
	
	            case 'chrome':
	                fractions = [0,
	                             0.09,
	                             0.12,
	                             0.16,
	                             0.25,
	                             0.29,
	                             0.33,
	                             0.38,
	                             0.48,
	                             0.52,
	                             0.63,
	                             0.68,
	                             0.8,
	                             0.83,
	                             0.87,
	                             0.97,
	                             1];
	
	                colors = [ new RgbaColor('#FFFFFF'),
	                           new RgbaColor('#FFFFFF'),
	                           new RgbaColor('#888890'),
	                           new RgbaColor('#A4B9BE'),
	                           new RgbaColor('#9EB3B6'),
	                           new RgbaColor('#707070'),
	                           new RgbaColor('#DDE3E3'),
	                           new RgbaColor('#9BB0B3'),
	                           new RgbaColor('#9CB0B1'),
	                           new RgbaColor('#FEFFFF'),
	                           new RgbaColor('#FFFFFF'),
	                           new RgbaColor('#9CB4B4'),
	                           new RgbaColor('#C6D1D3'),
	                           new RgbaColor('#F6F8F7'),
	                           new RgbaColor('#CCD8D8'),
	                           new RgbaColor('#A4BCBE'),
	                           new RgbaColor('#FFFFFF')];
	                // Set the clip
	                linFCtx.beginPath();
	                roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);
	                linFCtx.closePath();
	                linFCtx.clip();
	                grad = new ConicalGradient(fractions, colors);
	                grad.fillRect(linFCtx, imageWidth / 2, imageHeight / 2, imageWidth, imageHeight, frameWidth, frameWidth);
	                break;
	            }
	
	            roundedRectangle(linFCtx, frameWidth - 1, frameWidth - 1, imageWidth - (frameWidth - 1) * 2, imageHeight - (frameWidth - 1) * 2, SUBTRACT_CORNER_RADIUS - 1);
	            linFCtx.fillStyle = 'rgb(192, 192, 192)';
	
	            // clip out the center of the frame for transparent backgrounds
	            linFCtx.globalCompositeOperation = 'destination-out';
	            roundedRectangle(linFCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, 4);
	            linFCtx.fill();
	
	            // cache the buffer
	            drawLinearFrameImage.cache[cacheKey] = linFBuffer;
	        }
	        ctx.drawImage(drawLinearFrameImage.cache[cacheKey], 0, 0);
	        return this;
	    };
	    drawLinearFrameImage.cache = {};
	
	    var drawRadialBackgroundImage = function (ctx, backgroundColor, centerX, centerY, imageWidth, imageHeight) {
	        var radBBuffer, radBCtx,
	            grad, fractions, colors,
	            backgroundOffsetX = imageWidth * 0.831775 / 2,
	            mono, textureColor, texture,
	            radius, turnRadius, stepSize,
	            end, i,
	            cacheKey = imageWidth.toString() + imageHeight + backgroundColor.name;
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!drawRadialBackgroundImage.cache[cacheKey]) {
	            // Setup buffer
	            radBBuffer = createBuffer(imageWidth, imageHeight);
	            radBCtx = radBBuffer.getContext('2d');
	
	            // Background ellipse
	            radBCtx.beginPath();
	            radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true);
	            radBCtx.closePath();
	
	            // If the backgroundColor is a texture fill it with the texture instead of the gradient
	            if (backgroundColor.name === 'CARBON' || backgroundColor.name === 'PUNCHED_SHEET' ||
	                backgroundColor.name === 'BRUSHED_METAL' || backgroundColor.name === 'BRUSHED_STAINLESS') {
	
	                if (backgroundColor.name === 'CARBON') {
	                    radBCtx.fillStyle = radBCtx.createPattern(carbonBuffer, 'repeat');
	                    radBCtx.fill();
	                }
	
	                if (backgroundColor.name === 'PUNCHED_SHEET') {
	                    radBCtx.fillStyle = radBCtx.createPattern(punchedSheetBuffer, 'repeat');
	                    radBCtx.fill();
	                }
	
	                // Add another inner shadow to make the look more realistic
	                grad = radBCtx.createLinearGradient(backgroundOffsetX, 0, imageWidth - backgroundOffsetX, 0);
	                grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)');
	                grad.addColorStop(0.5, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(1, 'rgba(0, 0, 0, 0.25)');
	                radBCtx.fillStyle = grad;
	                radBCtx.beginPath();
	                radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true);
	                radBCtx.closePath();
	                radBCtx.fill();
	
	                if (backgroundColor.name === 'BRUSHED_METAL' || backgroundColor.name === 'BRUSHED_STAINLESS') {
	                    mono = (backgroundColor.name === 'BRUSHED_METAL' ? true : false);
	                    textureColor = parseInt(backgroundColor.gradientStop.getHexColor().substr(-6), 16);
	                    texture = brushedMetalTexture(textureColor, 5, 0.1, mono, 0.5);
	                    radBCtx.fillStyle = radBCtx.createPattern(texture.fill(0, 0, imageWidth, imageHeight), 'no-repeat');
	                    radBCtx.fill();
	                }
	            } else if (backgroundColor.name === 'STAINLESS' || backgroundColor.name === 'TURNED') {
	                // Define the fractions of the conical gradient paint
	                fractions = [0,
	                             0.03,
	                             0.10,
	                             0.14,
	                             0.24,
	                             0.33,
	                             0.38,
	                             0.5,
	                             0.62,
	                             0.67,
	                             0.76,
	                             0.81,
	                             0.85,
	                             0.97,
	                             1];
	
	                // Define the colors of the conical gradient paint
	                colors = [new RgbaColor('#FDFDFD'),
	                          new RgbaColor('#FDFDFD'),
	                          new RgbaColor('#B2B2B4'),
	                          new RgbaColor('#ACACAE'),
	                          new RgbaColor('#FDFDFD'),
	                          new RgbaColor('#8E8E8E'),
	                          new RgbaColor('#8E8E8E'),
	                          new RgbaColor('#FDFDFD'),
	                          new RgbaColor('#8E8E8E'),
	                          new RgbaColor('#8E8E8E'),
	                          new RgbaColor('#FDFDFD'),
	                          new RgbaColor('#ACACAE'),
	                          new RgbaColor('#B2B2B4'),
	                          new RgbaColor('#FDFDFD'),
	                          new RgbaColor('#FDFDFD')];
	
	                grad = new ConicalGradient(fractions, colors);
	                grad.fillCircle(radBCtx, centerX, centerY, 0, backgroundOffsetX);
	
	                if (backgroundColor.name === 'TURNED') {
	                    // Define the turning radius
	                    radius = backgroundOffsetX;
	                    turnRadius = radius * 0.55;
	                    // Step size proporational to radius
	                    stepSize = RAD_FACTOR * (500 / radius);
	                    // Save before we start
	                    radBCtx.save();
	                    // restrict the turnings to the desired area
	                    radBCtx.beginPath();
	                    radBCtx.arc(centerX, centerY, radius, 0, TWO_PI);
	                    radBCtx.closePath();
	                    radBCtx.clip();
	                    // set the style for the turnings
	                    radBCtx.lineWidth = 0.5;
	                    end = TWO_PI - stepSize * 0.3;
	                    // Step the engine round'n'round
	                    for (i = 0 ; i < end; i += stepSize) {
	                        // draw a 'turn'
	                        radBCtx.strokeStyle = 'rgba(240, 240, 255, 0.25)';
	                        radBCtx.beginPath();
	                        radBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);
	                        radBCtx.stroke();
	                        // rotate the 'piece' a fraction to draw 'shadow'
	                        radBCtx.translate(centerX, centerY);
	                        radBCtx.rotate(stepSize * 0.3);
	                        radBCtx.translate(-centerX, -centerY);
	                        // draw a 'turn'
	                        radBCtx.strokeStyle = 'rgba(25, 10, 10, 0.1)';
	                        radBCtx.beginPath();
	                        radBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);
	                        radBCtx.stroke();
	                        // now rotate on to the next 'scribe' position minus the 'fraction'
	                        radBCtx.translate(centerX, centerY);
	                        radBCtx.rotate(stepSize - stepSize * 0.3);
	                        radBCtx.translate(-centerX, -centerY);
	                    }
	                    // Restore canvas now we are done
	                    radBCtx.restore();
	                }
	            } else {
	                grad = radBCtx.createLinearGradient(0, imageWidth * 0.084112, 0, backgroundOffsetX * 2);
	                grad.addColorStop(0, backgroundColor.gradientStart.getRgbaColor());
	                grad.addColorStop(0.4, backgroundColor.gradientFraction.getRgbaColor());
	                grad.addColorStop(1, backgroundColor.gradientStop.getRgbaColor());
	                radBCtx.fillStyle = grad;
	                radBCtx.fill();
	            }
	            // Inner shadow
	            grad = radBCtx.createRadialGradient(centerX, centerY, 0, centerX, centerY, backgroundOffsetX);
	            grad.addColorStop(0, 'rgba(0, 0, 0, 0)');
	            grad.addColorStop(0.7, 'rgba(0, 0, 0, 0)');
	            grad.addColorStop(0.71, 'rgba(0, 0, 0, 0)');
	            grad.addColorStop(0.86, 'rgba(0, 0, 0, 0.03)');
	            grad.addColorStop(0.92, 'rgba(0, 0, 0, 0.07)');
	            grad.addColorStop(0.97, 'rgba(0, 0, 0, 0.15)');
	            grad.addColorStop(1, 'rgba(0, 0, 0, 0.3)');
	            radBCtx.fillStyle = grad;
	
	            radBCtx.beginPath();
	            radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true);
	            radBCtx.closePath();
	            radBCtx.fill();
	
	            // cache the buffer
	            drawRadialBackgroundImage.cache[cacheKey] = radBBuffer;
	        }
	        ctx.drawImage(drawRadialBackgroundImage.cache[cacheKey], 0, 0);
	        return this;
	    };
	    drawRadialBackgroundImage.cache = {};
	
	    var drawRadialCustomImage = function (ctx, img, centerX, centerY, imageWidth, imageHeight) {
	        var drawWidth = imageWidth * 0.831775,
	            drawHeight = imageHeight * 0.831775,
	            x = (imageWidth - drawWidth) / 2,
	            y = (imageHeight - drawHeight) / 2;
	
	        if (img !== null && img.height > 0 && img.width > 0) {
	            ctx.save();
	            // Set the clipping area
	            ctx.beginPath();
	            ctx.arc(centerX, centerY, imageWidth * 0.831775 / 2, 0, TWO_PI, true);
	            ctx.clip();
	            // Add the image
	            ctx.drawImage(img, x, y, drawWidth, drawHeight);
	            ctx.restore();
	        }
	        return this;
	    };
	
	    var drawLinearBackgroundImage = function (ctx, backgroundColor, imageWidth, imageHeight, vertical) {
	        var i, end, grad, fractions, colors,
	            frameWidth,
	            linBBuffer, linBCtx, linBColor,
	            radius,
	            turnRadius, centerX, centerY, stepSize,
	            mono, textureColor, texture,
	            cacheKey = imageWidth.toString() + imageHeight + vertical + backgroundColor.name;
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!drawLinearBackgroundImage.cache[cacheKey]) {
	            frameWidth = Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04;
	            frameWidth = Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1);
	
	            // Setup buffer
	            linBBuffer = createBuffer(imageWidth, imageHeight);
	            linBCtx = linBBuffer.getContext('2d');
	            linBColor = backgroundColor;
	
	            roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, 4);
	
	            // If the backgroundColor is a texture fill it with the texture instead of the gradient
	            if (backgroundColor.name === 'CARBON' || backgroundColor.name === 'PUNCHED_SHEET' ||
	                backgroundColor.name === 'STAINLESS' || backgroundColor.name === 'BRUSHED_METAL' ||
	                backgroundColor.name === 'BRUSHED_STAINLESS' || backgroundColor.name === 'TURNED') {
	                if (backgroundColor.name === 'CARBON') {
	                    linBCtx.fillStyle = linBCtx.createPattern(carbonBuffer, 'repeat');
	                    linBCtx.fill();
	                }
	
	                if (backgroundColor.name === 'PUNCHED_SHEET') {
	                    linBCtx.fillStyle = linBCtx.createPattern(punchedSheetBuffer, 'repeat');
	                    linBCtx.fill();
	                }
	
	                if (backgroundColor.name === 'STAINLESS' || backgroundColor.name === 'TURNED') {
	                    // Define the fraction of the conical gradient paint
	                    fractions = [0,
	                                 0.03,
	                                 0.10,
	                                 0.14,
	                                 0.24,
	                                 0.33,
	                                 0.38,
	                                 0.5,
	                                 0.62,
	                                 0.67,
	                                 0.76,
	                                 0.81,
	                                 0.85,
	                                 0.97,
	                                 1];
	
	                    // Define the colors of the conical gradient paint
	                    colors = [new RgbaColor('#FDFDFD'),
	                              new RgbaColor('#FDFDFD'),
	                              new RgbaColor('#B2B2B4'),
	                              new RgbaColor('#ACACAE'),
	                              new RgbaColor('#FDFDFD'),
	                              new RgbaColor('#8E8E8E'),
	                              new RgbaColor('#8E8E8E'),
	                              new RgbaColor('#FDFDFD'),
	                              new RgbaColor('#8E8E8E'),
	                              new RgbaColor('#8E8E8E'),
	                              new RgbaColor('#FDFDFD'),
	                              new RgbaColor('#ACACAE'),
	                              new RgbaColor('#B2B2B4'),
	                              new RgbaColor('#FDFDFD'),
	                              new RgbaColor('#FDFDFD')];
	                    grad = new ConicalGradient(fractions, colors);
	                    // Set a clip as we will be drawing outside the required area
	                    roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, 4);
	                    linBCtx.clip();
	                    grad.fillRect(linBCtx, imageWidth / 2, imageHeight / 2, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, imageWidth / 2, imageHeight / 2);
	                    // Add an additional inner shadow to fade out brightness at the top
	                    grad = linBCtx.createLinearGradient(0, frameWidth, 0, imageHeight - frameWidth * 2);
	                    grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)');
	                    grad.addColorStop(0.1, 'rgba(0, 0, 0, 0.05)');
	                    grad.addColorStop(1, 'rgba(0, 0, 0, 0)');
	                    linBCtx.fillStyle = grad;
	                    roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, 4);
	                    linBCtx.fill();
	                    linBCtx.restore();
	
	                    if (backgroundColor.name === 'TURNED') {
	                        // Define the turning radius
	                        radius = Math.sqrt((imageWidth - frameWidth * 2) * (imageWidth - frameWidth * 2) + (imageHeight - frameWidth * 2) * (imageHeight - frameWidth * 2)) / 2;
	                        turnRadius = radius * 0.55;
	                        centerX = imageWidth / 2;
	                        centerY = imageHeight / 2;
	                        // Step size proporational to radius
	                        stepSize = TWO_PI / 360 * (400 / radius);
	
	                        // Save before we start
	                        linBCtx.save();
	
	                        // Set a clip as we will be drawing outside the required area
	                        linBCtx.beginPath();
	                        roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, 4);
	                        linBCtx.clip();
	
	                        // set the style for the turnings
	                        linBCtx.lineWidth = 0.5;
	                        end = TWO_PI - stepSize * 0.3;
	                        // Step the engine round'n'round
	                        for (i = 0; i < end; i += stepSize) {
	                            // draw a 'turn'
	                            linBCtx.strokeStyle = 'rgba(240, 240, 255, 0.25)';
	                            linBCtx.beginPath();
	                            linBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);
	                            linBCtx.stroke();
	                            // rotate the 'piece'
	                            linBCtx.translate(centerX, centerY);
	                            linBCtx.rotate(stepSize * 0.3);
	                            linBCtx.translate(-centerX, -centerY);
	                            // draw a 'turn'
	                            linBCtx.strokeStyle = 'rgba(25, 10, 10, 0.1)';
	                            linBCtx.beginPath();
	                            linBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);
	                            linBCtx.stroke();
	                            linBCtx.translate(centerX, centerY);
	                            linBCtx.rotate(-stepSize * 0.3);
	                            linBCtx.translate(-centerX, -centerY);
	
	                            // rotate the 'piece'
	                            linBCtx.translate(centerX, centerY);
	                            linBCtx.rotate(stepSize);
	                            linBCtx.translate(-centerX, -centerY);
	                        }
	                        // Restore canvas now we are done
	                        linBCtx.restore();
	                    }
	                }
	                // Add an additional inner shadow to make the look more realistic
	                grad = linBCtx.createLinearGradient(frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2);
	                grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)');
	                grad.addColorStop(0.5, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(1, 'rgba(0, 0, 0, 0.25)');
	                linBCtx.fillStyle = grad;
	                roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, 4);
	                linBCtx.fill();
	
	                if (backgroundColor.name === 'BRUSHED_METAL' || backgroundColor.name === 'BRUSHED_STAINLESS') {
	                    mono = (backgroundColor.name === 'BRUSHED_METAL' ? true : false);
	                    textureColor = parseInt(backgroundColor.gradientStop.getHexColor().substr(-6), 16);
	                    texture = brushedMetalTexture(textureColor, 5, 0.1, mono, 0.5);
	                    linBCtx.fillStyle = linBCtx.createPattern(texture.fill(0, 0, imageWidth, imageHeight), 'no-repeat');
	                    linBCtx.fill();
	                }
	            } else {
	                grad = linBCtx.createLinearGradient(0, frameWidth, 0, imageHeight - frameWidth * 2);
	                grad.addColorStop(0, backgroundColor.gradientStart.getRgbaColor());
	                grad.addColorStop(0.4, backgroundColor.gradientFraction.getRgbaColor());
	                grad.addColorStop(1, backgroundColor.gradientStop.getRgbaColor());
	                linBCtx.fillStyle = grad;
	                linBCtx.fill();
	            }
	            // Add a simple inner shadow
	            colors = [ 'rgba(0, 0, 0, 0.3)',
	                       'rgba(0, 0, 0, 0.15)',
	                       'rgba(0, 0, 0, 0.07)',
	                       'rgba(0, 0, 0, 0.03)',
	                       'rgba(0, 0, 0, 0)',
	                       'rgba(0, 0, 0, 0)',
	                       'rgba(0, 0, 0, 0)'
	                     ];
	
	            for (i = 0 ; i < 7 ; i++) {
	                roundedRectangle(linBCtx, frameWidth + i, frameWidth + i, imageWidth - frameWidth * 2 - (2 * i), imageHeight - frameWidth * 2 - (2 * i), 4);
	                linBCtx.strokeStyle = colors[i];
	                linBCtx.stroke();
	            }
	            // cache the buffer
	            drawLinearBackgroundImage.cache[cacheKey] = linBBuffer;
	        }
	        ctx.drawImage(drawLinearBackgroundImage.cache[cacheKey], 0, 0);
	        return this;
	    };
	    drawLinearBackgroundImage.cache = {};
	
	    var drawRadialForegroundImage = function (ctx, foregroundType, imageWidth, imageHeight, withCenterKnob, knob, style, gaugeType, orientation) {
	        var radFgBuffer, radFgCtx,
	            knobSize = Math.ceil(imageHeight * 0.084112),
	            knobX = imageWidth * 0.5 - knobSize / 2,
	            knobY = imageHeight * 0.5 - knobSize / 2,
	            shadowOffset = imageWidth * 0.008,
	            gradHighlight, gradHighlight2,
	            cacheKey = foregroundType.type + imageWidth + imageHeight + withCenterKnob + (knob !== undefined ? knob.type : '-') +
	                       (style !== undefined ? style.style : '-') + (orientation !== undefined ? orientation.type : '-');
	
	        // check if we have already created and cached this buffer, if so return it and exit
	        if (!drawRadialForegroundImage.cache[cacheKey]) {
	            // Setup buffer
	            radFgBuffer = createBuffer(imageWidth, imageHeight);
	            radFgCtx = radFgBuffer.getContext('2d');
	
	            // center post
	            if (withCenterKnob) {
	                // Set the pointer shadow params
	                radFgCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';
	                radFgCtx.shadowOffsetX = radFgCtx.shadowOffsetY = shadowOffset;
	                radFgCtx.shadowBlur = shadowOffset * 2;
	
	                if (gaugeType === steelseries.GaugeType.TYPE5) {
	                    if (steelseries.Orientation.WEST === orientation) {
	                        knobX = imageWidth * 0.733644 - knobSize / 2;
	                        radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, knobY);
	                    } else if (steelseries.Orientation.EAST === orientation) {
	                        knobX = imageWidth * (1 - 0.733644) - knobSize / 2;
	                        radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, knobY);
	                    } else {
	                        knobY = imageHeight * 0.733644 - knobSize / 2;
	                        radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, imageHeight * 0.6857);
	                    }
	                } else {
	                    radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, knobY);
	                }
	                // Undo shadow drawing
	                radFgCtx.shadowOffsetX = radFgCtx.shadowOffsetY = 0;
	                radFgCtx.shadowBlur = 0;
	            }
	
	            // highlight
	            switch (foregroundType.type) {
	            case 'type2':
	                radFgCtx.beginPath();
	                radFgCtx.moveTo(imageWidth * 0.135514, imageHeight * 0.696261);
	                radFgCtx.bezierCurveTo(imageWidth * 0.214953, imageHeight * 0.588785, imageWidth * 0.317757, imageHeight * 0.5, imageWidth * 0.462616, imageHeight * 0.425233);
	                radFgCtx.bezierCurveTo(imageWidth * 0.612149, imageHeight * 0.345794, imageWidth * 0.733644, imageHeight * 0.317757, imageWidth * 0.873831, imageHeight * 0.322429);
	                radFgCtx.bezierCurveTo(imageWidth * 0.766355, imageHeight * 0.112149, imageWidth * 0.528037, imageHeight * 0.023364, imageWidth * 0.313084, imageHeight * 0.130841);
	                radFgCtx.bezierCurveTo(imageWidth * 0.098130, imageHeight * 0.238317, imageWidth * 0.028037, imageHeight * 0.485981, imageWidth * 0.135514, imageHeight * 0.696261);
	                radFgCtx.closePath();
	                gradHighlight = radFgCtx.createLinearGradient(0.313084 * imageWidth, 0.135514 * imageHeight, 0.495528 * imageWidth, 0.493582 * imageHeight);
	                gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');
	                gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');
	                break;
	
	            case 'type3':
	                radFgCtx.beginPath();
	                radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.509345);
	                radFgCtx.bezierCurveTo(imageWidth * 0.210280, imageHeight * 0.556074, imageWidth * 0.462616, imageHeight * 0.560747, imageWidth * 0.5, imageHeight * 0.560747);
	                radFgCtx.bezierCurveTo(imageWidth * 0.537383, imageHeight * 0.560747, imageWidth * 0.794392, imageHeight * 0.560747, imageWidth * 0.915887, imageHeight * 0.509345);
	                radFgCtx.bezierCurveTo(imageWidth * 0.915887, imageHeight * 0.275700, imageWidth * 0.738317, imageHeight * 0.084112, imageWidth * 0.5, imageHeight * 0.084112);
	                radFgCtx.bezierCurveTo(imageWidth * 0.261682, imageHeight * 0.084112, imageWidth * 0.084112, imageHeight * 0.275700, imageWidth * 0.084112, imageHeight * 0.509345);
	                radFgCtx.closePath();
	                gradHighlight = radFgCtx.createLinearGradient(0, 0.093457 * imageHeight, 0, 0.556073 * imageHeight);
	                gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');
	                gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');
	                break;
	
	            case 'type4':
	                radFgCtx.beginPath();
	                radFgCtx.moveTo(imageWidth * 0.677570, imageHeight * 0.242990);
	                radFgCtx.bezierCurveTo(imageWidth * 0.771028, imageHeight * 0.308411, imageWidth * 0.822429, imageHeight * 0.411214, imageWidth * 0.813084, imageHeight * 0.528037);
	                radFgCtx.bezierCurveTo(imageWidth * 0.799065, imageHeight * 0.654205, imageWidth * 0.719626, imageHeight * 0.757009, imageWidth * 0.593457, imageHeight * 0.799065);
	                radFgCtx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.831775, imageWidth * 0.369158, imageHeight * 0.808411, imageWidth * 0.285046, imageHeight * 0.728971);
	                radFgCtx.bezierCurveTo(imageWidth * 0.275700, imageHeight * 0.719626, imageWidth * 0.252336, imageHeight * 0.714953, imageWidth * 0.233644, imageHeight * 0.728971);
	                radFgCtx.bezierCurveTo(imageWidth * 0.214953, imageHeight * 0.747663, imageWidth * 0.219626, imageHeight * 0.771028, imageWidth * 0.228971, imageHeight * 0.775700);
	                radFgCtx.bezierCurveTo(imageWidth * 0.331775, imageHeight * 0.878504, imageWidth * 0.476635, imageHeight * 0.915887, imageWidth * 0.616822, imageHeight * 0.869158);
	                radFgCtx.bezierCurveTo(imageWidth * 0.771028, imageHeight * 0.822429, imageWidth * 0.873831, imageHeight * 0.691588, imageWidth * 0.887850, imageHeight * 0.532710);
	                radFgCtx.bezierCurveTo(imageWidth * 0.897196, imageHeight * 0.387850, imageWidth * 0.836448, imageHeight * 0.257009, imageWidth * 0.719626, imageHeight * 0.182242);
	                radFgCtx.bezierCurveTo(imageWidth * 0.705607, imageHeight * 0.172897, imageWidth * 0.682242, imageHeight * 0.163551, imageWidth * 0.663551, imageHeight * 0.186915);
	                radFgCtx.bezierCurveTo(imageWidth * 0.654205, imageHeight * 0.205607, imageWidth * 0.668224, imageHeight * 0.238317, imageWidth * 0.677570, imageHeight * 0.242990);
	                radFgCtx.closePath();
	                gradHighlight = radFgCtx.createRadialGradient((0.5) * imageWidth, ((0.5) * imageHeight), 0, ((0.5) * imageWidth), ((0.5) * imageHeight), 0.387850 * imageWidth);
	                gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0)');
	                gradHighlight.addColorStop(0.82, 'rgba(255, 255, 255, 0)');
	                gradHighlight.addColorStop(0.83, 'rgba(255, 255, 255, 0)');
	                gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.15)');
	
	                radFgCtx.beginPath();
	                radFgCtx.moveTo(imageWidth * 0.261682, imageHeight * 0.224299);
	                radFgCtx.bezierCurveTo(imageWidth * 0.285046, imageHeight * 0.238317, imageWidth * 0.252336, imageHeight * 0.285046, imageWidth * 0.242990, imageHeight * 0.317757);
	                radFgCtx.bezierCurveTo(imageWidth * 0.242990, imageHeight * 0.350467, imageWidth * 0.271028, imageHeight * 0.383177, imageWidth * 0.271028, imageHeight * 0.397196);
	                radFgCtx.bezierCurveTo(imageWidth * 0.275700, imageHeight * 0.415887, imageWidth * 0.261682, imageHeight * 0.457943, imageWidth * 0.238317, imageHeight * 0.509345);
	                radFgCtx.bezierCurveTo(imageWidth * 0.224299, imageHeight * 0.542056, imageWidth * 0.177570, imageHeight * 0.612149, imageWidth * 0.158878, imageHeight * 0.612149);
	                radFgCtx.bezierCurveTo(imageWidth * 0.144859, imageHeight * 0.612149, imageWidth * 0.088785, imageHeight * 0.546728, imageWidth * 0.130841, imageHeight * 0.369158);
	                radFgCtx.bezierCurveTo(imageWidth * 0.140186, imageHeight * 0.336448, imageWidth * 0.214953, imageHeight * 0.200934, imageWidth * 0.261682, imageHeight * 0.224299);
	                radFgCtx.closePath();
	                gradHighlight2 = radFgCtx.createLinearGradient(0.130841 * imageWidth, 0.369158 * imageHeight, 0.273839 * imageWidth, 0.412877 * imageHeight);
	                gradHighlight2.addColorStop(0, 'rgba(255, 255, 255, 0.275)');
	                gradHighlight2.addColorStop(1, 'rgba(255, 255, 255, 0.015)');
	                radFgCtx.fillStyle = gradHighlight2;
	                radFgCtx.fill();
	                break;
	
	            case 'type5':
	                radFgCtx.beginPath();
	                radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.5);
	                radFgCtx.bezierCurveTo(imageWidth * 0.084112, imageHeight * 0.271028, imageWidth * 0.271028, imageHeight * 0.084112, imageWidth * 0.5, imageHeight * 0.084112);
	                radFgCtx.bezierCurveTo(imageWidth * 0.700934, imageHeight * 0.084112, imageWidth * 0.864485, imageHeight * 0.224299, imageWidth * 0.906542, imageHeight * 0.411214);
	                radFgCtx.bezierCurveTo(imageWidth * 0.911214, imageHeight * 0.439252, imageWidth * 0.911214, imageHeight * 0.518691, imageWidth * 0.845794, imageHeight * 0.537383);
	                radFgCtx.bezierCurveTo(imageWidth * 0.794392, imageHeight * 0.546728, imageWidth * 0.551401, imageHeight * 0.411214, imageWidth * 0.392523, imageHeight * 0.457943);
	                radFgCtx.bezierCurveTo(imageWidth * 0.168224, imageHeight * 0.509345, imageWidth * 0.135514, imageHeight * 0.775700, imageWidth * 0.093457, imageHeight * 0.593457);
	                radFgCtx.bezierCurveTo(imageWidth * 0.088785, imageHeight * 0.560747, imageWidth * 0.084112, imageHeight * 0.532710, imageWidth * 0.084112, imageHeight * 0.5);
	                radFgCtx.closePath();
	                gradHighlight = radFgCtx.createLinearGradient(0, 0.084112 * imageHeight, 0, 0.644859 * imageHeight);
	                gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');
	                gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');
	                break;
	
	            case 'type1':
	            /* falls through */
	            default:
	                radFgCtx.beginPath();
	                radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.509345);
	                radFgCtx.bezierCurveTo(imageWidth * 0.205607, imageHeight * 0.448598, imageWidth * 0.336448, imageHeight * 0.415887, imageWidth * 0.5, imageHeight * 0.415887);
	                radFgCtx.bezierCurveTo(imageWidth * 0.672897, imageHeight * 0.415887, imageWidth * 0.789719, imageHeight * 0.443925, imageWidth * 0.915887, imageHeight * 0.509345);
	                radFgCtx.bezierCurveTo(imageWidth * 0.915887, imageHeight * 0.275700, imageWidth * 0.738317, imageHeight * 0.084112, imageWidth * 0.5, imageHeight * 0.084112);
	                radFgCtx.bezierCurveTo(imageWidth * 0.261682, imageHeight * 0.084112, imageWidth * 0.084112, imageHeight * 0.275700, imageWidth * 0.084112, imageHeight * 0.509345);
	                radFgCtx.closePath();
	                gradHighlight = radFgCtx.createLinearGradient(0, 0.088785 * imageHeight, 0, 0.490654 * imageHeight);
	                gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');
	                gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');
	                break;
	            }
	            radFgCtx.fillStyle = gradHighlight;
	            radFgCtx.fill();
	
	            // cache the buffer
	            drawRadialForegroundImage.cache[cacheKey] = radFgBuffer;
	        }
	        ctx.drawImage(drawRadialForegroundImage.cache[cacheKey], 0, 0);
	        return this;
	    };
	    drawRadialForegroundImage.cache = {};
	
	    var drawLinearForegroundImage = function (ctx, imageWidth, imageHeight, vertical) {
	        var linFgBuffer, linFgCtx,
	            foregroundGradient,
	            frameWidth, fgOffset, fgOffset2,
	            cacheKey = imageWidth.toString() + imageHeight + vertical;
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!drawLinearForegroundImage.cache[cacheKey]) {
	            // Setup buffer
	            linFgBuffer = createBuffer(imageWidth, imageHeight);
	            linFgCtx = linFgBuffer.getContext('2d');
	
	            frameWidth = Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04;
	            frameWidth = Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1);
	            fgOffset = frameWidth * 1.3;
	            fgOffset2 = fgOffset * 1.33;
	
	            linFgCtx.beginPath();
	            linFgCtx.moveTo(fgOffset, imageHeight - fgOffset);
	            linFgCtx.lineTo(imageWidth - fgOffset, imageHeight - fgOffset);
	            linFgCtx.bezierCurveTo(imageWidth - fgOffset, imageHeight - fgOffset, imageWidth - fgOffset2, imageHeight * 0.7, imageWidth - fgOffset2, imageHeight * 0.5);
	            linFgCtx.bezierCurveTo(imageWidth - fgOffset2, fgOffset2, imageWidth - fgOffset, fgOffset, imageWidth - frameWidth, fgOffset);
	            linFgCtx.lineTo(fgOffset, fgOffset);
	            linFgCtx.bezierCurveTo(fgOffset, fgOffset, fgOffset2, imageHeight * 0.285714, fgOffset2, imageHeight * 0.5);
	            linFgCtx.bezierCurveTo(fgOffset2, imageHeight * 0.7, fgOffset, imageHeight - fgOffset, frameWidth, imageHeight - fgOffset);
	            linFgCtx.closePath();
	
	            foregroundGradient = linFgCtx.createLinearGradient(0, (imageHeight - frameWidth), 0, frameWidth);
	            foregroundGradient.addColorStop(0, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(0.06, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(0.07, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(0.12, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(0.17, 'rgba(255, 255, 255, 0.013546)');
	            foregroundGradient.addColorStop(0.1701, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(0.79, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(0.8, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(0.84, 'rgba(255, 255, 255, 0.082217)');
	            foregroundGradient.addColorStop(0.93, 'rgba(255, 255, 255, 0.288702)');
	            foregroundGradient.addColorStop(0.94, 'rgba(255, 255, 255, 0.298039)');
	            foregroundGradient.addColorStop(0.96, 'rgba(255, 255, 255, 0.119213)');
	            foregroundGradient.addColorStop(0.97, 'rgba(255, 255, 255, 0)');
	            foregroundGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
	            linFgCtx.fillStyle = foregroundGradient;
	            linFgCtx.fill();
	
	            // cache the buffer
	            drawLinearForegroundImage.cache[cacheKey] = linFgBuffer;
	        }
	        ctx.drawImage(drawLinearForegroundImage.cache[cacheKey], 0, 0);
	        return this;
	    };
	    drawLinearForegroundImage.cache = {};
	
	    var createKnobImage = function (size, knob, style) {
	        var knobBuffer, knobCtx,
	            maxPostCenterX = size / 2,
	            maxPostCenterY = size / 2,
	            grad,
	            cacheKey = size.toString() + knob.type + style.style;
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!createKnobImage.cache[cacheKey]) {
	            knobBuffer = createBuffer(size * 1.18889, size * 1.18889);
	            knobCtx = knobBuffer.getContext('2d');
	
	            switch (knob.type) {
	            case 'metalKnob':
	                // METALKNOB_FRAME
	                knobCtx.beginPath();
	                knobCtx.moveTo(0, size * 0.5);
	                knobCtx.bezierCurveTo(0, size * 0.222222, size * 0.222222, 0, size * 0.5, 0);
	                knobCtx.bezierCurveTo(size * 0.777777, 0, size, size * 0.222222, size, size * 0.5);
	                knobCtx.bezierCurveTo(size, size * 0.777777, size * 0.777777, size, size * 0.5, size);
	                knobCtx.bezierCurveTo(size * 0.222222, size, 0, size * 0.777777, 0, size * 0.5);
	                knobCtx.closePath();
	                grad = knobCtx.createLinearGradient(0, 0, 0, size);
	                grad.addColorStop(0, 'rgb(92, 95, 101)');
	                grad.addColorStop(0.47, 'rgb(46, 49, 53)');
	                grad.addColorStop(1, 'rgb(22, 23, 26)');
	                knobCtx.fillStyle = grad;
	                knobCtx.fill();
	
	                // METALKNOB_MAIN
	                knobCtx.beginPath();
	                knobCtx.moveTo(size * 0.055555, size * 0.5);
	                knobCtx.bezierCurveTo(size * 0.055555, size * 0.277777, size * 0.277777, size * 0.055555, size * 0.5, size * 0.055555);
	                knobCtx.bezierCurveTo(size * 0.722222, size * 0.055555, size * 0.944444, size * 0.277777, size * 0.944444, size * 0.5);
	                knobCtx.bezierCurveTo(size * 0.944444, size * 0.722222, size * 0.722222, size * 0.944444, size * 0.5, size * 0.944444);
	                knobCtx.bezierCurveTo(size * 0.277777, size * 0.944444, size * 0.055555, size * 0.722222, size * 0.055555, size * 0.5);
	                knobCtx.closePath();
	                grad = knobCtx.createLinearGradient(0, 0.055555 * size, 0, 0.944443 * size);
	                switch (style.style) {
	                case 'black':
	                    grad.addColorStop(0, 'rgb(43, 42, 47)');
	                    grad.addColorStop(1, 'rgb(26, 27, 32)');
	                    break;
	
	                case 'brass':
	                    grad.addColorStop(0, 'rgb(150, 110, 54)');
	                    grad.addColorStop(1, 'rgb(124, 95, 61)');
	                    break;
	
	                case 'silver':
	                /* falls through */
	                default:
	                    grad.addColorStop(0, 'rgb(204, 204, 204)');
	                    grad.addColorStop(1, 'rgb(87, 92, 98)');
	                    break;
	                }
	                knobCtx.fillStyle = grad;
	                knobCtx.fill();
	
	                // METALKNOB_LOWERHL
	                knobCtx.beginPath();
	                knobCtx.moveTo(size * 0.777777, size * 0.833333);
	                knobCtx.bezierCurveTo(size * 0.722222, size * 0.722222, size * 0.611111, size * 0.666666, size * 0.5, size * 0.666666);
	                knobCtx.bezierCurveTo(size * 0.388888, size * 0.666666, size * 0.277777, size * 0.722222, size * 0.222222, size * 0.833333);
	                knobCtx.bezierCurveTo(size * 0.277777, size * 0.888888, size * 0.388888, size * 0.944444, size * 0.5, size * 0.944444);
	                knobCtx.bezierCurveTo(size * 0.611111, size * 0.944444, size * 0.722222, size * 0.888888, size * 0.777777, size * 0.833333);
	                knobCtx.closePath();
	                grad = knobCtx.createRadialGradient((0.555555) * size, ((0.944444) * size), 0, ((0.555555) * size), ((0.944444) * size), 0.388888 * size);
	                grad.addColorStop(0, 'rgba(255, 255, 255, 0.6)');
	                grad.addColorStop(1, 'rgba(255, 255, 255, 0)');
	                knobCtx.fillStyle = grad;
	                knobCtx.fill();
	
	                // METALKNOB_UPPERHL
	                knobCtx.beginPath();
	                knobCtx.moveTo(size * 0.944444, size * 0.277777);
	                knobCtx.bezierCurveTo(size * 0.833333, size * 0.111111, size * 0.666666, 0, size * 0.5, 0);
	                knobCtx.bezierCurveTo(size * 0.333333, 0, size * 0.166666, size * 0.111111, size * 0.055555, size * 0.277777);
	                knobCtx.bezierCurveTo(size * 0.166666, size * 0.333333, size * 0.333333, size * 0.388888, size * 0.5, size * 0.388888);
	                knobCtx.bezierCurveTo(size * 0.666666, size * 0.388888, size * 0.833333, size * 0.333333, size * 0.944444, size * 0.277777);
	                knobCtx.closePath();
	                grad = knobCtx.createRadialGradient(0.5 * size, 0, 0, ((0.5) * size), 0, 0.583333 * size);
	                grad.addColorStop(0, 'rgba(255, 255, 255, 0.749019)');
	                grad.addColorStop(1, 'rgba(255, 255, 255, 0)');
	                knobCtx.fillStyle = grad;
	                knobCtx.fill();
	
	                // METALKNOB_INNERFRAME
	                knobCtx.beginPath();
	                knobCtx.moveTo(size * 0.277777, size * 0.555555);
	                knobCtx.bezierCurveTo(size * 0.277777, size * 0.388888, size * 0.388888, size * 0.277777, size * 0.5, size * 0.277777);
	                knobCtx.bezierCurveTo(size * 0.611111, size * 0.277777, size * 0.777777, size * 0.388888, size * 0.777777, size * 0.555555);
	                knobCtx.bezierCurveTo(size * 0.777777, size * 0.666666, size * 0.611111, size * 0.777777, size * 0.5, size * 0.777777);
	                knobCtx.bezierCurveTo(size * 0.388888, size * 0.777777, size * 0.277777, size * 0.666666, size * 0.277777, size * 0.555555);
	                knobCtx.closePath();
	                grad = knobCtx.createLinearGradient(0, 0.277777 * size, 0, 0.722221 * size);
	                grad.addColorStop(0, '#000000');
	                grad.addColorStop(1, 'rgb(204, 204, 204)');
	                knobCtx.fillStyle = grad;
	                knobCtx.fill();
	
	                // METALKNOB_INNERBACKGROUND
	                knobCtx.beginPath();
	                knobCtx.moveTo(size * 0.333333, size * 0.555555);
	                knobCtx.bezierCurveTo(size * 0.333333, size * 0.444444, size * 0.388888, size * 0.333333, size * 0.5, size * 0.333333);
	                knobCtx.bezierCurveTo(size * 0.611111, size * 0.333333, size * 0.722222, size * 0.444444, size * 0.722222, size * 0.555555);
	                knobCtx.bezierCurveTo(size * 0.722222, size * 0.611111, size * 0.611111, size * 0.722222, size * 0.5, size * 0.722222);
	                knobCtx.bezierCurveTo(size * 0.388888, size * 0.722222, size * 0.333333, size * 0.611111, size * 0.333333, size * 0.555555);
	                knobCtx.closePath();
	                grad = knobCtx.createLinearGradient(0, 0.333333 * size, 0, 0.666666 * size);
	                grad.addColorStop(0, 'rgb(10, 9, 1)');
	                grad.addColorStop(1, 'rgb(42, 41, 37)');
	                knobCtx.fillStyle = grad;
	                knobCtx.fill();
	                break;
	
	            case 'standardKnob':
	                grad = knobCtx.createLinearGradient(0, 0, 0, size);
	                grad.addColorStop(0, 'rgb(180, 180, 180)');
	                grad.addColorStop(0.46, 'rgb(63, 63, 63)');
	                grad.addColorStop(1, 'rgb(40, 40, 40)');
	                knobCtx.fillStyle = grad;
	                knobCtx.beginPath();
	                knobCtx.arc(maxPostCenterX, maxPostCenterY, size / 2, 0, TWO_PI, true);
	                knobCtx.closePath();
	                knobCtx.fill();
	                grad = knobCtx.createLinearGradient(0, size - size * 0.77, 0, size - size * 0.77 + size * 0.77);
	                switch (style.style) {
	                case 'black':
	                    grad.addColorStop(0, 'rgb(191, 191, 191)');
	                    grad.addColorStop(0.5, 'rgb(45, 44, 49)');
	                    grad.addColorStop(1, 'rgb(125, 126, 128)');
	                    break;
	
	                case 'brass':
	                    grad.addColorStop(0, 'rgb(223, 208, 174)');
	                    grad.addColorStop(0.5, 'rgb(123, 95, 63)');
	                    grad.addColorStop(1, 'rgb(207, 190, 157)');
	                    break;
	
	                case 'silver':
	                /* falls through */
	                default:
	                    grad.addColorStop(0, 'rgb(215, 215, 215)');
	                    grad.addColorStop(0.5, 'rgb(116, 116, 116)');
	                    grad.addColorStop(1, 'rgb(215, 215, 215)');
	                    break;
	                }
	                knobCtx.fillStyle = grad;
	                knobCtx.beginPath();
	                knobCtx.arc(maxPostCenterX, maxPostCenterY, size * 0.77 / 2, 0, TWO_PI, true);
	                knobCtx.closePath();
	                knobCtx.fill();
	
	                grad = knobCtx.createRadialGradient(maxPostCenterX, maxPostCenterY, 0, maxPostCenterX, maxPostCenterY, size * 0.77 / 2);
	                grad.addColorStop(0, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(0.75, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(0.76, 'rgba(0, 0, 0, 0.01)');
	                grad.addColorStop(1, 'rgba(0, 0, 0, 0.2)');
	                knobCtx.fillStyle = grad;
	                knobCtx.beginPath();
	                knobCtx.arc(maxPostCenterX, maxPostCenterY, size * 0.77 / 2, 0, TWO_PI, true);
	                knobCtx.closePath();
	                knobCtx.fill();
	                break;
	            }
	
	            // cache the buffer
	            createKnobImage.cache[cacheKey] = knobBuffer;
	        }
	        return createKnobImage.cache[cacheKey];
	    };
	    createKnobImage.cache = {};
	
	    var createLedImage = function (size, state, ledColor) {
	        var ledBuffer, ledCtx,
	            ledCenterX = size / 2,
	            ledCenterY = size / 2,
	            grad,
	            cacheKey = size.toString() + state + ledColor.outerColor_ON;
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!createLedImage.cache[cacheKey]) {
	            ledBuffer = createBuffer(size, size);
	            ledCtx = ledBuffer.getContext('2d');
	
	            switch (state) {
	            case 0: // LED OFF
	                // OFF Gradient
	                grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);
	                grad.addColorStop(0, ledColor.innerColor1_OFF);
	                grad.addColorStop(0.2, ledColor.innerColor2_OFF);
	                grad.addColorStop(1, ledColor.outerColor_OFF);
	                ledCtx.fillStyle = grad;
	
	                ledCtx.beginPath();
	                ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);
	                ledCtx.closePath();
	                ledCtx.fill();
	
	                // InnerShadow
	                grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);
	                grad.addColorStop(0, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(0.8, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(1, 'rgba(0, 0, 0, 0.4)');
	                ledCtx.fillStyle = grad;
	
	                ledCtx.beginPath();
	                ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);
	                ledCtx.closePath();
	                ledCtx.fill();
	
	                // LightReflex
	                grad = ledCtx.createLinearGradient(0, 0.35 * size, 0, 0.35 * size + 0.15 * size);
	                grad.addColorStop(0, 'rgba(255, 255, 255, 0.4)');
	                grad.addColorStop(1, 'rgba(255, 255, 255, 0)');
	                ledCtx.fillStyle = grad;
	
	                ledCtx.beginPath();
	                ledCtx.arc(ledCenterX, 0.35 * size + 0.2 * size / 2, size * 0.2, 0, TWO_PI, true);
	                ledCtx.closePath();
	                ledCtx.fill();
	                break;
	
	            case 1: // LED ON
	                // ON Gradient
	                grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);
	                grad.addColorStop(0, ledColor.innerColor1_ON);
	                grad.addColorStop(0.2, ledColor.innerColor2_ON);
	                grad.addColorStop(1, ledColor.outerColor_ON);
	                ledCtx.fillStyle = grad;
	
	                ledCtx.beginPath();
	                ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);
	                ledCtx.closePath();
	                ledCtx.fill();
	
	                // InnerShadow
	                grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);
	                grad.addColorStop(0, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(0.8, 'rgba(0, 0, 0, 0)');
	                grad.addColorStop(1, 'rgba(0, 0, 0, 0.4)');
	                ledCtx.fillStyle = grad;
	
	                ledCtx.beginPath();
	                ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);
	                ledCtx.closePath();
	                ledCtx.fill();
	
	                // LightReflex
	                grad = ledCtx.createLinearGradient(0, 0.35 * size, 0, 0.35 * size + 0.15 * size);
	                grad.addColorStop(0, 'rgba(255, 255, 255, 0.4)');
	                grad.addColorStop(1, 'rgba(255, 255, 255, 0)');
	                ledCtx.fillStyle = grad;
	
	                ledCtx.beginPath();
	                ledCtx.arc(ledCenterX, 0.35 * size + 0.2 * size / 2, size * 0.2, 0, TWO_PI, true);
	                ledCtx.closePath();
	                ledCtx.fill();
	
	                // Corona
	                grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size / 2);
	                grad.addColorStop(0, setAlpha(ledColor.coronaColor, 0).color);
	                grad.addColorStop(0.6, setAlpha(ledColor.coronaColor, 0.4).color);
	                grad.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.25).color);
	                grad.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.15).color);
	                grad.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05).color);
	                grad.addColorStop(1, setAlpha(ledColor.coronaColor, 0).color);
	                ledCtx.fillStyle = grad;
	
	                ledCtx.beginPath();
	                ledCtx.arc(ledCenterX, ledCenterY, size / 2, 0, TWO_PI, true);
	                ledCtx.closePath();
	                ledCtx.fill();
	                break;
	            }
	            // cache the buffer
	            createLedImage.cache[cacheKey] = ledBuffer;
	        }
	        return createLedImage.cache[cacheKey];
	    };
	    createLedImage.cache = {};
	
	    var createLcdBackgroundImage = function (width, height, lcdColor) {
	        var lcdBuffer, lcdCtx,
	            xB = 0,
	            yB = 0,
	            wB = width,
	            hB = height,
	            rB = Math.min(width, height) * 0.095,
	            grad,
	            xF = 1,
	            yF = 1,
	            wF = width - 2,
	            hF = height - 2,
	            rF = rB - 1,
	            cacheKey = width.toString() + height + JSON.stringify(lcdColor);
	
	        // check if we have already created and cached this buffer, if not create it
	        if (!createLcdBackgroundImage.cache[cacheKey]) {
	            lcdBuffer = createBuffer(width, height);
	            lcdCtx = lcdBuffer.getContext('2d');
	            // background
	            grad = lcdCtx.createLinearGradient(0, yB, 0, yB + hB);
	            grad.addColorStop(0, '#4c4c4c');
	            grad.addColorStop(0.08, '#666666');
	            grad.addColorStop(0.92, '#666666');
	            grad.addColorStop(1, '#e6e6e6');
	            lcdCtx.fillStyle = grad;
	            roundedRectangle(lcdCtx, xB, yB, wB, hB, rB);
	            lcdCtx.fill();
	
	            // foreground
	            grad = lcdCtx.createLinearGradient(0, yF, 0, yF + hF);
	            grad.addColorStop(0, lcdColor.gradientStartColor);
	            grad.addColorStop(0.03, lcdColor.gradientFraction1Color);
	            grad.addColorStop(0.49, lcdColor.gradientFraction2Color);
	            grad.addColorStop(0.5, lcdColor.gradientFraction3Color);
	            grad.addColorStop(1, lcdColor.gradientStopColor);
	            lcdCtx.fillStyle = grad;
	            roundedRectangle(lcdCtx, xF, yF, wF, hF, rF);
	            lcdCtx.fill();
	            // cache the buffer
	            createLcdBackgroundImage.cache[cacheKey] = lcdBuffer;
	        }
	        return createLcdBackgroundImage.cache[cacheKey];
	    };
	    createLcdBackgroundImage.cache = {};
	
	    var createMeasuredValueImage = function (size, indicatorColor, radial, vertical) {
	        var indicatorBuffer, indicatorCtx,
	            cacheKey = size.toString() + indicatorColor + radial + vertical;
	
	        // check if we have already created and cached this buffer, if so return it and exit
	        if (!createMeasuredValueImage.cache[cacheKey]) {
	            indicatorBuffer = doc.createElement('canvas');
	            indicatorCtx = indicatorBuffer.getContext('2d');
	            indicatorBuffer.width = size;
	            indicatorBuffer.height = size;
	            indicatorCtx.fillStyle = indicatorColor;
	            if (radial) {
	                indicatorCtx.beginPath();
	                indicatorCtx.moveTo(size * 0.5, size);
	                indicatorCtx.lineTo(0, 0);
	                indicatorCtx.lineTo(size, 0);
	                indicatorCtx.closePath();
	                indicatorCtx.fill();
	            } else {
	                if (vertical) {
	                    indicatorCtx.beginPath();
	                    indicatorCtx.moveTo(size, size * 0.5);
	                    indicatorCtx.lineTo(0, 0);
	                    indicatorCtx.lineTo(0, size);
	                    indicatorCtx.closePath();
	                    indicatorCtx.fill();
	                } else {
	                    indicatorCtx.beginPath();
	                    indicatorCtx.moveTo(size * 0.5, 0);
	                    indicatorCtx.lineTo(size, size);
	                    indicatorCtx.lineTo(0, size);
	                    indicatorCtx.closePath();
	                    indicatorCtx.fill();
	                }
	            }
	            // cache the buffer
	            createMeasuredValueImage.cache[cacheKey] = indicatorBuffer;
	        }
	        return createMeasuredValueImage.cache[cacheKey];
	    };
	    createMeasuredValueImage.cache = {};
	
	    var createTrendIndicator = function (width, onSection, colors) {
	        var height = width * 2,
	            trendBuffer, trendCtx,
	            fill,
	            cacheKey = onSection.state + width + JSON.stringify(colors),
	
	            drawUpArrow = function () {
	                // draw up arrow (red)
	                var ledColor = colors[0];
	
	                if (onSection.state === 'up') {
	                    fill = trendCtx.createRadialGradient(0.5 * width, 0.2 * height, 0, 0.5 * width, 0.2 * height, 0.5 * width);
	                    fill.addColorStop(0, ledColor.innerColor1_ON);
	                    fill.addColorStop(0.2, ledColor.innerColor2_ON);
	                    fill.addColorStop(1, ledColor.outerColor_ON);
	                } else {
	                    fill = trendCtx.createLinearGradient(0, 0, 0, 0.5 * height);
	                    fill.addColorStop(0, '#323232');
	                    fill.addColorStop(1, '#5c5c5c');
	                }
	                trendCtx.fillStyle = fill;
	                trendCtx.beginPath();
	                trendCtx.moveTo(0.5 * width, 0);
	                trendCtx.lineTo(width, 0.2 * height);
	                trendCtx.lineTo(0.752 * width, 0.2 * height);
	                trendCtx.lineTo(0.752 * width, 0.37 * height);
	                trendCtx.lineTo(0.252 * width, 0.37 * height);
	                trendCtx.lineTo(0.252 * width, 0.2 * height);
	                trendCtx.lineTo(0, 0.2 * height);
	                trendCtx.closePath();
	                trendCtx.fill();
	                if (onSection.state !== 'up') {
	                    // Inner shadow
	                    trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0, 0.2 * height);
	                    trendCtx.lineTo(0.5 * width, 0);
	                    trendCtx.lineTo(width, 0.2 * height);
	                    trendCtx.moveTo(0.252 * width, 0.2 * height);
	                    trendCtx.lineTo(0.252 * width, 0.37 * height);
	                    trendCtx.stroke();
	                    // Inner highlight
	                    trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0.252 * width, 0.37 * height);
	                    trendCtx.lineTo(0.752 * width, 0.37 * height);
	                    trendCtx.lineTo(0.752 * width, 0.2 * height);
	                    trendCtx.lineTo(width, 0.2 * height);
	                    trendCtx.stroke();
	                } else {
	                    // draw halo
	                    fill = trendCtx.createRadialGradient(0.5 * width, 0.2 * height, 0, 0.5 * width, 0.2 * height, 0.7 * width);
	                    fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0).color);
	                    fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3).color);
	                    fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2).color);
	                    fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1).color);
	                    fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05).color);
	                    fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0).color);
	                    trendCtx.fillStyle = fill;
	
	                    trendCtx.beginPath();
	                    trendCtx.arc(0.5 * width, 0.2 * height, 0.7 * width, 0, TWO_PI, true);
	                    trendCtx.closePath();
	                    trendCtx.fill();
	                }
	            },
	
	            drawEquals = function () {
	                // draw equal symbol
	                var ledColor = colors[1];
	
	                trendCtx.beginPath();
	                if (onSection.state === 'steady') {
	                    fill = ledColor.outerColor_ON;
	                    trendCtx.fillStyle = fill;
	                    trendCtx.rect(0.128 * width, 0.41 * height, 0.744 * width, 0.074 * height);
	                    trendCtx.rect(0.128 * width, 0.516 * height, 0.744 * width, 0.074 * height);
	                    trendCtx.closePath();
	                    trendCtx.fill();
	                } else {
	                    fill = trendCtx.createLinearGradient(0, 0.41 * height, 0, 0.41 * height + 0.074 * height);
	                    fill.addColorStop(0, '#323232');
	                    fill.addColorStop(1, '#5c5c5c');
	                    trendCtx.fillStyle = fill;
	                    trendCtx.rect(0.128 * width, 0.41 * height, 0.744 * width, 0.074 * height);
	                    trendCtx.closePath();
	                    trendCtx.fill();
	                    fill = trendCtx.createLinearGradient(0, 0.516 * height, 0, 0.516 * height + 0.074 * height);
	                    fill.addColorStop(0, '#323232');
	                    fill.addColorStop(1, '#5c5c5c');
	                    trendCtx.fillStyle = fill;
	                    trendCtx.rect(0.128 * width, 0.516 * height, 0.744 * width, 0.074 * height);
	                    trendCtx.closePath();
	                    trendCtx.fill();
	                }
	                if (onSection.state !== 'steady') {
	                    // inner shadow
	                    trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0.128 * width, 0.41 * height + 0.074 * height);
	                    trendCtx.lineTo(0.128 * width, 0.41 * height);
	                    trendCtx.lineTo(0.128 * width + 0.744 * width, 0.41 * height);
	                    trendCtx.stroke();
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0.128 * width, 0.516 * height + 0.074 * height);
	                    trendCtx.lineTo(0.128 * width, 0.516 * height);
	                    trendCtx.lineTo(0.128 * width + 0.744 * width, 0.516 * height);
	                    trendCtx.stroke();
	                    // inner highlight
	                    trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0.128 * width + 0.744 * width, 0.41 * height);
	                    trendCtx.lineTo(0.128 * width + 0.744 * width, 0.41 * height + 0.074 * height);
	                    trendCtx.lineTo(0.128 * width, 0.41 * height + 0.074 * height);
	                    trendCtx.stroke();
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0.128 * width + 0.744 * width, 0.516 * height);
	                    trendCtx.lineTo(0.128 * width + 0.744 * width, 0.516 * height + 0.074 * height);
	                    trendCtx.lineTo(0.128 * width, 0.516 * height + 0.074 * height);
	                    trendCtx.stroke();
	                } else {
	                    // draw halo
	                    fill = trendCtx.createRadialGradient(0.5 * width, 0.5 * height, 0, 0.5 * width, 0.5 * height, 0.7 * width);
	                    fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0).color);
	                    fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3).color);
	                    fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2).color);
	                    fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1).color);
	                    fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05).color);
	                    fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0).color);
	                    trendCtx.fillStyle = fill;
	                    trendCtx.beginPath();
	                    trendCtx.arc(0.5 * width, 0.5 * height, 0.7 * width, 0, TWO_PI, true);
	                    trendCtx.closePath();
	                    trendCtx.fill();
	                }
	            },
	
	            drawDownArrow = function () {
	                // draw down arrow
	                var ledColor = colors[2];
	                if (onSection.state === 'down') {
	                    fill = trendCtx.createRadialGradient(0.5 * width, 0.8 * height, 0, 0.5 * width, 0.8 * height, 0.5 * width);
	                    fill.addColorStop(0, ledColor.innerColor1_ON);
	                    fill.addColorStop(0.2, ledColor.innerColor2_ON);
	                    fill.addColorStop(1, ledColor.outerColor_ON);
	                } else {
	                    fill = trendCtx.createLinearGradient(0, 0.63 * height, 0, height);
	                    fill.addColorStop(0, '#323232');
	                    fill.addColorStop(1, '#5c5c5c');
	                }
	                trendCtx.beginPath();
	                trendCtx.fillStyle = fill;
	                trendCtx.moveTo(0.5 * width, height);
	                trendCtx.lineTo(width, 0.8 * height);
	                trendCtx.lineTo(0.725 * width, 0.8 * height);
	                trendCtx.lineTo(0.725 * width, 0.63 * height);
	                trendCtx.lineTo(0.252 * width, 0.63 * height);
	                trendCtx.lineTo(0.252 * width, 0.8 * height);
	                trendCtx.lineTo(0, 0.8 * height);
	                trendCtx.closePath();
	                trendCtx.fill();
	                if (onSection.state !== 'down') {
	                    // Inner shadow
	                    trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0, 0.8 * height);
	                    trendCtx.lineTo(0.252 * width, 0.8 * height);
	                    trendCtx.moveTo(0.252 * width, 0.63 * height);
	                    trendCtx.lineTo(0.752 * width, 0.63 * height);
	                    trendCtx.stroke();
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0.752 * width, 0.8 * height);
	                    trendCtx.lineTo(width, 0.8 * height);
	                    trendCtx.stroke();
	                    // Inner highlight
	                    trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0, 0.8 * height);
	                    trendCtx.lineTo(0.5 * width, height);
	                    trendCtx.lineTo(width, 0.8 * height);
	                    trendCtx.stroke();
	                    trendCtx.beginPath();
	                    trendCtx.moveTo(0.752 * width, 0.8 * height);
	                    trendCtx.lineTo(0.752 * width, 0.63 * height);
	                    trendCtx.stroke();
	                } else {
	                    // draw halo
	                    fill = trendCtx.createRadialGradient(0.5 * width, 0.8 * height, 0, 0.5 * width, 0.8 * height, 0.7 * width);
	                    fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0).color);
	                    fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3).color);
	                    fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2).color);
	                    fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1).color);
	                    fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05).color);
	                    fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0).color);
	                    trendCtx.fillStyle = fill;
	                    trendCtx.beginPath();
	                    trendCtx.arc(0.5 * width, 0.8 * height, 0.7 * width, 0, TWO_PI, true);
	                    trendCtx.closePath();
	                    trendCtx.fill();
	                }
	            };
	
	        // Check if we have already cached this indicator, if not create it
	        if (!createTrendIndicator.cache[cacheKey]) {
	            // create oversized buffer for the glow
	            trendBuffer = createBuffer(width * 2, width * 4);
	            trendCtx = trendBuffer.getContext('2d');
	            trendCtx.translate(width * 0.5, width * 0.5);
	            // Must draw the active section last so the 'glow' is on top
	            switch (onSection.state) {
	            case 'up':
	                drawDownArrow();
	                drawEquals();
	                drawUpArrow();
	                break;
	            case 'steady':
	                drawDownArrow();
	                drawUpArrow();
	                drawEquals();
	                break;
	            case 'down':
	            /* falls through */
	            default:
	                drawUpArrow();
	                drawEquals();
	                drawDownArrow();
	                break;
	            }
	            // cache the buffer
	            createTrendIndicator.cache[cacheKey] = trendBuffer;
	        }
	        return createTrendIndicator.cache[cacheKey];
	    };
	    createTrendIndicator.cache = {};
	
	    var drawTitleImage = function (ctx, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, radial, altPos, gaugeType) {
	        gaugeType = (undefined === gaugeType ? gaugeType = steelseries.GaugeType.TYPE1 : gaugeType);
	        ctx.save();
	        ctx.textAlign = (radial ? 'center' : 'left');
	        ctx.textBaseline = 'middle';
	        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();
	        ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();
	
	        if (radial) {
	            ctx.font = 0.046728 * imageWidth + 'px ' + stdFontName;
	            ctx.fillText(titleString, imageWidth / 2, imageHeight * 0.3, imageWidth * 0.3);
	            ctx.fillText(unitString, imageWidth / 2, imageHeight * 0.38, imageWidth * 0.3);
	        } else {
	            // linear
	            if (vertical) {
	                ctx.font = 0.1 * imageWidth + 'px ' + stdFontName;
	                ctx.save();
	                ctx.translate(0.671428 * imageWidth, 0.1375 * imageHeight);
	                ctx.rotate(1.570796);
	                ctx.fillText(titleString, 0, 0);
	                ctx.translate(-0.671428 * imageWidth, -0.1375 * imageHeight);
	                ctx.restore();
	                ctx.font = 0.071428 * imageWidth + 'px ' + stdFontName;
	                if (altPos) {
	                    // LCD visible
	                    if (gaugeType.type === 'type2') {
	                        ctx.textAlign = 'right';
	                        ctx.fillText(unitString, 0.36 * imageWidth, imageHeight * 0.79, imageWidth * 0.25);
	                    } else {
	                        ctx.fillText(unitString, 0.63 * imageWidth, imageHeight * 0.85, imageWidth * 0.2);
	                    }
	                } else {
	                    // LCD hidden
	                    ctx.textAlign = 'center';
	                    if (gaugeType.type === 'type2') {
	                        ctx.fillText(unitString, imageWidth / 2, imageHeight * 0.92, imageWidth * 0.2);
	                    } else {
	                        ctx.fillText(unitString, imageWidth / 2, imageHeight * 0.89, imageWidth * 0.2);
	                    }
	                }
	            } else { //linear horizontal
	                ctx.font = 0.035 * imageWidth + 'px ' + stdFontName;
	                ctx.fillText(titleString, imageWidth * 0.15, imageHeight * 0.25, imageWidth * 0.3);
	                ctx.font = 0.025 * imageWidth + 'px ' + stdFontName;
	                ctx.fillText(unitString, imageWidth * 0.0625, imageHeight * 0.7, imageWidth * 0.07);
	            }
	        }
	        ctx.restore();
	    };
	
	    //*****************************************   T E X T U R E S   ****************************************************
	    var carbonBuffer = drawToBuffer(12, 12, function (ctx) {
	            var imageWidth = ctx.canvas.width,
	                imageHeight = ctx.canvas.height,
	                offsetX = 0,
	                offsetY = 0,
	                grad;
	
	            ctx.save();
	
	            // RULB
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(0, 0, imageWidth * 0.5, imageHeight * 0.5);
	            ctx.closePath();
	            ctx.restore();
	
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, 'rgb(35, 35, 35)');
	            grad.addColorStop(1, 'rgb(23, 23, 23)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // RULF
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(imageWidth * 0.083333, 0, imageWidth * 0.333333, imageHeight * 0.416666);
	            ctx.closePath();
	            ctx.restore();
	            offsetX = 0.083333;
	            offsetY = 0;
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, 'rgb(38, 38, 38)');
	            grad.addColorStop(1, 'rgb(30, 30, 30)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // RLRB
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(imageWidth * 0.5, imageHeight * 0.5, imageWidth * 0.5, imageHeight * 0.5);
	            ctx.closePath();
	            ctx.restore();
	            offsetX = 0.5;
	            offsetY = 0.5;
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, 'rgb(35, 35, 35)');
	            grad.addColorStop(1, 'rgb(23, 23, 23)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // RLRF
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(imageWidth * 0.583333, imageHeight * 0.5, imageWidth * 0.333333, imageHeight * 0.416666);
	            ctx.closePath();
	            ctx.restore();
	            offsetX = 0.583333;
	            offsetY = 0.5;
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, 'rgb(38, 38, 38)');
	            grad.addColorStop(1, 'rgb(30, 30, 30)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // RURB
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(imageWidth * 0.5, 0, imageWidth * 0.5, imageHeight * 0.5);
	            ctx.closePath();
	            ctx.restore();
	            offsetX = 0.5;
	            offsetY = 0;
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, '#303030');
	            grad.addColorStop(1, 'rgb(40, 40, 40)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // RURF
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(imageWidth * 0.583333, imageHeight * 0.083333, imageWidth * 0.333333, imageHeight * 0.416666);
	            ctx.closePath();
	            ctx.restore();
	            offsetX = 0.583333;
	            offsetY = 0.083333;
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, 'rgb(53, 53, 53)');
	            grad.addColorStop(1, 'rgb(45, 45, 45)');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // RLLB
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(0, imageHeight * 0.5, imageWidth * 0.5, imageHeight * 0.5);
	            ctx.closePath();
	            ctx.restore();
	            offsetX = 0;
	            offsetY = 0.5;
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, '#303030');
	            grad.addColorStop(1, '#282828');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            // RLLF
	            ctx.save();
	            ctx.beginPath();
	            ctx.rect(imageWidth * 0.083333, imageHeight * 0.583333, imageWidth * 0.333333, imageHeight * 0.416666);
	            ctx.closePath();
	            ctx.restore();
	            offsetX = 0.083333;
	            offsetY = 0.583333;
	            grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);
	            grad.addColorStop(0, '#353535');
	            grad.addColorStop(1, '#2d2d2d');
	            ctx.fillStyle = grad;
	            ctx.fill();
	
	            ctx.restore();
	        });
	
	    var punchedSheetBuffer = drawToBuffer(15, 15, function (ctx) {
	        var imageWidth = ctx.canvas.width,
	            imageHeight = ctx.canvas.height,
	            grad;
	
	        ctx.save();
	
	        // BACK
	        ctx.save();
	        ctx.beginPath();
	        ctx.rect(0, 0, imageWidth, imageHeight);
	        ctx.closePath();
	        ctx.restore();
	        ctx.fillStyle = '#1D2123';
	        ctx.fill();
	
	        // ULB
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(0, imageHeight * 0.266666);
	        ctx.bezierCurveTo(0, imageHeight * 0.4, imageWidth * 0.066666, imageHeight * 0.466666, imageWidth * 0.2, imageHeight * 0.466666);
	        ctx.bezierCurveTo(imageWidth * 0.333333, imageHeight * 0.466666, imageWidth * 0.4, imageHeight * 0.4, imageWidth * 0.4, imageHeight * 0.266666);
	        ctx.bezierCurveTo(imageWidth * 0.4, imageHeight * 0.133333, imageWidth * 0.333333, imageHeight * 0.066666, imageWidth * 0.2, imageHeight * 0.066666);
	        ctx.bezierCurveTo(imageWidth * 0.066666, imageHeight * 0.066666, 0, imageHeight * 0.133333, 0, imageHeight * 0.266666);
	        ctx.closePath();
	        grad = ctx.createLinearGradient(0, 0.066666 * imageHeight, 0, 0.466666 * imageHeight);
	        grad.addColorStop(0, '#000000');
	        grad.addColorStop(1, '#444444');
	        ctx.fillStyle = grad;
	        ctx.fill();
	
	        // ULF
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(0, imageHeight * 0.2);
	        ctx.bezierCurveTo(0, imageHeight * 0.333333, imageWidth * 0.066666, imageHeight * 0.4, imageWidth * 0.2, imageHeight * 0.4);
	        ctx.bezierCurveTo(imageWidth * 0.333333, imageHeight * 0.4, imageWidth * 0.4, imageHeight * 0.333333, imageWidth * 0.4, imageHeight * 0.2);
	        ctx.bezierCurveTo(imageWidth * 0.4, imageHeight * 0.066666, imageWidth * 0.333333, 0, imageWidth * 0.2, 0);
	        ctx.bezierCurveTo(imageWidth * 0.066666, 0, 0, imageHeight * 0.066666, 0, imageHeight * 0.2);
	        ctx.closePath();
	        ctx.fillStyle = '#050506';
	        ctx.fill();
	
	        // LRB
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.466666, imageHeight * 0.733333);
	        ctx.bezierCurveTo(imageWidth * 0.466666, imageHeight * 0.866666, imageWidth * 0.533333, imageHeight * 0.933333, imageWidth * 0.666666, imageHeight * 0.933333);
	        ctx.bezierCurveTo(imageWidth * 0.8, imageHeight * 0.933333, imageWidth * 0.866666, imageHeight * 0.866666, imageWidth * 0.866666, imageHeight * 0.733333);
	        ctx.bezierCurveTo(imageWidth * 0.866666, imageHeight * 0.6, imageWidth * 0.8, imageHeight * 0.533333, imageWidth * 0.666666, imageHeight * 0.533333);
	        ctx.bezierCurveTo(imageWidth * 0.533333, imageHeight * 0.533333, imageWidth * 0.466666, imageHeight * 0.6, imageWidth * 0.466666, imageHeight * 0.733333);
	        ctx.closePath();
	        grad = ctx.createLinearGradient(0, 0.533333 * imageHeight, 0, 0.933333 * imageHeight);
	        grad.addColorStop(0, '#000000');
	        grad.addColorStop(1, '#444444');
	        ctx.fillStyle = grad;
	        ctx.fill();
	
	        // LRF
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(imageWidth * 0.466666, imageHeight * 0.666666);
	        ctx.bezierCurveTo(imageWidth * 0.466666, imageHeight * 0.8, imageWidth * 0.533333, imageHeight * 0.866666, imageWidth * 0.666666, imageHeight * 0.866666);
	        ctx.bezierCurveTo(imageWidth * 0.8, imageHeight * 0.866666, imageWidth * 0.866666, imageHeight * 0.8, imageWidth * 0.866666, imageHeight * 0.666666);
	        ctx.bezierCurveTo(imageWidth * 0.866666, imageHeight * 0.533333, imageWidth * 0.8, imageHeight * 0.466666, imageWidth * 0.666666, imageHeight * 0.466666);
	        ctx.bezierCurveTo(imageWidth * 0.533333, imageHeight * 0.466666, imageWidth * 0.466666, imageHeight * 0.533333, imageWidth * 0.466666, imageHeight * 0.666666);
	        ctx.closePath();
	        ctx.fillStyle = '#050506';
	        ctx.fill();
	
	        ctx.restore();
	    });
	
	    var brushedMetalTexture = function (color, radius, amount, monochrome, shine) {
	
	        this.fill = function (startX, startY, endX, endY) {
	            var i, x, y,                        // loop counters
	                sinArr,
	                width, height,
	                outCanvas, outCanvasContext,    // output canvas
	                inPixels, outPixels,            // pixel arrays
	                //alpha = color & 0xff000000;
	                alpha = 255,
	                red = (color >> 16) & 0xff,
	                green = (color >> 8) & 0xff,
	                blue = color & 0xff,
	                n = 0,
	                variation = 255 * amount,
	                totR, totG, totB,
	                indx, tr, tg, tb, f;
	
	            startX = Math.floor(startX);
	            startY = Math.floor(startY);
	            endX = Math.ceil(endX);
	            endY = Math.ceil(endY);
	
	            width = endX - startX;
	            height = endY - startY;
	
	            // Create output canvas
	            outCanvas = createBuffer(width, height);
	            outCanvasContext = outCanvas.getContext('2d');
	
	            // Create pixel arrays
	            inPixels = outCanvasContext.createImageData(width, height);
	            outPixels = outCanvasContext.createImageData(width, height);
	
	            // Precreate sin() values
	            if (shine !== 0) {
	                sinArr = [];
	                for (i = 0; i < width; i++) {
	                    sinArr[i] = (255 * shine * Math.sin(i / width * PI)) | 0;
	                }
	            }
	
	            for (y = 0; y < height; y++) {
	                // The pixel array is addressed as 4 elements per pixel [r,g,b,a]
	                if (radius !== 0) {
	                    totR = totG = totB = 0;
	                }
	                for (x = 0; x < width; x ++) {
	                    indx = (y * width * 4) + (x * 4);
	                    tr = red;
	                    tg = green;
	                    tb = blue;
	                    if (shine !== 0) {
	                        f = sinArr[x];
	                        tr += f;
	                        tg += f;
	                        tb += f;
	                    }
	
	                    if (monochrome) {
	                        n = ((2 * Math.random() - 1) * variation) | 0;
	                        inPixels.data[indx]   = clamp(tr + n);
	                        inPixels.data[indx + 1] = clamp(tg + n);
	                        inPixels.data[indx + 2] = clamp(tb + n);
	                        inPixels.data[indx + 3] = alpha;
	                    } else {
	                        inPixels.data[indx]   = random(tr, variation);
	                        inPixels.data[indx + 1] = random(tg, variation);
	                        inPixels.data[indx + 2] = random(tb, variation);
	                        inPixels.data[indx + 3] = alpha;
	                    }
	                }
	            }
	
	            if (radius > 0) {
	                horizontalBlur(inPixels, outPixels, width, height, radius, alpha);
	                outCanvasContext.putImageData(outPixels, startX, startY);
	            } else {
	                outCanvasContext.putImageData(inPixels, startX, startY);
	            }
	            return outCanvas;
	        };
	
	        function random(x, vari) {
	            x += ((2 * Math.random() - 1) * vari) | 0;
	            return (x < 0 ? 0 : (x > 255 ? 255 : x));
	        }
	
	        function clamp(C) {
	            return (C < 0 ? 0 : (C > 255 ? 255 : C));
	        }
	
	        function horizontalBlur(inPix, outPix, width, height, radius, alpha) {
	            var x, y,       // loop counters
	                i, mul, indx,
	                totR, totG, totB;
	
	            if (radius >= width) {
	                radius = width - 1;
	            }
	            mul = 1 / (radius * 2 + 1);
	            indx = 0;
	            for (y = 0; y < height; y++) {
	                totR = totG = totB = 0;
	                for (x = 0; x < radius ; x++) {
	                    i = (indx + x) * 4;
	                    totR += inPix.data[i];
	                    totG += inPix.data[i + 1];
	                    totB += inPix.data[i + 2];
	                }
	                for (x = 0; x < width; x++) {
	                    if (x > radius) {
	                        i = (indx - radius - 1) * 4;
	                        totR -= inPix.data[i];
	                        totG -= inPix.data[i + 1];
	                        totB -= inPix.data[i + 2];
	                    }
	                    if (x + radius < width) {
	                        i = (indx + radius) * 4;
	                        totR += inPix.data[i];
	                        totG += inPix.data[i + 1];
	                        totB += inPix.data[i + 2];
	                    }
	                    i = indx * 4;
	                    outPix.data[i] = (totR * mul) | 0;
	                    outPix.data[i + 1] = (totG * mul) | 0;
	                    outPix.data[i + 2] = (totB * mul) | 0;
	                    outPix.data[i + 3] = alpha;
	                    indx++;
	                }
	            }
	        }
	
	        return this;
	    };
	
	    //********************************************   T O O L S   *******************************************************
	    var RgbaColor = function (r, g, b, a) {
	        var red, green, blue, alpha;
	
	        if (arguments.length === 1) {
	            // hexadecimal input #112233
	            b = parseInt(r.substr(5, 2), 16);
	            g = parseInt(r.substr(3, 2), 16);
	            r = parseInt(r.substr(1, 2), 16);
	            a = 1;
	        } else if (arguments.length === 3) {
	            a = 1;
	        }
	
	        function validateColors() {
	            red = range(r, 255);
	            green = range(g, 255);
	            blue = range(b, 255);
	            alpha = range(a, 1);
	        }
	
	        validateColors();
	
	        this.getRed = function () {
	            return red;
	        };
	
	        this.setRed = function (r) {
	            red = range(r, 255);
	        };
	
	        this.getGreen = function () {
	            return green;
	        };
	
	        this.setGreen = function (g) {
	            green = range(g, 255);
	        };
	
	        this.getBlue = function () {
	            return blue;
	        };
	
	        this.setBlue = function (b) {
	            blue = range(b, 255);
	        };
	
	        this.getAlpha = function () {
	            return alpha;
	        };
	
	        this.setAlpha = function (a) {
	            alpha = range(a, 1);
	        };
	
	        this.getRgbaColor = function () {
	            return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
	        };
	
	        this.getRgbColor = function () {
	            return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	        };
	
	        this.getHexColor = function () {
	            return '#' + red.toString(16) + green.toString(16) + blue.toString(16);
	        };
	    };
	
	    var ConicalGradient = function (fractions, colors) {
	        var limit = fractions.length - 1,
	            i;
	
	        // Pre-multipy fractions array into range -PI to PI
	        for (i = 0; i <= limit; i++) {
	            fractions[i] = TWO_PI * fractions[i] - PI;
	        }
	
	        this.fillCircle = function (ctx, centerX, centerY, innerX, outerX) {
	            var angle,
	                radius = Math.ceil(outerX),
	                diameter = radius * 2,
	                pixels, alpha,
	                x, y, dx, dy, dy2, distance,
	                indx, pixColor,
	                buffer, bufferCtx;
	
	// Original Version using rotated lines
	/*
	            ctx.save();
	            ctx.lineWidth = 1.5;
	            ctx.translate(centerX, centerY);
	            ctx.rotate(rotationOffset);
	            ctx.translate(-centerX, -centerY);
	            for (i = 0, size = fractions.length - 1; i < size; i++) {
	                startAngle = TWO_PI * fractions[i];
	                stopAngle = TWO_PI * fractions[i + 1];
	                range = stopAngle - startAngle;
	                startColor = colors[i];
	                stopColor = colors[i + 1];
	                for (angle = startAngle; angle < stopAngle; angle += angleStep) {
	                    ctx.beginPath();
	                    ctx.fillStyle = getColorFromFraction(startColor, stopColor, range, (angle - startAngle)).getRgbaColor();
	                    ctx.strokeStyle = ctx.fillStyle;
	                    if (innerX > 0) {
	                        ctx.arc(centerX, centerY, innerX, angle + angleStep, angle, true);
	                    } else {
	                        ctx.moveTo(centerX, centerY);
	                    }
	                    ctx.arc(centerX, centerY, outerX, angle, angle + angleStep);
	                    ctx.fill();
	                    ctx.stroke();
	                }
	            }
	*/
	// End - Original Version
	
	            // Create pixel array
	            pixels = ctx.createImageData(diameter, diameter);
	            alpha = 255;
	
	            for (y = 0; y < diameter; y++) {
	                dy = radius - y;
	                dy2 = dy * dy;
	                for (x = 0; x < diameter; x++) {
	                    dx = x - radius;
	                    distance = Math.sqrt((dx * dx) + dy2);
	                    if (distance <= radius && distance >= innerX) { // pixels are transparent by default, so only paint the ones we need
	                        angle = Math.atan2(dx, dy);
	                        for (i = 0; i < limit; i++) {
	                            if (angle >= fractions[i] && angle < fractions[i + 1]) {
	                                pixColor = getColorFromFraction(colors[i], colors[i + 1], fractions[i + 1] - fractions[i], angle - fractions[i], true);
	                            }
	                        }
	                        // The pixel array is addressed as 4 elements per pixel [r,g,b,a]
	                        indx = ((diameter - y) * diameter * 4) + (x * 4);  // plot is 180 rotated from orginal method, so apply a simple invert (diameter - y)
	                        pixels.data[indx]     = pixColor[0];
	                        pixels.data[indx + 1] = pixColor[1];
	                        pixels.data[indx + 2] = pixColor[2];
	                        pixels.data[indx + 3] = alpha;
	                    }
	                }
	            }
	
	            // Create a new buffer to apply the raw data so we can rotate it
	            buffer = createBuffer(diameter, diameter);
	            bufferCtx = buffer.getContext('2d');
	            bufferCtx.putImageData(pixels, 0, 0);
	            // Apply the image buffer
	            ctx.drawImage(buffer, centerX - radius, centerY - radius);
	        };
	
	        this.fillRect = function (ctx, centerX, centerY, width, height, thicknessX, thicknessY) {
	            var angle,
	                width2,
	                height2,
	                pixels, alpha,
	                x, y, dx, dy,
	                indx,
	                pixColor,
	                buffer, bufferCtx;
	
	            width = Math.ceil(width);
	            height = Math.ceil(height);
	            width2 = width / 2;
	            height2 = height / 2;
	            thicknessX = Math.ceil(thicknessX);
	            thicknessY = Math.ceil(thicknessY);
	
	            // Create pixel array
	            pixels = ctx.createImageData(width, height);
	            alpha = 255;
	
	            for (y = 0; y < height; y++) {
	                dy = height2 - y;
	                for (x = 0; x < width; x++) {
	                    if (y > thicknessY && y < height - thicknessY) {
	                        // we are in the range where we only draw the sides
	                        if (x > thicknessX && x < width - thicknessX) {
	                            // we are in the empty 'middle', jump to the next edge
	                            x = width - thicknessX;
	                        }
	                    }
	                    dx = x - width2;
	                    angle = Math.atan2(dx, dy);
	                    for (i = 0; i < limit; i++) {
	                        if (angle >= fractions[i] && angle < fractions[i + 1]) {
	                            pixColor = getColorFromFraction(colors[i], colors[i + 1], fractions[i + 1] - fractions[i], angle - fractions[i], true);
	                        }
	                    }
	                    // The pixel array is addressed as 4 elements per pixel [r,g,b,a]
	                    indx = ((height - y) * width * 4) + (x * 4); // plot is 180 rotated from orginal method, so apply a simple invert (height - y)
	                    pixels.data[indx]     = pixColor[0];
	                    pixels.data[indx + 1] = pixColor[0];
	                    pixels.data[indx + 2] = pixColor[0];
	                    pixels.data[indx + 3] = alpha;
	                }
	            }
	            // Create a new buffer to apply the raw data so we can clip it when drawing to canvas
	            buffer = createBuffer(width, height);
	            bufferCtx = buffer.getContext('2d');
	            bufferCtx.putImageData(pixels, 0, 0);
	
	            // draw the buffer back to the canvas
	            ctx.drawImage(buffer, centerX - width2, centerY - height2);
	        };
	
	    };
	
	    var GradientWrapper = function (start, end, fractions, colors) {
	
	        this.getColorAt = function (fraction) {
	            var lowerLimit = 0,
	                lowerIndex = 0,
	                upperLimit = 1,
	                upperIndex = 1,
	                i,
	                interpolationFraction;
	
	            fraction = (fraction < 0 ? 0 : (fraction > 1 ? 1 : fraction));
	
	            for (i = 0; i < fractions.length; i++) {
	                if (fractions[i] < fraction && lowerLimit < fractions[i]) {
	                    lowerLimit = fractions[i];
	                    lowerIndex = i;
	                }
	                if (fractions[i] === fraction) {
	                    return colors[i];
	                }
	                if (fractions[i] > fraction && upperLimit >= fractions[i]) {
	                    upperLimit = fractions[i];
	                    upperIndex = i;
	                }
	            }
	            interpolationFraction = (fraction - lowerLimit) / (upperLimit - lowerLimit);
	            return getColorFromFraction(colors[lowerIndex], colors[upperIndex], 1, interpolationFraction);
	        };
	
	        this.getStart = function () {
	            return start;
	        };
	
	        this.getEnd = function () {
	            return end;
	        };
	    };
	
	    function setAlpha(hex, alpha) {
	        var hexColor = ('#' === hex.charAt(0)) ? hex.substring(1, 7) : hex,
	            red = parseInt((hexColor).substring(0, 2), 16),
	            green = parseInt((hexColor).substring(2, 4), 16),
	            blue = parseInt((hexColor).substring(4, 6), 16);
	
	        this.color = 'rgba(' + red + ',' + green + ',' + blue + ',' + alpha + ')';
	
	        return this;
	    }
	
	    function getColorFromFraction(sourceColor, destinationColor, range, fraction, returnRawData) {
	        var INT_TO_FLOAT = 1 / 255,
	            sourceRed = sourceColor.getRed(),
	            sourceGreen = sourceColor.getGreen(),
	            sourceBlue = sourceColor.getBlue(),
	            sourceAlpha = sourceColor.getAlpha(),
	
	            deltaRed = destinationColor.getRed() - sourceRed,
	            deltaGreen = destinationColor.getGreen() - sourceGreen,
	            deltaBlue = destinationColor.getBlue() - sourceBlue,
	            deltaAlpha = destinationColor.getAlpha() * INT_TO_FLOAT - sourceAlpha * INT_TO_FLOAT,
	
	            fractionRed = deltaRed / range * fraction,
	            fractionGreen = deltaGreen / range * fraction,
	            fractionBlue = deltaBlue / range * fraction,
	            fractionAlpha = deltaAlpha / range * fraction;
	
	        returnRawData = returnRawData || false;
	        if (returnRawData) {
	            return [(sourceRed + fractionRed).toFixed(0), (sourceGreen + fractionGreen).toFixed(0), (sourceBlue + fractionBlue).toFixed(0), sourceAlpha + fractionAlpha];
	        } else {
	            return new RgbaColor((sourceRed + fractionRed).toFixed(0), (sourceGreen + fractionGreen).toFixed(0), (sourceBlue + fractionBlue).toFixed(0), sourceAlpha + fractionAlpha);
	        }
	    }
	
	    function section(start, stop, color) {
	        return {start : start,
	                stop : stop,
	                color : color};
	    }
	
	    Math.log10 = function (value) {
	        return (Math.log(value) / Math.LN10);
	    };
	
	    function calcNiceNumber(range, round) {
	        var exponent = Math.floor(Math.log10(range)),   // exponent of range
	            fraction = range / Math.pow(10, exponent),  // fractional part of range
	            niceFraction;                               // nice, rounded fraction
	
	        if (round) {
	            if (1.5 > fraction) {
	                niceFraction = 1;
	            } else if (3 > fraction) {
	                niceFraction = 2;
	            } else if (7 > fraction) {
	                niceFraction = 5;
	            } else {
	                niceFraction = 10;
	            }
	        } else {
	            if (1 >= fraction) {
	                niceFraction = 1;
	            } else if (2 >= fraction) {
	                niceFraction = 2;
	            } else if (5 >= fraction) {
	                niceFraction = 5;
	            } else {
	                niceFraction = 10;
	            }
	        }
	        return niceFraction * Math.pow(10, exponent);
	    }
	
	    function roundedRectangle(ctx, x, y, w, h, radius) {
	        var r = x + w,
	            b = y + h;
	        ctx.beginPath();
	        ctx.moveTo(x + radius, y);
	        ctx.lineTo(r - radius, y);
	        ctx.quadraticCurveTo(r, y, r, y + radius);
	        ctx.lineTo(r, y + h - radius);
	        ctx.quadraticCurveTo(r, b, r - radius, b);
	        ctx.lineTo(x + radius, b);
	        ctx.quadraticCurveTo(x, b, x, b - radius);
	        ctx.lineTo(x, y + radius);
	        ctx.quadraticCurveTo(x, y, x + radius, y);
	        ctx.closePath();
	        ctx.stroke();
	    }
	
	    function createBuffer(width, height) {
	        var buffer = doc.createElement('canvas');
	        buffer.width = width;
	        buffer.height = height;
	        return buffer;
	    }
	
	    function drawToBuffer(width, height, drawFunction) {
	        var buffer = doc.createElement('canvas');
	        buffer.width = width;
	        buffer.height = height;
	        drawFunction(buffer.getContext('2d'));
	        return buffer;
	    }
	
	    function getColorValues(color) {
	        var colorData,
	            lookupBuffer = drawToBuffer(1, 1, function (ctx) {
	                ctx.fillStyle = color;
	                ctx.beginPath();
	                ctx.rect(0, 0, 1, 1);
	                ctx.fill();
	            });
	        colorData = lookupBuffer.getContext('2d').getImageData(0, 0, 2, 2).data;
	
	        /*
	        for (var i = 0; i < data.length; i += 4) {
	            var red = data[i];       // red
	            var green = data[i + 1]; // green
	            var blue = data[i + 2];  // blue
	            //var alpha = data[i + 3]; // alpha
	            console.log(red + ', ' + green + ', ' + blue);
	        }
	        */
	
	        return [colorData[0], colorData[1], colorData[2], colorData[3]];
	    }
	
	    function customColorDef(color) {
	        var VERY_DARK,
	            DARK,
	            LIGHT,
	            LIGHTER,
	            VERY_LIGHT,
	            values = getColorValues(color),
	            rgbaCol = new RgbaColor(values[0], values[1], values[2], values[3]);
	
	        VERY_DARK = darker(rgbaCol, 0.32);
	        DARK = darker(rgbaCol, 0.62);
	        LIGHT = lighter(rgbaCol, 0.84);
	        LIGHTER = lighter(rgbaCol, 0.94);
	        VERY_LIGHT = lighter(rgbaCol, 1);
	
	        return new ColorDef(VERY_DARK, DARK, rgbaCol, LIGHT, LIGHTER, VERY_LIGHT);
	    }
	
	    function rgbToHsl(red, green, blue) {
	        var min, max, hue, saturation, lightness, delta;
	
	        red /= 255;
	        green /= 255;
	        blue /= 255;
	
	        max = Math.max(red, green, blue);
	        min = Math.min(red, green, blue);
	        lightness = (max + min) / 2;
	
	        if (max === min) {
	            hue = saturation = 0; // achromatic
	        } else {
	            delta = max - min;
	            saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
	            switch (max) {
	            case red:
	                hue = (green - blue) / delta + (green < blue ? 6 : 0);
	                break;
	            case green:
	                hue = (blue - red) / delta + 2;
	                break;
	            case blue:
	                hue = (red - green) / delta + 4;
	                break;
	            }
	            hue /= 6;
	        }
	        return [hue, saturation, lightness];
	    }
	
	/* These functions are not currently used
	    function hslToRgb(hue, saturation, lightness) {
	        var red, green, blue, p, q;
	
	        function hue2rgb(p, q, t) {
	            if (t < 0) {
	                t += 1;
	            }
	            if (t > 1) {
	                t -= 1;
	            }
	            if (t < 1 / 6) {
	                return p + (q - p) * 6 * t;
	            }
	            if (t < 1 / 2) {
	                return q;
	            }
	            if (t < 2 / 3) {
	                return p + (q - p) * (2 / 3 - t) * 6;
	            }
	            return p;
	        }
	
	        if (saturation === 0) {
	            red = green = blue = lightness; // achromatic
	        } else {
	            q = (lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation);
	            p = 2 * lightness - q;
	            red = hue2rgb(p, q, hue + 1 / 3);
	            green = hue2rgb(p, q, hue);
	            blue = hue2rgb(p, q, hue - 1 / 3);
	        }
	
	        return [Math.floor(red * 255), Math.floor(green * 255), Math.floor(blue * 255)];
	    }
	
	    function hsbToHsl(hue, saturation, brightness) {
	        var lightness = (brightness - saturation) / 2;
	        lightness = range(lightness, 1);
	        return [hue, saturation, lightness];
	    }
	
	    function hslToHsb(hue, saturation, lightness) {
	        var brightness = (lightness * 2) + saturation;
	        return [hue, saturation, brightness];
	    }
	*/
	
	    function hsbToRgb(hue, saturation, brightness) {
	        var r, g, b,
	            i = Math.floor(hue * 6),
	            f = hue * 6 - i,
	            p = brightness * (1 - saturation),
	            q = brightness * (1 - f * saturation),
	            t = brightness * (1 - (1 - f) * saturation);
	
	        switch (i % 6) {
	        case 0:
	            r = brightness;
	            g = t;
	            b = p;
	            break;
	        case 1:
	            r = q;
	            g = brightness;
	            b = p;
	            break;
	        case 2:
	            r = p;
	            g = brightness;
	            b = t;
	            break;
	        case 3:
	            r = p;
	            g = q;
	            b = brightness;
	            break;
	        case 4:
	            r = t;
	            g = p;
	            b = brightness;
	            break;
	        case 5:
	            r = brightness;
	            g = p;
	            b = q;
	            break;
	        }
	
	        return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
	    }
	
	    function rgbToHsb(r, g, b) {
	        var min, max, hue, saturation, brightness, delta;
	
	        r = r / 255;
	        g = g / 255;
	        b = b / 255;
	        max = Math.max(r, g, b);
	        min = Math.min(r, g, b);
	        brightness = max;
	        delta = max - min;
	        saturation = max === 0 ? 0 : delta / max;
	
	        if (max === min) {
	            hue = 0; // achromatic
	        } else {
	            switch (max) {
	            case r:
	                hue = (g - b) / delta + (g < b ? 6 : 0);
	                break;
	            case g:
	                hue = (b - r) / delta + 2;
	                break;
	            case b:
	                hue = (r - g) / delta + 4;
	                break;
	            }
	            hue /= 6;
	        }
	        return [hue, saturation, brightness];
	    }
	
	    function range(value, limit) {
	        return (value < 0 ? 0 : (value > limit ? limit : value));
	    }
	
	    function darker(color, fraction) {
	        var red = Math.floor(color.getRed() * (1 - fraction)),
	            green = Math.floor(color.getGreen() * (1 - fraction)),
	            blue = Math.floor(color.getBlue() * (1 - fraction));
	
	        red = range(red, 255);
	        green = range(green, 255);
	        blue = range(blue, 255);
	
	        return new RgbaColor(red, green, blue, color.getAlpha());
	    }
	
	    function lighter(color, fraction) {
	        var red = Math.round(color.getRed() * (1 + fraction)),
	            green = Math.round(color.getGreen() * (1 + fraction)),
	            blue = Math.round(color.getBlue() * (1 + fraction));
	
	        red = range(red, 255);
	        green = range(green, 255);
	        blue = range(blue, 255);
	
	        return new RgbaColor(red, green, blue, color.getAlpha());
	    }
	
	    function wrap(value, lower, upper) {
	        var distance, times;
	        if (upper <= lower) {
	            throw 'Rotary bounds are of negative or zero size';
	        }
	
	        distance = upper - lower;
	        times = Math.floor((value - lower) / distance);
	
	        return value - (times * distance);
	    }
	
	    function getShortestAngle(from, to) {
	        return wrap((to - from), -180, 180);
	    }
	
	    // shim layer
	    var requestAnimFrame = (function () {
	        return  window.requestAnimationFrame   ||
	            window.webkitRequestAnimationFrame ||
	            window.mozRequestAnimationFrame    ||
	            window.oRequestAnimationFrame      ||
	            window.msRequestAnimationFrame     ||
	            function (callback) {
	                window.setTimeout(callback, 1000 / 16);
	            };
	    }());
	
	    function getCanvasContext(elementOrId) {
	        var element = (typeof elementOrId === 'string' || elementOrId instanceof String) ?
	            doc.getElementById(elementOrId) : elementOrId;
	        return element.getContext('2d');
	    }
	
	/*
	    function blur(ctx, width, height, radius) {
	    // This function is too CPU expensive
	    // leave disabled for now :(
	
	        // Cheap'n'cheerful blur filter, just applies horizontal and vertical blurs
	        // Only works for square canvas's at present
	
	        var j, x, y,      // loop counters
	            i,
	            end,
	            totR, totG, totB, totA,
	            // Create a temporary buffer
	            tempBuffer = createBuffer(width, height),
	            tempCtx = tempBuffer.getContext('2d'),
	            // pixel data
	            inPix, outPix,
	            mul,
	            indx;
	
	        ctx.save();
	
	        for (j = 0; j < 2; j++) {
	            // Get access to the pixel data
	            inPix = ctx.getImageData(0, 0, (j === 0 ? width : height), (j === 0 ? height : width));
	            outPix = ctx.createImageData((j === 0 ? width : height), (j === 0 ? height : width));
	
	            if (j === 0) { // Horizontal blur
	                if (radius >= width) {
	                    radius = width - 1;
	                }
	            } else { // Vertical blur
	                if (radius >= height) {
	                    radius = height - 1;
	                }
	            }
	            mul = 1 / (radius * 2 + 1);
	            indx = 0;
	            for (y = 0, end = (j === 0 ? height : width); y < end; y++) {
	                totR = totG = totB = totA = 0;
	                for (x = 0; x < radius ; x++) {
	                    i = (indx + x) * 4;
	                    totR += inPix.data[i];
	                    totG += inPix.data[i + 1];
	                    totB += inPix.data[i + 2];
	                    totA += inPix.data[i + 3];
	                }
	                for (x = 0; x < (j === 0 ? width : height); x++) {
	                    if (x > radius) {
	                        i = (indx - radius - 1) * 4;
	                        totR -= inPix.data[i];
	                        totG -= inPix.data[i + 1];
	                        totB -= inPix.data[i + 2];
	                        totA -= inPix.data[i + 3];
	                    }
	                    if (x + radius < width) {
	                        i = (indx + radius) * 4;
	                        totR += inPix.data[i];
	                        totG += inPix.data[i + 1];
	                        totB += inPix.data[i + 2];
	                        totA += inPix.data[i + 3];
	                    }
	                    i = indx * 4;
	                    outPix.data[i] = (totR * mul) | 0;
	                    outPix.data[i + 1] = (totG * mul) | 0;
	                    outPix.data[i + 2] = (totB * mul) | 0;
	                    outPix.data[i + 3] = (totA * mul) | 0;
	                    indx++;
	                }
	            }
	            // Write the output pixel data back to the temp buffer
	            tempCtx.clearRect(0, 0, width, height);
	            tempCtx.putImageData(outPix, 0, 0);
	            if (j === 0) {
	                // Clear the input canvas
	                ctx.clearRect(0, 0, width, height);
	                // Rotate image by 90 degrees
	                ctx.translate(width / 2, height / 2);
	                ctx.rotate(HALF_PI);
	                ctx.translate(-width / 2, -height / 2);
	                // Write the buffer back
	                ctx.drawImage(tempBuffer, 0, 0);
	            }
	        }
	        ctx.translate(width / 2, height / 2);
	        ctx.rotate(-PI);
	        ctx.translate(-width / 2, -height / 2);
	        // Clear the input canvas
	        ctx.clearRect(0, 0, width, height);
	        ctx.drawImage(tempBuffer, 0, 0);
	        ctx.restore();
	
	    }
	*/
	    //****************************************   C O N S T A N T S   ***************************************************
	    var BackgroundColorDef;
	    (function () {
	        BackgroundColorDef = function (gradientStart, gradientFraction, gradientStop, labelColor, symbolColor, name) {
	            this.gradientStart = gradientStart;
	            this.gradientFraction = gradientFraction;
	            this.gradientStop = gradientStop;
	            this.labelColor = labelColor;
	            this.symbolColor = symbolColor;
	            this.name = name;
	        };
	    }());
	
	    var LcdColorDef;
	    (function () {
	        LcdColorDef = function (gradientStartColor, gradientFraction1Color, gradientFraction2Color, gradientFraction3Color, gradientStopColor, textColor) {
	            this.gradientStartColor = gradientStartColor;
	            this.gradientFraction1Color = gradientFraction1Color;
	            this.gradientFraction2Color = gradientFraction2Color;
	            this.gradientFraction3Color = gradientFraction3Color;
	            this.gradientStopColor = gradientStopColor;
	            this.textColor = textColor;
	        };
	    }());
	
	    var ColorDef;
	    (function () {
	        ColorDef = function (veryDark, dark, medium, light, lighter, veryLight) {
	            this.veryDark = veryDark;
	            this.dark = dark;
	            this.medium = medium;
	            this.light = light;
	            this.lighter = lighter;
	            this.veryLight = veryLight;
	        };
	    }());
	
	    var LedColorDef;
	    (function () {
	        LedColorDef = function (innerColor1_ON, innerColor2_ON, outerColor_ON, coronaColor, innerColor1_OFF, innerColor2_OFF, outerColor_OFF) {
	            this.innerColor1_ON = innerColor1_ON;
	            this.innerColor2_ON = innerColor2_ON;
	            this.outerColor_ON = outerColor_ON;
	            this.coronaColor = coronaColor;
	            this.innerColor1_OFF = innerColor1_OFF;
	            this.innerColor2_OFF = innerColor2_OFF;
	            this.outerColor_OFF = outerColor_OFF;
	        };
	    }());
	
	    var GaugeTypeDef;
	    (function () {
	        GaugeTypeDef = function (type) {
	            this.type = type;
	        };
	    }());
	
	    var OrientationDef;
	    (function () {
	        OrientationDef = function (type) {
	            this.type = type;
	        };
	    }());
	
	    var KnobTypeDef;
	    (function () {
	        KnobTypeDef = function (type) {
	            this.type = type;
	        };
	    }());
	
	    var KnobStyleDef;
	    (function () {
	        KnobStyleDef = function (style) {
	            this.style = style;
	        };
	    }());
	
	    var FrameDesignDef;
	    (function () {
	        FrameDesignDef = function (design) {
	            this.design = design;
	        };
	    }());
	
	    var PointerTypeDef;
	    (function () {
	        PointerTypeDef = function (type) {
	            this.type = type;
	        };
	    }());
	
	    var ForegroundTypeDef;
	    (function () {
	        ForegroundTypeDef = function (type) {
	            this.type = type;
	        };
	    }());
	
	    var LabelNumberFormatDef;
	    (function () {
	        LabelNumberFormatDef = function (format) {
	            this.format = format;
	        };
	    }());
	
	    var TickLabelOrientationDef;
	    (function () {
	        TickLabelOrientationDef = function (type) {
	            this.type = type;
	        };
	    }());
	
	    var TrendStateDef;
	    (function () {
	        TrendStateDef = function (state) {
	            this.state = state;
	        };
	    }());
	
	    //*************************   I m p l e m e n t a t i o n s   o f   d e f i n i t i o n s   ************************
	    var backgroundColor = {
	        DARK_GRAY: new BackgroundColorDef(new RgbaColor(0, 0, 0, 1), new RgbaColor(51, 51, 51, 1), new RgbaColor(153, 153, 153, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(180, 180, 180, 1), 'DARK_GRAY'),
	        SATIN_GRAY: new BackgroundColorDef(new RgbaColor(45, 57, 57, 1), new RgbaColor(45, 57, 57, 1), new RgbaColor(45, 57, 57, 1), new RgbaColor(167, 184, 180, 1), new RgbaColor(137, 154, 150, 1), 'SATIN_GRAY'),
	        LIGHT_GRAY: new BackgroundColorDef(new RgbaColor(130, 130, 130, 1), new RgbaColor(181, 181, 181, 1), new RgbaColor(253, 253, 253, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'LIGHT_GRAY'),
	        WHITE: new BackgroundColorDef(new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'WHITE'),
	        BLACK: new BackgroundColorDef(new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(150, 150, 150, 1), 'BLACK'),
	        BEIGE: new BackgroundColorDef(new RgbaColor(178, 172, 150, 1), new RgbaColor(204, 205, 184, 1), new RgbaColor(231, 231, 214, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'BEIGE'),
	        BROWN: new BackgroundColorDef(new RgbaColor(245, 225, 193, 1), new RgbaColor(245, 225, 193, 1), new RgbaColor(255, 250, 240, 1), new RgbaColor(109, 73, 47, 1), new RgbaColor(89, 53, 27, 1), 'BROWN'),
	        RED: new BackgroundColorDef(new RgbaColor(198, 93, 95, 1), new RgbaColor(212, 132, 134, 1), new RgbaColor(242, 218, 218, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(90, 0, 0, 1), 'RED'),
	        GREEN: new BackgroundColorDef(new RgbaColor(65, 120, 40, 1), new RgbaColor(129, 171, 95, 1), new RgbaColor(218, 237, 202, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 90, 0, 1), 'GREEN'),
	        BLUE: new BackgroundColorDef(new RgbaColor(45, 83, 122, 1), new RgbaColor(115, 144, 170, 1), new RgbaColor(227, 234, 238, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 0, 90, 1), 'BLUE'),
	        ANTHRACITE: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(250, 250, 250, 1), new RgbaColor(180, 180, 180, 1), 'ANTHRACITE'),
	        MUD: new BackgroundColorDef(new RgbaColor(80, 86, 82, 1), new RgbaColor(70, 76, 72, 1), new RgbaColor(57, 62, 58, 1), new RgbaColor(255, 255, 240, 1), new RgbaColor(225, 225, 210, 1), 'MUD'),
	        PUNCHED_SHEET: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(180, 180, 180, 1), 'PUNCHED_SHEET'),
	        CARBON: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(180, 180, 180, 1), 'CARBON'),
	        STAINLESS: new BackgroundColorDef(new RgbaColor(130, 130, 130, 1), new RgbaColor(181, 181, 181, 1), new RgbaColor(253, 253, 253, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'STAINLESS'),
	        BRUSHED_METAL: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'BRUSHED_METAL'),
	        BRUSHED_STAINLESS: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(110, 110, 112, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'BRUSHED_STAINLESS'),
	        TURNED: new BackgroundColorDef(new RgbaColor(130, 130, 130, 1), new RgbaColor(181, 181, 181, 1), new RgbaColor(253, 253, 253, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'TURNED')
	    };
	
	    var lcdColor = {
	        BEIGE: new LcdColorDef('#c8c8b1', 'rgb(241, 237, 207)', 'rgb(234, 230, 194)', 'rgb(225, 220, 183)', 'rgb(237, 232, 191)', '#000000'),
	        BLUE: new LcdColorDef('#ffffff', 'rgb(231, 246, 255)', 'rgb(170, 224, 255)', 'rgb(136, 212, 255)', 'rgb(192, 232, 255)', '#124564'),
	        ORANGE: new LcdColorDef('#ffffff', 'rgb(255, 245, 225)', 'rgb(255, 217, 147)', 'rgb(255, 201, 104)', 'rgb(255, 227, 173)', '#503700'),
	        RED: new LcdColorDef('#ffffff', 'rgb(255, 225, 225)', 'rgb(253, 152, 152)', 'rgb(252, 114, 115)', 'rgb(254, 178, 178)', '#4f0c0e'),
	        YELLOW: new LcdColorDef('#ffffff', 'rgb(245, 255, 186)', 'rgb(210, 255, 0)', 'rgb(158, 205, 0)', 'rgb(210, 255, 0)', '#405300'),
	        WHITE: new LcdColorDef('#ffffff', '#ffffff', 'rgb(241, 246, 242)', 'rgb(229, 239, 244)', '#ffffff', '#000000'),
	        GRAY: new LcdColorDef('#414141', 'rgb(117, 117, 117)', 'rgb(87, 87, 87)', '#414141', 'rgb(81, 81, 81)', '#ffffff'),
	        BLACK: new LcdColorDef('#414141', '#666666', '#333333', '#000000', '#333333', '#cccccc'),
	        GREEN: new LcdColorDef('rgb(33, 67, 67)', 'rgb(33, 67, 67)', 'rgb(29, 58, 58)', 'rgb(28, 57, 57)', 'rgb(23, 46, 46)', 'rgba(0, 185, 165, 255)'),
	        BLUE2: new LcdColorDef('rgb(0, 68, 103)', 'rgb(8, 109, 165)', 'rgb(0, 72, 117)', 'rgb(0, 72, 117)', 'rgb(0, 68, 103)', 'rgb(111, 182, 228)'),
	        BLUE_BLACK: new LcdColorDef('rgb(22, 125, 212)', 'rgb(3, 162, 254)', 'rgb(3, 162, 254)', 'rgb(3, 162, 254)', 'rgb(11, 172, 244)', '#000000'),
	        BLUE_DARKBLUE: new LcdColorDef('rgb(18, 33, 88)', 'rgb(18, 33, 88)', 'rgb(19, 30, 90)', 'rgb(17, 31, 94)', 'rgb(21, 25, 90)', 'rgb(23, 99, 221)'),
	        BLUE_GRAY: new LcdColorDef('rgb(135, 174, 255)', 'rgb(101, 159, 255)', 'rgb(44, 93, 255)', 'rgb(27, 65, 254)', 'rgb(12, 50, 255)', '#b2b4ed'),
	        STANDARD: new LcdColorDef('rgb(131, 133, 119)', 'rgb(176, 183, 167)', 'rgb(165, 174, 153)', 'rgb(166, 175, 156)', 'rgb(175, 184, 165)', 'rgb(35, 42, 52)'),
	        STANDARD_GREEN: new LcdColorDef('#ffffff', 'rgb(219, 230, 220)', 'rgb(179, 194, 178)', 'rgb(153, 176, 151)', 'rgb(114, 138, 109)', '#080C06'),
	        BLUE_BLUE: new LcdColorDef('rgb(100, 168, 253)', 'rgb(100, 168, 253)', 'rgb(95, 160, 250)', 'rgb(80, 144, 252)', 'rgb(74, 134, 255)', '#002cbb'),
	        RED_DARKRED: new LcdColorDef('rgb(72, 36, 50)', 'rgb(185, 111, 110)', 'rgb(148, 66, 72)', 'rgb(83, 19, 20)', 'rgb(7, 6, 14)', '#FE8B92'),
	        DARKBLUE: new LcdColorDef('rgb(14, 24, 31)', 'rgb(46, 105, 144)', 'rgb(19, 64, 96)', 'rgb(6, 20, 29)', 'rgb(8, 9, 10)', '#3DB3FF'),
	        LILA: new LcdColorDef('rgb(175, 164, 255)', 'rgb(188, 168, 253)', 'rgb(176, 159, 255)', 'rgb(174, 147, 252)', 'rgb(168, 136, 233)', '#076148'),
	        BLACKRED: new LcdColorDef('rgb(8, 12, 11)', 'rgb(10, 11, 13)', 'rgb(11, 10, 15)', 'rgb(7, 13, 9)', 'rgb(9, 13, 14)', '#B50026'),
	        DARKGREEN: new LcdColorDef('rgb(25, 85, 0)', 'rgb(47, 154, 0)', 'rgb(30, 101, 0)', 'rgb(30, 101, 0)', 'rgb(25, 85, 0)', '#233123'),
	        AMBER: new LcdColorDef('rgb(182, 71, 0)', 'rgb(236, 155, 25)', 'rgb(212, 93, 5)', 'rgb(212, 93, 5)', 'rgb(182, 71, 0)', '#593A0A'),
	        LIGHTBLUE: new LcdColorDef('rgb(125, 146, 184)', 'rgb(197, 212, 231)', 'rgb(138, 155, 194)', 'rgb(138, 155, 194)', 'rgb(125, 146, 184)', '#090051'),
	        SECTIONS: new LcdColorDef('#b2b2b2', '#ffffff', '#c4c4c4', '#c4c4c4', '#b2b2b2', '#000000')
	    };
	
	    var color = {
	        RED: new ColorDef(new RgbaColor(82, 0, 0, 1), new RgbaColor(158, 0, 19, 1), new RgbaColor(213, 0, 25, 1), new RgbaColor(240, 82, 88, 1), new RgbaColor(255, 171, 173, 1), new RgbaColor(255, 217, 218, 1)),
	        GREEN: new ColorDef(new RgbaColor(8, 54, 4, 1), new RgbaColor(0, 107, 14, 1), new RgbaColor(15, 148, 0, 1), new RgbaColor(121, 186, 37, 1), new RgbaColor(190, 231, 141, 1), new RgbaColor(234, 247, 218, 1)),
	        BLUE: new ColorDef(new RgbaColor(0, 11, 68, 1), new RgbaColor(0, 73, 135, 1), new RgbaColor(0, 108, 201, 1), new RgbaColor(0, 141, 242, 1), new RgbaColor(122, 200, 255, 1), new RgbaColor(204, 236, 255, 1)),
	        ORANGE: new ColorDef(new RgbaColor(118, 83, 30, 1), new RgbaColor(215, 67, 0, 1), new RgbaColor(240, 117, 0, 1), new RgbaColor(255, 166, 0, 1), new RgbaColor(255, 255, 128, 1), new RgbaColor(255, 247, 194, 1)),
	        YELLOW: new ColorDef(new RgbaColor(41, 41, 0, 1), new RgbaColor(102, 102, 0, 1), new RgbaColor(177, 165, 0, 1), new RgbaColor(255, 242, 0, 1), new RgbaColor(255, 250, 153, 1), new RgbaColor(255, 252, 204, 1)),
	        CYAN: new ColorDef(new RgbaColor(15, 109, 109, 1), new RgbaColor(0, 109, 144, 1), new RgbaColor(0, 144, 191, 1), new RgbaColor(0, 174, 239, 1), new RgbaColor(153, 223, 249, 1), new RgbaColor(204, 239, 252, 1)),
	        MAGENTA: new ColorDef(new RgbaColor(98, 0, 114, 1), new RgbaColor(128, 24, 72, 1), new RgbaColor(191, 36, 107, 1), new RgbaColor(255, 48, 143, 1), new RgbaColor(255, 172, 210, 1), new RgbaColor(255, 214, 23, 1)),
	        WHITE: new ColorDef(new RgbaColor(210, 210, 210, 1), new RgbaColor(220, 220, 220, 1), new RgbaColor(235, 235, 235, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1)),
	        GRAY: new ColorDef(new RgbaColor(25, 25, 25, 1), new RgbaColor(51, 51, 51, 1), new RgbaColor(76, 76, 76, 1), new RgbaColor(128, 128, 128, 1), new RgbaColor(204, 204, 204, 1), new RgbaColor(243, 243, 243, 1)),
	        BLACK: new ColorDef(new RgbaColor(0, 0, 0, 1), new RgbaColor(5, 5, 5, 1), new RgbaColor(10, 10, 10, 1), new RgbaColor(15, 15, 15, 1), new RgbaColor(20, 20, 20, 1), new RgbaColor(25, 25, 25, 1)),
	        RAITH: new ColorDef(new RgbaColor(0, 32, 65, 1), new RgbaColor(0, 65, 125, 1), new RgbaColor(0, 106, 172, 1), new RgbaColor(130, 180, 214, 1), new RgbaColor(148, 203, 242, 1), new RgbaColor(191, 229, 255, 1)),
	        GREEN_LCD: new ColorDef(new RgbaColor(0, 55, 45, 1), new RgbaColor(15, 109, 93, 1), new RgbaColor(0, 185, 165, 1), new RgbaColor(48, 255, 204, 1), new RgbaColor(153, 255, 227, 1), new RgbaColor(204, 255, 241, 1)),
	        JUG_GREEN: new ColorDef(new RgbaColor(0, 56, 0, 1), new RgbaColor(32, 69, 36, 1), new RgbaColor(50, 161, 0, 1), new RgbaColor(129, 206, 0, 1), new RgbaColor(190, 231, 141, 1), new RgbaColor(234, 247, 218, 1))
	    };
	
	    var ledColor = {
	        RED_LED: new LedColorDef('#FF9A89', '#FF9A89', '#FF3300', '#FF8D70', '#7E1C00', '#7E1C00', '#641B00'),
	        GREEN_LED: new LedColorDef('#9AFF89', '#9AFF89', '#59FF2A', '#A5FF00', '#1C7E00', '#1C7E00', '#1B6400'),
	        BLUE_LED: new LedColorDef('#899AFF', '#899AFF', '#0033FF', '#708DFF', '#001C7E', '#001C7E', '#001B64'),
	        ORANGE_LED: new LedColorDef('#FEA23F', '#FEA23F', '#FD6C00', '#FD6C00', '#592800', '#592800', '#421F00'),
	        YELLOW_LED: new LedColorDef('#FFFF62', '#FFFF62', '#FFFF00', '#FFFF00', '#6B6D00', '#6B6D00', '#515300'),
	        CYAN_LED: new LedColorDef('#00FFFF', '#00FFFF', '#1BC3C3', '#00FFFF', '#083B3B', '#083B3B', '#052727'),
	        MAGENTA_LED: new LedColorDef('#D300FF', '#D300FF', '#8600CB', '#C300FF', '#38004B', '#38004B', '#280035')
	    };
	
	    var gaugeType = {
	        TYPE1: new GaugeTypeDef('type1'),
	        TYPE2: new GaugeTypeDef('type2'),
	        TYPE3: new GaugeTypeDef('type3'),
	        TYPE4: new GaugeTypeDef('type4'),
	        TYPE5: new GaugeTypeDef('type5')
	    };
	
	    var orientation = {
	        NORTH: new OrientationDef('north'),
	        SOUTH: new OrientationDef('south'),
	        EAST: new OrientationDef('east'),
	        WEST: new OrientationDef('west')
	    };
	
	    var knobType = {
	        STANDARD_KNOB: new KnobTypeDef('standardKnob'),
	        METAL_KNOB: new KnobTypeDef('metalKnob')
	    };
	
	    var knobStyle = {
	        BLACK: new KnobStyleDef('black'),
	        BRASS: new KnobStyleDef('brass'),
	        SILVER: new KnobStyleDef('silver')
	    };
	
	    var frameDesign = {
	        BLACK_METAL: new FrameDesignDef('blackMetal'),
	        METAL: new FrameDesignDef('metal'),
	        SHINY_METAL: new FrameDesignDef('shinyMetal'),
	        BRASS: new FrameDesignDef('brass'),
	        STEEL: new FrameDesignDef('steel'),
	        CHROME: new FrameDesignDef('chrome'),
	        GOLD: new FrameDesignDef('gold'),
	        ANTHRACITE: new FrameDesignDef('anthracite'),
	        TILTED_GRAY: new FrameDesignDef('tiltedGray'),
	        TILTED_BLACK: new FrameDesignDef('tiltedBlack'),
	        GLOSSY_METAL: new FrameDesignDef('glossyMetal')
	    };
	
	    var pointerType = {
	        TYPE1: new PointerTypeDef('type1'),
	        TYPE2: new PointerTypeDef('type2'),
	        TYPE3: new PointerTypeDef('type3'),
	        TYPE4: new PointerTypeDef('type4'),
	        TYPE5: new PointerTypeDef('type5'),
	        TYPE6: new PointerTypeDef('type6'),
	        TYPE7: new PointerTypeDef('type7'),
	        TYPE8: new PointerTypeDef('type8'),
	        TYPE9: new PointerTypeDef('type9'),
	        TYPE10: new PointerTypeDef('type10'),
	        TYPE11: new PointerTypeDef('type11'),
	        TYPE12: new PointerTypeDef('type12'),
	        TYPE13: new PointerTypeDef('type13'),
	        TYPE14: new PointerTypeDef('type14'),
	        TYPE15: new PointerTypeDef('type15'),
	        TYPE16: new PointerTypeDef('type16')
	    };
	
	    var foregroundType = {
	        TYPE1: new ForegroundTypeDef('type1'),
	        TYPE2: new ForegroundTypeDef('type2'),
	        TYPE3: new ForegroundTypeDef('type3'),
	        TYPE4: new ForegroundTypeDef('type4'),
	        TYPE5: new ForegroundTypeDef('type5')
	    };
	
	    var labelNumberFormat = {
	        STANDARD: new LabelNumberFormatDef('standard'),
	        FRACTIONAL: new LabelNumberFormatDef('fractional'),
	        SCIENTIFIC: new LabelNumberFormatDef('scientific')
	    };
	
	    var tickLabelOrientation = {
	        NORMAL: new TickLabelOrientationDef('normal'),
	        HORIZONTAL: new TickLabelOrientationDef('horizontal'),
	        TANGENT: new TickLabelOrientationDef('tangent')
	    };
	
	    var trendState = {
	        UP: new TrendStateDef('up'),
	        STEADY: new TrendStateDef('steady'),
	        DOWN: new TrendStateDef('down'),
	        OFF: new TrendStateDef('off')
	    };
	
	    //**********************************   E X P O R T   F U N C T I O N S   *******************************************
	    return {
	        // Components EXTERNAL : INTERNAL
	        Radial : radial,
	        RadialBargraph : radialBargraph,
	        RadialVertical : radialVertical,
	        Linear: linear,
	        LinearBargraph: linearBargraph,
	        DisplaySingle: displaySingle,
	        DisplayMulti: displayMulti,
	        Level : level,
	        Compass : compass,
	        WindDirection : windDirection,
	        Horizon : horizon,
	        Led : led,
	        Clock : clock,
	        Battery : battery,
	        StopWatch : stopwatch,
	        Altimeter : altimeter,
	        TrafficLight: trafficlight,
	        LightBulb: lightbulb,
	        Odometer: odometer,
	
	        // Images
	        drawFrame : drawRadialFrameImage,
	        drawBackground : drawRadialBackgroundImage,
	        drawForeground : drawRadialForegroundImage,
	
	        // Tools
	        rgbaColor :  RgbaColor,
	        ConicalGradient : ConicalGradient,
	        setAlpha : setAlpha,
	        getColorFromFraction : getColorFromFraction,
	        gradientWrapper : GradientWrapper,
	
	        // Constants
	        BackgroundColor : backgroundColor,
	        LcdColor : lcdColor,
	        ColorDef : color,
	        LedColor : ledColor,
	        GaugeType : gaugeType,
	        Orientation: orientation,
	        FrameDesign : frameDesign,
	        PointerType : pointerType,
	        ForegroundType : foregroundType,
	        KnobType : knobType,
	        KnobStyle: knobStyle,
	        LabelNumberFormat: labelNumberFormat,
	        TickLabelOrientation: tickLabelOrientation,
	        TrendState: trendState,
	
	        // Other
	        Section : section
	    };
	}());
	module.exports = steelseries;


/***/ },
/* 2 */
/*!*****************************!*\
  !*** ./lib/simplegauges.js ***!
  \*****************************/
/***/ function(module, exports) {

	function GaugeSet() {
		var ms2kn = 1.94384
		
	  this.speed = new steelseries.Radial('speedCanvas', {
	    gaugeType: steelseries.GaugeType.TYPE4,
	    frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	    size: 220,
	    titleString: "SOG",
	    unitString: "knots",
	    lcdVisible: true,
	    maxValue: 10,
	    maxMeasuredValue: 0,
	    maxMeasuredValueVisible: true,
	    thresholdVisible: false,
	    ledVisible: false,
	    pointerType: steelseries.PointerType.TYPE4
	  });
	
	  this.depth = new steelseries.Radial('depthCanvas', {
	    gaugeType: steelseries.GaugeType.TYPE4,
	    frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	    size: 220,
	    section: [
	      steelseries.Section(0, 4, 'rgba(255, 0, 0, 0.3)'),
	      steelseries.Section(4, 8, 'rgba(220, 220, 0, 0.3)')
	    ],
	    titleString: "Depth",
	    unitString: "m",
	    lcdVisible: true,
	    maxValue: 20,
	    maxMeasuredValue: 0,
	    maxMeasuredValueVisible: true,
	    thresholdVisible: false,
	    ledVisible: false,
	    pointerType: steelseries.PointerType.TYPE2
	  });
	
	  this.pitch = new steelseries.Radial('pitchCanvas', {
	    gaugeType: steelseries.GaugeType.TYPE4,
	    frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	    size: 220,
	    titleString: "Pitch",
	    unitString: "Grad",
	    lcdVisible: true,
	    minValue: -30,
	    maxValue: 30,
	    maxMeasuredValue: 0,
	    maxMeasuredValueVisible: false,
	    thresholdVisible: false,
	    ledVisible: false,
	    pointerType: steelseries.PointerType.TYPE2
	  });
	    
	  this.roll = new steelseries.Radial('rollCanvas', {
	    gaugeType: steelseries.GaugeType.TYPE4,
	    frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	    size: 220,
	    titleString: "Roll",
	    unitString: "Grad",
	    lcdVisible: true,
	    minValue: -30,
	    maxValue: 30,
	    maxMeasuredValue: 0,
	    maxMeasuredValueVisible: false,
	    thresholdVisible: false,
	    ledVisible: false,
	    pointerType: steelseries.PointerType.TYPE2
	  });
	   
	  this.compass = new steelseries.Compass('compassCanvas', {
	    frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	    size: 220,
	    rotateFace: true,
	    pointerType: steelseries.PointerType.TYPE5
	  });
	
	  this.wind = new steelseries.WindDirection('windCanvas', {
	    frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	    size: 220,
	    lcdVisible: true,
	    degreeScaleHalf: true,
	    pointSymbolsVisible: false,
	    pointerType: steelseries.PointerType.TYPE5,
	  });
	   
	  this.airp = new steelseries.Radial('airpCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        titleString: "Airpressure",
	        unitString: "mbar",
	        lcdVisible: true,
	        minValue: 950,
	        maxValue: 1050,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: false,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	    
	    this.airt = new steelseries.Radial('airtCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        titleString: "Airtemp",
	        unitString: "C",
	        lcdVisible: true,
	        minValue: -5,
	        maxValue: 40,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: true,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	    
	    this.engt = new steelseries.Radial('engtCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        section: [
	            steelseries.Section(100,120, 'rgba(255, 0, 0, 0.3)'),
	            steelseries.Section(90,100, 'rgba(220, 220, 0, 0.3)')
	        ],
	        titleString: "Engine temp",
	        unitString: "C",
	        lcdVisible: true,
	        minValue: 10,
	        maxValue: 120,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: true,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	    
	    this.watert = new steelseries.Radial('watertCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        section: [
	            steelseries.Section(4,15, 'rgba(0, 0, 220, 0.3)'),
	            steelseries.Section(25,30, 'rgba(220, 0, 0, 0.3)')
	        ],
	        titleString: "Water temp",
	        unitString: "C",
	        lcdVisible: true,
	        minValue: 4,
	        maxValue: 30,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: true,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	    
	    this.windspap = new steelseries.Radial('windspapCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        section: [
	            steelseries.Section(27,40, 'rgba(220, 0, 0, 0.3)')
	        ],
	        titleString: "Wind speed",
	        unitString: "kt",
	        lcdVisible: true,
	        minValue: 0,
	        maxValue: 40,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: true,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	    
	    this.windsptr = new steelseries.Radial('windsptrCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        section: [
	            steelseries.Section(27,40, 'rgba(220, 0, 0, 0.3)')
	        ],
	        titleString: "Wind speed true",
	        unitString: "kt",
	        lcdVisible: true,
	        minValue: 0,
	        maxValue: 40,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: true,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	    
	    this.revolutions = new steelseries.Radial('revolutionsCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        section: [
	            steelseries.Section(3400, 4000, 'rgba(255, 0, 0, 0.3)'),
	            steelseries.Section(3000, 3400, 'rgba(220, 220, 0, 0.3)')
	        ],
	        titleString: "rpm",
	        unitString: "1/min",
	        lcdVisible: true,
	        minValue: 500,
	        maxValue: 4000,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: true,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	
	    this.revolutions = new steelseries.Radial('revolutionsCanvas', {
	        gaugeType: steelseries.GaugeType.TYPE4,
	        frameDesign: steelseries.FrameDesign.TILTED_BLACK,
	        size: 220,
	        section: [
	            steelseries.Section(3400, 4000, 'rgba(255, 0, 0, 0.3)'),
	            steelseries.Section(3000, 3400, 'rgba(220, 220, 0, 0.3)')
	        ],
	        titleString: "rpm",
	        unitString: "1/min",
	        lcdVisible: true,
	        minValue: 500,
	        maxValue: 4000,
	        maxMeasuredValue: 0,
	        maxMeasuredValueVisible: true,
	        thresholdVisible: false,
	        ledVisible: false,
	        pointerType: steelseries.PointerType.TYPE2
	    });
	
	
	    
	    average = [0, 0, 0];
	    averagep = 0;
	
	  this.eventHandlers = {
	    "navigation.speedOverGround": function(value) {
	      if (value != null) {
	        this.speed.setValue(value*ms2kn);
	      }
	    }.bind(this),
	    "environment.depth.belowTransducer": function (value) {
	      this.depth.setValue(value);
	    }.bind(this),
	    "environment.wind.angleApparent": function(value) {
	    this.wind.setValueLatest(value * 57.29577951);
	    average[averagep] = value * 57.29577951 / 3
	    average[0] + average[1] + average[2]
	    averagep++;
	    if (averagep > 2)
	    averagep = 0;
	    this.wind.setValueAverage(average[0] + average[1] + average[2]);   
	    }.bind(this),
	    "navigation.headingMagnetic": function(value) {
	      this.compass.setValue(value * 57.29577951);
	    }.bind(this),
	    "environment.wind.speedApparent": function(value) {
	      this.windspap.setValue(value * ms2kn);
	    }.bind(this),
	    "environment.wind.speedTrue": function(value) {
	      this.windsptr.setValue(value * ms2kn);
	    }.bind(this),
	    "navigation.attitude.pitch": function (value) {
	      this.pitch.setValue(value * 57.29577951);
	    }.bind(this),
	    "navigation.attitude.roll": function (value) {
	      this.roll.setValue(value * 57.29577951);
	        }.bind(this),
	    "environment.outside.temperature": function (value) {
	      this.airt.setValue(value -273.15 );
	    }.bind(this),
	    "environment.outside.pressure": function (value) {
	      this.airp.setValue(value/100);
	    }.bind(this),
	    "propulsion.port.oilTemperature": function (value) {
	      this.engt.setValue(value -273.15);
	    }.bind(this),
	    "environment.water.temperature": function (value) {
	      this.watert.setValue(value -273.15);
	    }.bind(this),
	    "propulsion.starboard.revolutions": function (value) {
	    this.revolutions.setValue(value);
	    }.bind(this)
	  }
	  this.dispatch = this.doDispatch.bind(this);
	};
	
	GaugeSet.prototype = {
	  doDispatch: function dispatch(delta) {
	    if (delta.context === 'vessels.' + this.selfId && delta.updates) {
	      var that  = this;
	      delta.updates.forEach(function(update) {
	        update.values.forEach(function(value) {
	          if (that.eventHandlers[value.path] && typeof that.eventHandlers[value.path] === 'function') {
	            that.eventHandlers[value.path](value.value);
	          }
	        })
	      })
	    }
	  },
	  zero: function() {
	    this.speed.setValue(0);
	    this.wind.setValueLatest(0);
	    this.wind.setValueAverage(0);
	    this.windspap.setValue(0);
	    this.windsptr.setValue(0);
	    this.compass.setValue(0);
	    this.depth.setValue(0);
	    this.pitch.setValue(0);
	    this.airp.setValue(0);
	    this.airt.setValue(0);
	    this.engt.setValue(0);
	    this.watert.setValue(0);
	    this.pitch.setValue(0);
	    this.revolution.setValue(0);
	
	  },
	  setSelfId: function(selfId) {
	    this.selfId = selfId;
	  }
	}
	
	
	
	module.exports.GaugeSet = GaugeSet;

/***/ },
/* 3 */
/*!*****************************!*\
  !*** ./~/ws/lib/browser.js ***!
  \*****************************/
/***/ function(module, exports) {

	
	/**
	 * Module dependencies.
	 */
	
	var global = (function() { return this; })();
	
	/**
	 * WebSocket constructor.
	 */
	
	var WebSocket = global.WebSocket || global.MozWebSocket;
	
	/**
	 * Module exports.
	 */
	
	module.exports = WebSocket ? ws : null;
	
	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */
	
	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}
	
	if (WebSocket) ws.prototype = WebSocket.prototype;


/***/ },
/* 4 */
/*!***********************************!*\
  !*** ./~/signalk-client/index.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var _object = __webpack_require__(/*! lodash/object */ 5),
	    EventEmitter = __webpack_require__(/*! eventemitter3 */ 233),
	    WebSocket = __webpack_require__(/*! ws */ 234),
	    debug = __webpack_require__(/*! debug */ 235)('signalk:client'),
	    url = __webpack_require__(/*! url */ 238),
	    Promise = __webpack_require__(/*! bluebird */ 244),
	    agent = __webpack_require__(/*! superagent-promise */ 247)(__webpack_require__(/*! superagent */ 248), Promise);
	
	//Workaround for Avahi oddity on RPi
	//https://github.com/agnat/node_mdns/issues/130
	function getSequence(mdns) {
	  return [
	    mdns.rst.DNSServiceResolve(),
	    'DNSServiceGetAddrInfo' in mdns.dns_sd ? mdns.rst.DNSServiceGetAddrInfo() : mdns.rst.getaddrinfo({
	      families: [4]
	    }),
	    mdns.rst.makeAddressesUnique()
	  ];
	}
	
	function Client(host, port) {
	  this.host = host;
	  this.port = port;
	}
	
	__webpack_require__(/*! util */ 254).inherits(Client, EventEmitter);
	
	/**
	 * @module signalk-client
	 */
	
	/**
	 * @name Signal K Client Library
	 *
	 * This library makes it a little easier to interface with Signal K servers via the REST API and WebSockets. To use it,
	 * create a new Client object. The contstructor takes three optional parameters: hostname, port, and a flag indicating
	 * whether or not to use SSL. If no parameters are passed, connect() will attempt to discover a Signal K server on the
	 * network via mDNS. Naturally, this doesn't work in the browser.
	 *
	 * It inherits from EventEmitter, so EventEmitter conventions apply.
	 *
	 * @example
	 * var client = new Client('localhost');
	 * client.connect();
	 *
	 * @param {string} hostname
	 * @param {number} port
	 * @param {boolean} useSSL
	 */
	function Client(hostname, port, useSSL) {
	  if(useSSL) {
	    this.protocol = 'https';
	  } else {
	    this.protocol = 'http';
	  }
	  this.hostname = hostname;
	  this.port = port;
	}
	
	/**
	 */
	Client.prototype.connect = function(options) {
	  debug('connect');
	
	  var hostname = this.hostname;
	  var port = this.port;
	
	  if (options) {
	    hostname = options.hostname || hostname;
	    port = options.port || port;
	  }
	
	  if (hostname && port) {
	    return this.connectDelta(options.hostname + ":" + options.port, options.onData,
	        options.onConnect, options.onDisconnect, options.onError);
	  }
	
	  return this.discoverAndConnect(options);
	}
	
	Client.prototype.apiGet = function(path) {
	  return this.get('/signalk/v1/api' + path);
	}
	
	Client.prototype.get = function(path, hostname, port) {
	  return agent('GET', 'http://' + (this.hostname || hostname) + ':' +
	      (this.port || port) + path);
	}
	
	Client.prototype.startDiscovery = function() {
	  debug('startDiscovery');
	  var that = this;
	  try {
	    var mdns = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"mdns\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	  } catch (ex) {
	    console.log("Discovery requires mdns, please install it with 'npm install mdns' or specify hostname and port");
	    return;
	  }
	  that.browser = mdns.createBrowser(mdns.tcp('signalk-http'), {
	    resolverSequence: getSequence(mdns)
	  });
	  that.browser.on('serviceUp', function(service) {
	    debug("Discovered signalk-http:" + JSON.stringify(service.type, null, 2) + "\n" + JSON.stringify(service.txtRecord, null, 2));
	    debug("GETting /signalk")
	    that.get('/signalk', service.hostname, service.port)
	      .then(function(response) {
	        debug("Got " + JSON.stringify(response.body.endpoints, null, 2));
	        that.emit('discovery', {
	          hostname: service.hostname,
	          port: service.port,
	          discoveryResponse: response.body
	        });
	      })
	  });
	  debug("Starting mdns discovery");
	  that.browser.start();
	}
	
	Client.prototype.stopDiscovery = function() {
	  if (this.browser) {
	    debug('Stopping discovery');
	    this.browser.stop();
	  }
	}
	
	Client.prototype.discoverAndConnect = function(options) {
	  debug('discoverAndConnect');
	  var that = this;
	
	  try {
	    var mdns = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"mdns\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	  } catch (ex) {
	    console.log("Discovery requires mdns, please install it with 'npm install mdns' or specify hostname and port");
	    return;
	  }
	
	  return new Promise(function(resolve, reject) {
	    var browser = mdns.createBrowser(mdns.tcp('signalk-http'), {
	      resolverSequence: getSequence(mdns)
	    });
	    browser.on('serviceUp', function(service) {
	      debug("Discovered signalk-http:" + JSON.stringify(service.type, null, 2) + "\n" + JSON.stringify(service.txtRecord, null, 2));
	      debug("Stopping discovery");
	      browser.stop();
	      that.hostname = service.hostname;
	      that.port = service.port;
	      debug("GETting /signalk")
	      that.get('/signalk')
	        .then(function(response) {
	          debug("Got " + JSON.stringify(response.body.endpoints, null, 2));
	          that.endpoints = response.body.endpoints;
	          resolve(response.body.endpoints);
	        });
	    });
	    debug("Starting mdns discovery");
	    browser.start();
	  }).then(function(endpoints) {
	    that.endpoints = endpoints;
	    that.emit('discovery', endpoints);
	    debug("Connecting to " + JSON.stringify(_object.values(endpoints)[0]['signalk-ws'], null, 2));
	    return that.connectDeltaByUrl(_object.values(endpoints)[0]['signalk-ws'], options.onData, options.onConnect, options.onDisconnect, options.onError);
	  });
	}
	
	Client.prototype.connectDelta = function(hostname, callback, onConnect, onDisconnect, onError, subscribe) {
	  var url = "ws://" + hostname + "/signalk/v1/stream" + (subscribe ? '?subscribe=' + subscribe : '');
	  return this.connectDeltaByUrl(url, callback, onConnect, onDisconnect, onError);
	}
	
	Client.prototype.connectDeltaByUrl = function(wsUrl, callback, onConnect, onDisconnect, onError) {
	  var theUrl = url.parse(wsUrl);
	  this.hostname = theUrl.hostname;
	  this.port = theUrl.port;
	  var sub = {
	    "context": "vessels.self",
	    "subscribe": [{
	      "path": "*"
	    }]
	  };
	  debug("Connecting ws to " + wsUrl);
	  var skConnection = {
	    hostname: this.hostname
	  };
	
	  if (typeof Primus != 'undefined') {
	    debug("Using Primus");
	    var primus = Primus.connect(wsUrl, {
	      reconnect: {
	        maxDelay: 15000,
	        minDelay: 500,
	        retries: Infinity
	      }
	    });
	    primus.on('data', callback);
	    skConnection.send = primus.write.bind(primus);
	    skConnection.disconnect = function() {
	      primus.end();
	      debug('Disconnected');
	    };
	    if (onConnect) {
	      primus.on('open', onConnect.bind(this, skConnection));
	    } else {
	      primus.on('open', function() {
	        skConnection.send(sub);
	      });
	    }
	  } else {
	    debug("Using ws");
	    var connection = new WebSocket(wsUrl);
	    skConnection.send = function(data) {
	      connection.send(typeof data != 'string' ? JSON.stringify(data) : data);
	    };
	    skConnection.disconnect = function() {
	      connection.close();
	      debug('Disconnected');
	    };
	    connection.onopen = function(msg) {
	      debug("open");
	      if (onConnect) {
	        onConnect(skConnection)
	      } else {
	        skConnection.send(sub);
	      }
	    };
	    connection.onerror = function(error) {
	      debug("error:" + error);
	      if (onError) {
	        onError(error)
	      }
	    };
	    connection.onmessage = function(msg) {
	      callback(JSON.parse(msg.data));
	    };
	  }
	  skConnection.subscribeAll = function() {
	    skConnection.send(sub);
	  }
	  return skConnection;
	}
	
	/**
	 * getSelf
	 *
	 * Returns the current contents of the Signal K tree for your vessel (or at
	 * least the contents of the Signal K tree pointed to by `self`.
	 *
	 * @returns {Promise}
	 */
	Client.prototype.getSelf = function() {
	  var skUrl = {
	    protocol: this.protocol,
	    hostname: this.hostname,
	    port: this.port,
	    pathname: '/signalk/v1/api/vessels/self'
	  };
	
	  return agent('GET', url.format(skUrl));
	}
	
	/**
	 *
	 * getSelfMatcher
	 *
	 * @returns {function} that can be passed to a filter function to select delta
	 * messages just for your vessel.
	 */
	Client.prototype.getSelfMatcher = function() {
	  return this.getSelf().then(function(result) {
	    var selfData = result.body;
	    var selfId = selfData.mmsi || selfData.uuid;
	
	    if (selfId) {
	      var selfContext = 'vessels.' + selfId;
	      return function(delta) {
	        return (delta.context === 'self' || delta.context === 'vessels.self' ||
	          delta.context === selfContext);
	      };
	    } else {
	      return function(delta) {
	        return true;
	      }
	    }
	  });
	}
	
	Client.prototype.getMeta = function(prefix, path) {
	  return this.get(prefix + "/" + path.split('.').join('/') + '/meta');
	}
	
	function convertUpdateToHumanUnits(update) {
	  if (update.values) {
	    update.values.forEach(convertPathValueToHumanUnits)
	  }
	}
	
	function convertPathValueToHumanUnits(pathValue) {
	  if (signalkSchema.metadata[pathValue.path] && conversions[signalkSchema.metadata[pathValue.path].units]) {
	    pathValue.value = conversions[signalkSchema.metadata[pathValue.path].units].convert(pathValue.value);
	    pathValue.units = conversions[signalkSchema.metadata[pathValue.path].units].to;
	  }
	}
	
	function isDelta(msg) {
	  return typeof msg.context != "undefined"
	}
	
	function isHello(msg) {
	  return typeof msg.version != "undefined"
	}
	
	module.exports = {
	  Client: Client,
	  isDelta: isDelta,
	  isHello: isHello
	}


/***/ },
/* 5 */
/*!****************************!*\
  !*** ./~/lodash/object.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  'assign': __webpack_require__(/*! ./assign */ 6),
	  'assignIn': __webpack_require__(/*! ./assignIn */ 53),
	  'assignInWith': __webpack_require__(/*! ./assignInWith */ 57),
	  'assignWith': __webpack_require__(/*! ./assignWith */ 58),
	  'at': __webpack_require__(/*! ./at */ 59),
	  'create': __webpack_require__(/*! ./create */ 102),
	  'defaults': __webpack_require__(/*! ./defaults */ 105),
	  'defaultsDeep': __webpack_require__(/*! ./defaultsDeep */ 107),
	  'entries': __webpack_require__(/*! ./entries */ 131),
	  'entriesIn': __webpack_require__(/*! ./entriesIn */ 143),
	  'extend': __webpack_require__(/*! ./extend */ 145),
	  'extendWith': __webpack_require__(/*! ./extendWith */ 146),
	  'findKey': __webpack_require__(/*! ./findKey */ 147),
	  'findLastKey': __webpack_require__(/*! ./findLastKey */ 174),
	  'forIn': __webpack_require__(/*! ./forIn */ 177),
	  'forInRight': __webpack_require__(/*! ./forInRight */ 178),
	  'forOwn': __webpack_require__(/*! ./forOwn */ 179),
	  'forOwnRight': __webpack_require__(/*! ./forOwnRight */ 180),
	  'functions': __webpack_require__(/*! ./functions */ 181),
	  'functionsIn': __webpack_require__(/*! ./functionsIn */ 184),
	  'get': __webpack_require__(/*! ./get */ 61),
	  'has': __webpack_require__(/*! ./has */ 185),
	  'hasIn': __webpack_require__(/*! ./hasIn */ 168),
	  'invert': __webpack_require__(/*! ./invert */ 187),
	  'invertBy': __webpack_require__(/*! ./invertBy */ 190),
	  'invoke': __webpack_require__(/*! ./invoke */ 191),
	  'keys': __webpack_require__(/*! ./keys */ 36),
	  'keysIn': __webpack_require__(/*! ./keysIn */ 54),
	  'mapKeys': __webpack_require__(/*! ./mapKeys */ 196),
	  'mapValues': __webpack_require__(/*! ./mapValues */ 197),
	  'merge': __webpack_require__(/*! ./merge */ 198),
	  'mergeWith': __webpack_require__(/*! ./mergeWith */ 130),
	  'omit': __webpack_require__(/*! ./omit */ 199),
	  'omitBy': __webpack_require__(/*! ./omitBy */ 214),
	  'pick': __webpack_require__(/*! ./pick */ 217),
	  'pickBy': __webpack_require__(/*! ./pickBy */ 216),
	  'result': __webpack_require__(/*! ./result */ 218),
	  'set': __webpack_require__(/*! ./set */ 219),
	  'setWith': __webpack_require__(/*! ./setWith */ 221),
	  'toPairs': __webpack_require__(/*! ./toPairs */ 132),
	  'toPairsIn': __webpack_require__(/*! ./toPairsIn */ 144),
	  'transform': __webpack_require__(/*! ./transform */ 222),
	  'unset': __webpack_require__(/*! ./unset */ 224),
	  'update': __webpack_require__(/*! ./update */ 226),
	  'updateWith': __webpack_require__(/*! ./updateWith */ 229),
	  'values': __webpack_require__(/*! ./values */ 230),
	  'valuesIn': __webpack_require__(/*! ./valuesIn */ 232)
	};


/***/ },
/* 6 */
/*!****************************!*\
  !*** ./~/lodash/assign.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(/*! ./_assignValue */ 7),
	    copyObject = __webpack_require__(/*! ./_copyObject */ 21),
	    createAssigner = __webpack_require__(/*! ./_createAssigner */ 22),
	    isArrayLike = __webpack_require__(/*! ./isArrayLike */ 32),
	    isPrototype = __webpack_require__(/*! ./_isPrototype */ 35),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign = createAssigner(function(object, source) {
	  if (isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});
	
	module.exports = assign;


/***/ },
/* 7 */
/*!**********************************!*\
  !*** ./~/lodash/_assignValue.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ 8),
	    eq = __webpack_require__(/*! ./eq */ 20);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}
	
	module.exports = assignValue;


/***/ },
/* 8 */
/*!**************************************!*\
  !*** ./~/lodash/_baseAssignValue.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(/*! ./_defineProperty */ 9);
	
	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}
	
	module.exports = baseAssignValue;


/***/ },
/* 9 */
/*!*************************************!*\
  !*** ./~/lodash/_defineProperty.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(/*! ./_getNative */ 10);
	
	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());
	
	module.exports = defineProperty;


/***/ },
/* 10 */
/*!********************************!*\
  !*** ./~/lodash/_getNative.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ 11),
	    getValue = __webpack_require__(/*! ./_getValue */ 19);
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	
	module.exports = getNative;


/***/ },
/* 11 */
/*!***********************************!*\
  !*** ./~/lodash/_baseIsNative.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(/*! ./isFunction */ 12),
	    isMasked = __webpack_require__(/*! ./_isMasked */ 14),
	    isObject = __webpack_require__(/*! ./isObject */ 13),
	    toSource = __webpack_require__(/*! ./_toSource */ 18);
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	module.exports = baseIsNative;


/***/ },
/* 12 */
/*!********************************!*\
  !*** ./~/lodash/isFunction.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(/*! ./isObject */ 13);
	
	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag || tag == proxyTag;
	}
	
	module.exports = isFunction;


/***/ },
/* 13 */
/*!******************************!*\
  !*** ./~/lodash/isObject.js ***!
  \******************************/
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ },
/* 14 */
/*!*******************************!*\
  !*** ./~/lodash/_isMasked.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(/*! ./_coreJsData */ 15);
	
	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());
	
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}
	
	module.exports = isMasked;


/***/ },
/* 15 */
/*!*********************************!*\
  !*** ./~/lodash/_coreJsData.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(/*! ./_root */ 16);
	
	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];
	
	module.exports = coreJsData;


/***/ },
/* 16 */
/*!***************************!*\
  !*** ./~/lodash/_root.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ 17);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 17 */
/*!*********************************!*\
  !*** ./~/lodash/_freeGlobal.js ***!
  \*********************************/
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 18 */
/*!*******************************!*\
  !*** ./~/lodash/_toSource.js ***!
  \*******************************/
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}
	
	module.exports = toSource;


/***/ },
/* 19 */
/*!*******************************!*\
  !*** ./~/lodash/_getValue.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}
	
	module.exports = getValue;


/***/ },
/* 20 */
/*!************************!*\
  !*** ./~/lodash/eq.js ***!
  \************************/
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	module.exports = eq;


/***/ },
/* 21 */
/*!*********************************!*\
  !*** ./~/lodash/_copyObject.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(/*! ./_assignValue */ 7),
	    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ 8);
	
	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});
	
	  var index = -1,
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index];
	
	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;
	
	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}
	
	module.exports = copyObject;


/***/ },
/* 22 */
/*!*************************************!*\
  !*** ./~/lodash/_createAssigner.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(/*! ./_baseRest */ 23),
	    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ 31);
	
	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;
	
	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;
	
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}
	
	module.exports = createAssigner;


/***/ },
/* 23 */
/*!*******************************!*\
  !*** ./~/lodash/_baseRest.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(/*! ./identity */ 24),
	    overRest = __webpack_require__(/*! ./_overRest */ 25),
	    setToString = __webpack_require__(/*! ./_setToString */ 27);
	
	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}
	
	module.exports = baseRest;


/***/ },
/* 24 */
/*!******************************!*\
  !*** ./~/lodash/identity.js ***!
  \******************************/
/***/ function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	module.exports = identity;


/***/ },
/* 25 */
/*!*******************************!*\
  !*** ./~/lodash/_overRest.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(/*! ./_apply */ 26);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);
	
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}
	
	module.exports = overRest;


/***/ },
/* 26 */
/*!****************************!*\
  !*** ./~/lodash/_apply.js ***!
  \****************************/
/***/ function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	
	module.exports = apply;


/***/ },
/* 27 */
/*!**********************************!*\
  !*** ./~/lodash/_setToString.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ 28),
	    shortOut = __webpack_require__(/*! ./_shortOut */ 30);
	
	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);
	
	module.exports = setToString;


/***/ },
/* 28 */
/*!**************************************!*\
  !*** ./~/lodash/_baseSetToString.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(/*! ./constant */ 29),
	    defineProperty = __webpack_require__(/*! ./_defineProperty */ 9),
	    identity = __webpack_require__(/*! ./identity */ 24);
	
	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};
	
	module.exports = baseSetToString;


/***/ },
/* 29 */
/*!******************************!*\
  !*** ./~/lodash/constant.js ***!
  \******************************/
/***/ function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}
	
	module.exports = constant;


/***/ },
/* 30 */
/*!*******************************!*\
  !*** ./~/lodash/_shortOut.js ***!
  \*******************************/
/***/ function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 500,
	    HOT_SPAN = 16;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;
	
	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;
	
	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);
	
	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}
	
	module.exports = shortOut;


/***/ },
/* 31 */
/*!*************************************!*\
  !*** ./~/lodash/_isIterateeCall.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(/*! ./eq */ 20),
	    isArrayLike = __webpack_require__(/*! ./isArrayLike */ 32),
	    isIndex = __webpack_require__(/*! ./_isIndex */ 34),
	    isObject = __webpack_require__(/*! ./isObject */ 13);
	
	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}
	
	module.exports = isIterateeCall;


/***/ },
/* 32 */
/*!*********************************!*\
  !*** ./~/lodash/isArrayLike.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(/*! ./isFunction */ 12),
	    isLength = __webpack_require__(/*! ./isLength */ 33);
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	module.exports = isArrayLike;


/***/ },
/* 33 */
/*!******************************!*\
  !*** ./~/lodash/isLength.js ***!
  \******************************/
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	module.exports = isLength;


/***/ },
/* 34 */
/*!******************************!*\
  !*** ./~/lodash/_isIndex.js ***!
  \******************************/
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}
	
	module.exports = isIndex;


/***/ },
/* 35 */
/*!**********************************!*\
  !*** ./~/lodash/_isPrototype.js ***!
  \**********************************/
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	  return value === proto;
	}
	
	module.exports = isPrototype;


/***/ },
/* 36 */
/*!**************************!*\
  !*** ./~/lodash/keys.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ 37),
	    baseKeys = __webpack_require__(/*! ./_baseKeys */ 50),
	    isArrayLike = __webpack_require__(/*! ./isArrayLike */ 32);
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	
	module.exports = keys;


/***/ },
/* 37 */
/*!************************************!*\
  !*** ./~/lodash/_arrayLikeKeys.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(/*! ./_baseTimes */ 38),
	    isArguments = __webpack_require__(/*! ./isArguments */ 39),
	    isArray = __webpack_require__(/*! ./isArray */ 42),
	    isBuffer = __webpack_require__(/*! ./isBuffer */ 43),
	    isIndex = __webpack_require__(/*! ./_isIndex */ 34),
	    isTypedArray = __webpack_require__(/*! ./isTypedArray */ 46);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = arrayLikeKeys;


/***/ },
/* 38 */
/*!********************************!*\
  !*** ./~/lodash/_baseTimes.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	module.exports = baseTimes;


/***/ },
/* 39 */
/*!*********************************!*\
  !*** ./~/lodash/isArguments.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ 40),
	    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 41);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};
	
	module.exports = isArguments;


/***/ },
/* 40 */
/*!**************************************!*\
  !*** ./~/lodash/_baseIsArguments.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(/*! ./isObjectLike */ 41);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && objectToString.call(value) == argsTag;
	}
	
	module.exports = baseIsArguments;


/***/ },
/* 41 */
/*!**********************************!*\
  !*** ./~/lodash/isObjectLike.js ***!
  \**********************************/
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 42 */
/*!*****************************!*\
  !*** ./~/lodash/isArray.js ***!
  \*****************************/
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	module.exports = isArray;


/***/ },
/* 43 */
/*!******************************!*\
  !*** ./~/lodash/isBuffer.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ 16),
	    stubFalse = __webpack_require__(/*! ./stubFalse */ 45);
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
	
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;
	
	module.exports = isBuffer;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 44)(module)))

/***/ },
/* 44 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 45 */
/*!*******************************!*\
  !*** ./~/lodash/stubFalse.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}
	
	module.exports = stubFalse;


/***/ },
/* 46 */
/*!**********************************!*\
  !*** ./~/lodash/isTypedArray.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ 47),
	    baseUnary = __webpack_require__(/*! ./_baseUnary */ 48),
	    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ 49);
	
	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	module.exports = isTypedArray;


/***/ },
/* 47 */
/*!***************************************!*\
  !*** ./~/lodash/_baseIsTypedArray.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(/*! ./isLength */ 33),
	    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 41);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}
	
	module.exports = baseIsTypedArray;


/***/ },
/* 48 */
/*!********************************!*\
  !*** ./~/lodash/_baseUnary.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}
	
	module.exports = baseUnary;


/***/ },
/* 49 */
/*!*******************************!*\
  !*** ./~/lodash/_nodeUtil.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ 17);
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;
	
	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}());
	
	module.exports = nodeUtil;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 44)(module)))

/***/ },
/* 50 */
/*!*******************************!*\
  !*** ./~/lodash/_baseKeys.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(/*! ./_isPrototype */ 35),
	    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ 51);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = baseKeys;


/***/ },
/* 51 */
/*!*********************************!*\
  !*** ./~/lodash/_nativeKeys.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(/*! ./_overArg */ 52);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);
	
	module.exports = nativeKeys;


/***/ },
/* 52 */
/*!******************************!*\
  !*** ./~/lodash/_overArg.js ***!
  \******************************/
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	module.exports = overArg;


/***/ },
/* 53 */
/*!******************************!*\
  !*** ./~/lodash/assignIn.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(/*! ./_copyObject */ 21),
	    createAssigner = __webpack_require__(/*! ./_createAssigner */ 22),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * This method is like `_.assign` except that it iterates over own and
	 * inherited source properties.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assign
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	 */
	var assignIn = createAssigner(function(object, source) {
	  copyObject(source, keysIn(source), object);
	});
	
	module.exports = assignIn;


/***/ },
/* 54 */
/*!****************************!*\
  !*** ./~/lodash/keysIn.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ 37),
	    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ 55),
	    isArrayLike = __webpack_require__(/*! ./isArrayLike */ 32);
	
	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}
	
	module.exports = keysIn;


/***/ },
/* 55 */
/*!*********************************!*\
  !*** ./~/lodash/_baseKeysIn.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(/*! ./isObject */ 13),
	    isPrototype = __webpack_require__(/*! ./_isPrototype */ 35),
	    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ 56);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];
	
	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = baseKeysIn;


/***/ },
/* 56 */
/*!***********************************!*\
  !*** ./~/lodash/_nativeKeysIn.js ***!
  \***********************************/
/***/ function(module, exports) {

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = nativeKeysIn;


/***/ },
/* 57 */
/*!**********************************!*\
  !*** ./~/lodash/assignInWith.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(/*! ./_copyObject */ 21),
	    createAssigner = __webpack_require__(/*! ./_createAssigner */ 22),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * This method is like `_.assignIn` except that it accepts `customizer`
	 * which is invoked to produce the assigned values. If `customizer` returns
	 * `undefined`, assignment is handled by the method instead. The `customizer`
	 * is invoked with five arguments: (objValue, srcValue, key, object, source).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias extendWith
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @see _.assignWith
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   return _.isUndefined(objValue) ? srcValue : objValue;
	 * }
	 *
	 * var defaults = _.partialRight(_.assignInWith, customizer);
	 *
	 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	 * // => { 'a': 1, 'b': 2 }
	 */
	var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	  copyObject(source, keysIn(source), object, customizer);
	});
	
	module.exports = assignInWith;


/***/ },
/* 58 */
/*!********************************!*\
  !*** ./~/lodash/assignWith.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(/*! ./_copyObject */ 21),
	    createAssigner = __webpack_require__(/*! ./_createAssigner */ 22),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * This method is like `_.assign` except that it accepts `customizer`
	 * which is invoked to produce the assigned values. If `customizer` returns
	 * `undefined`, assignment is handled by the method instead. The `customizer`
	 * is invoked with five arguments: (objValue, srcValue, key, object, source).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @see _.assignInWith
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   return _.isUndefined(objValue) ? srcValue : objValue;
	 * }
	 *
	 * var defaults = _.partialRight(_.assignWith, customizer);
	 *
	 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	 * // => { 'a': 1, 'b': 2 }
	 */
	var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	  copyObject(source, keys(source), object, customizer);
	});
	
	module.exports = assignWith;


/***/ },
/* 59 */
/*!************************!*\
  !*** ./~/lodash/at.js ***!
  \************************/
/***/ function(module, exports, __webpack_require__) {

	var baseAt = __webpack_require__(/*! ./_baseAt */ 60),
	    flatRest = __webpack_require__(/*! ./_flatRest */ 97);
	
	/**
	 * Creates an array of values corresponding to `paths` of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {...(string|string[])} [paths] The property paths of elements to pick.
	 * @returns {Array} Returns the picked values.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	 *
	 * _.at(object, ['a[0].b.c', 'a[1]']);
	 * // => [3, 4]
	 */
	var at = flatRest(baseAt);
	
	module.exports = at;


/***/ },
/* 60 */
/*!*****************************!*\
  !*** ./~/lodash/_baseAt.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var get = __webpack_require__(/*! ./get */ 61);
	
	/**
	 * The base implementation of `_.at` without support for individual paths.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {string[]} paths The property paths of elements to pick.
	 * @returns {Array} Returns the picked elements.
	 */
	function baseAt(object, paths) {
	  var index = -1,
	      isNil = object == null,
	      length = paths.length,
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = isNil ? undefined : get(object, paths[index]);
	  }
	  return result;
	}
	
	module.exports = baseAt;


/***/ },
/* 61 */
/*!*************************!*\
  !*** ./~/lodash/get.js ***!
  \*************************/
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(/*! ./_baseGet */ 62);
	
	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}
	
	module.exports = get;


/***/ },
/* 62 */
/*!******************************!*\
  !*** ./~/lodash/_baseGet.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(/*! ./_castPath */ 63),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);
	
	  var index = 0,
	      length = path.length;
	
	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}
	
	module.exports = baseGet;


/***/ },
/* 63 */
/*!*******************************!*\
  !*** ./~/lodash/_castPath.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(/*! ./isArray */ 42),
	    stringToPath = __webpack_require__(/*! ./_stringToPath */ 64);
	
	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}
	
	module.exports = castPath;


/***/ },
/* 64 */
/*!***********************************!*\
  !*** ./~/lodash/_stringToPath.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ 65),
	    toString = __webpack_require__(/*! ./toString */ 90);
	
	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;
	
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  string = toString(string);
	
	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});
	
	module.exports = stringToPath;


/***/ },
/* 65 */
/*!************************************!*\
  !*** ./~/lodash/_memoizeCapped.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(/*! ./memoize */ 66);
	
	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;
	
	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });
	
	  var cache = result.cache;
	  return result;
	}
	
	module.exports = memoizeCapped;


/***/ },
/* 66 */
/*!*****************************!*\
  !*** ./~/lodash/memoize.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(/*! ./_MapCache */ 67);
	
	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;
	
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}
	
	// Expose `MapCache`.
	memoize.Cache = MapCache;
	
	module.exports = memoize;


/***/ },
/* 67 */
/*!*******************************!*\
  !*** ./~/lodash/_MapCache.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ 68),
	    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ 84),
	    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ 87),
	    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ 88),
	    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ 89);
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	module.exports = MapCache;


/***/ },
/* 68 */
/*!************************************!*\
  !*** ./~/lodash/_mapCacheClear.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(/*! ./_Hash */ 69),
	    ListCache = __webpack_require__(/*! ./_ListCache */ 76),
	    Map = __webpack_require__(/*! ./_Map */ 83);
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}
	
	module.exports = mapCacheClear;


/***/ },
/* 69 */
/*!***************************!*\
  !*** ./~/lodash/_Hash.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(/*! ./_hashClear */ 70),
	    hashDelete = __webpack_require__(/*! ./_hashDelete */ 72),
	    hashGet = __webpack_require__(/*! ./_hashGet */ 73),
	    hashHas = __webpack_require__(/*! ./_hashHas */ 74),
	    hashSet = __webpack_require__(/*! ./_hashSet */ 75);
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	module.exports = Hash;


/***/ },
/* 70 */
/*!********************************!*\
  !*** ./~/lodash/_hashClear.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 71);
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}
	
	module.exports = hashClear;


/***/ },
/* 71 */
/*!***********************************!*\
  !*** ./~/lodash/_nativeCreate.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(/*! ./_getNative */ 10);
	
	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');
	
	module.exports = nativeCreate;


/***/ },
/* 72 */
/*!*********************************!*\
  !*** ./~/lodash/_hashDelete.js ***!
  \*********************************/
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	module.exports = hashDelete;


/***/ },
/* 73 */
/*!******************************!*\
  !*** ./~/lodash/_hashGet.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 71);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	module.exports = hashGet;


/***/ },
/* 74 */
/*!******************************!*\
  !*** ./~/lodash/_hashHas.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 71);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}
	
	module.exports = hashHas;


/***/ },
/* 75 */
/*!******************************!*\
  !*** ./~/lodash/_hashSet.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 71);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}
	
	module.exports = hashSet;


/***/ },
/* 76 */
/*!********************************!*\
  !*** ./~/lodash/_ListCache.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ 77),
	    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ 78),
	    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ 80),
	    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ 81),
	    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ 82);
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	module.exports = ListCache;


/***/ },
/* 77 */
/*!*************************************!*\
  !*** ./~/lodash/_listCacheClear.js ***!
  \*************************************/
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}
	
	module.exports = listCacheClear;


/***/ },
/* 78 */
/*!**************************************!*\
  !*** ./~/lodash/_listCacheDelete.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 79);
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype;
	
	/** Built-in value references. */
	var splice = arrayProto.splice;
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}
	
	module.exports = listCacheDelete;


/***/ },
/* 79 */
/*!***********************************!*\
  !*** ./~/lodash/_assocIndexOf.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(/*! ./eq */ 20);
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	module.exports = assocIndexOf;


/***/ },
/* 80 */
/*!***********************************!*\
  !*** ./~/lodash/_listCacheGet.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 79);
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	module.exports = listCacheGet;


/***/ },
/* 81 */
/*!***********************************!*\
  !*** ./~/lodash/_listCacheHas.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 79);
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	module.exports = listCacheHas;


/***/ },
/* 82 */
/*!***********************************!*\
  !*** ./~/lodash/_listCacheSet.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 79);
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	module.exports = listCacheSet;


/***/ },
/* 83 */
/*!**************************!*\
  !*** ./~/lodash/_Map.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(/*! ./_getNative */ 10),
	    root = __webpack_require__(/*! ./_root */ 16);
	
	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');
	
	module.exports = Map;


/***/ },
/* 84 */
/*!*************************************!*\
  !*** ./~/lodash/_mapCacheDelete.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(/*! ./_getMapData */ 85);
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	module.exports = mapCacheDelete;


/***/ },
/* 85 */
/*!*********************************!*\
  !*** ./~/lodash/_getMapData.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(/*! ./_isKeyable */ 86);
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}
	
	module.exports = getMapData;


/***/ },
/* 86 */
/*!********************************!*\
  !*** ./~/lodash/_isKeyable.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}
	
	module.exports = isKeyable;


/***/ },
/* 87 */
/*!**********************************!*\
  !*** ./~/lodash/_mapCacheGet.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(/*! ./_getMapData */ 85);
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	module.exports = mapCacheGet;


/***/ },
/* 88 */
/*!**********************************!*\
  !*** ./~/lodash/_mapCacheHas.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(/*! ./_getMapData */ 85);
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	module.exports = mapCacheHas;


/***/ },
/* 89 */
/*!**********************************!*\
  !*** ./~/lodash/_mapCacheSet.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(/*! ./_getMapData */ 85);
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;
	
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}
	
	module.exports = mapCacheSet;


/***/ },
/* 90 */
/*!******************************!*\
  !*** ./~/lodash/toString.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(/*! ./_baseToString */ 91);
	
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	
	module.exports = toString;


/***/ },
/* 91 */
/*!***********************************!*\
  !*** ./~/lodash/_baseToString.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(/*! ./_Symbol */ 92),
	    arrayMap = __webpack_require__(/*! ./_arrayMap */ 93),
	    isArray = __webpack_require__(/*! ./isArray */ 42),
	    isSymbol = __webpack_require__(/*! ./isSymbol */ 94);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = baseToString;


/***/ },
/* 92 */
/*!*****************************!*\
  !*** ./~/lodash/_Symbol.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(/*! ./_root */ 16);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 93 */
/*!*******************************!*\
  !*** ./~/lodash/_arrayMap.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0,
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}
	
	module.exports = arrayMap;


/***/ },
/* 94 */
/*!******************************!*\
  !*** ./~/lodash/isSymbol.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(/*! ./isObjectLike */ 41);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}
	
	module.exports = isSymbol;


/***/ },
/* 95 */
/*!****************************!*\
  !*** ./~/lodash/_isKey.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(/*! ./isArray */ 42),
	    isSymbol = __webpack_require__(/*! ./isSymbol */ 94);
	
	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}
	
	module.exports = isKey;


/***/ },
/* 96 */
/*!****************************!*\
  !*** ./~/lodash/_toKey.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(/*! ./isSymbol */ 94);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = toKey;


/***/ },
/* 97 */
/*!*******************************!*\
  !*** ./~/lodash/_flatRest.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var flatten = __webpack_require__(/*! ./flatten */ 98),
	    overRest = __webpack_require__(/*! ./_overRest */ 25),
	    setToString = __webpack_require__(/*! ./_setToString */ 27);
	
	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}
	
	module.exports = flatRest;


/***/ },
/* 98 */
/*!*****************************!*\
  !*** ./~/lodash/flatten.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(/*! ./_baseFlatten */ 99);
	
	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten(array) {
	  var length = array ? array.length : 0;
	  return length ? baseFlatten(array, 1) : [];
	}
	
	module.exports = flatten;


/***/ },
/* 99 */
/*!**********************************!*\
  !*** ./~/lodash/_baseFlatten.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(/*! ./_arrayPush */ 100),
	    isFlattenable = __webpack_require__(/*! ./_isFlattenable */ 101);
	
	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;
	
	  predicate || (predicate = isFlattenable);
	  result || (result = []);
	
	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = baseFlatten;


/***/ },
/* 100 */
/*!********************************!*\
  !*** ./~/lodash/_arrayPush.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;
	
	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}
	
	module.exports = arrayPush;


/***/ },
/* 101 */
/*!************************************!*\
  !*** ./~/lodash/_isFlattenable.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(/*! ./_Symbol */ 92),
	    isArguments = __webpack_require__(/*! ./isArguments */ 39),
	    isArray = __webpack_require__(/*! ./isArray */ 42);
	
	/** Built-in value references. */
	var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
	
	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}
	
	module.exports = isFlattenable;


/***/ },
/* 102 */
/*!****************************!*\
  !*** ./~/lodash/create.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseAssign = __webpack_require__(/*! ./_baseAssign */ 103),
	    baseCreate = __webpack_require__(/*! ./_baseCreate */ 104);
	
	/**
	 * Creates an object that inherits from the `prototype` object. If a
	 * `properties` object is given, its own enumerable string keyed properties
	 * are assigned to the created object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Object
	 * @param {Object} prototype The object to inherit from.
	 * @param {Object} [properties] The properties to assign to the object.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * function Shape() {
	 *   this.x = 0;
	 *   this.y = 0;
	 * }
	 *
	 * function Circle() {
	 *   Shape.call(this);
	 * }
	 *
	 * Circle.prototype = _.create(Shape.prototype, {
	 *   'constructor': Circle
	 * });
	 *
	 * var circle = new Circle;
	 * circle instanceof Circle;
	 * // => true
	 *
	 * circle instanceof Shape;
	 * // => true
	 */
	function create(prototype, properties) {
	  var result = baseCreate(prototype);
	  return properties ? baseAssign(result, properties) : result;
	}
	
	module.exports = create;


/***/ },
/* 103 */
/*!*********************************!*\
  !*** ./~/lodash/_baseAssign.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(/*! ./_copyObject */ 21),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}
	
	module.exports = baseAssign;


/***/ },
/* 104 */
/*!*********************************!*\
  !*** ./~/lodash/_baseCreate.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(/*! ./isObject */ 13);
	
	/** Built-in value references. */
	var objectCreate = Object.create;
	
	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());
	
	module.exports = baseCreate;


/***/ },
/* 105 */
/*!******************************!*\
  !*** ./~/lodash/defaults.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(/*! ./_apply */ 26),
	    assignInDefaults = __webpack_require__(/*! ./_assignInDefaults */ 106),
	    assignInWith = __webpack_require__(/*! ./assignInWith */ 57),
	    baseRest = __webpack_require__(/*! ./_baseRest */ 23);
	
	/**
	 * Assigns own and inherited enumerable string keyed properties of source
	 * objects to the destination object for all destination properties that
	 * resolve to `undefined`. Source objects are applied from left to right.
	 * Once a property is set, additional values of the same property are ignored.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.defaultsDeep
	 * @example
	 *
	 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	 * // => { 'a': 1, 'b': 2 }
	 */
	var defaults = baseRest(function(args) {
	  args.push(undefined, assignInDefaults);
	  return apply(assignInWith, undefined, args);
	});
	
	module.exports = defaults;


/***/ },
/* 106 */
/*!***************************************!*\
  !*** ./~/lodash/_assignInDefaults.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(/*! ./eq */ 20);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used by `_.defaults` to customize its `_.assignIn` use.
	 *
	 * @private
	 * @param {*} objValue The destination value.
	 * @param {*} srcValue The source value.
	 * @param {string} key The key of the property to assign.
	 * @param {Object} object The parent object of `objValue`.
	 * @returns {*} Returns the value to assign.
	 */
	function assignInDefaults(objValue, srcValue, key, object) {
	  if (objValue === undefined ||
	      (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	    return srcValue;
	  }
	  return objValue;
	}
	
	module.exports = assignInDefaults;


/***/ },
/* 107 */
/*!**********************************!*\
  !*** ./~/lodash/defaultsDeep.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(/*! ./_apply */ 26),
	    baseRest = __webpack_require__(/*! ./_baseRest */ 23),
	    mergeDefaults = __webpack_require__(/*! ./_mergeDefaults */ 108),
	    mergeWith = __webpack_require__(/*! ./mergeWith */ 130);
	
	/**
	 * This method is like `_.defaults` except that it recursively assigns
	 * default properties.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.defaults
	 * @example
	 *
	 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	 * // => { 'a': { 'b': 2, 'c': 3 } }
	 */
	var defaultsDeep = baseRest(function(args) {
	  args.push(undefined, mergeDefaults);
	  return apply(mergeWith, undefined, args);
	});
	
	module.exports = defaultsDeep;


/***/ },
/* 108 */
/*!************************************!*\
  !*** ./~/lodash/_mergeDefaults.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(/*! ./_baseMerge */ 109),
	    isObject = __webpack_require__(/*! ./isObject */ 13);
	
	/**
	 * Used by `_.defaultsDeep` to customize its `_.merge` use.
	 *
	 * @private
	 * @param {*} objValue The destination value.
	 * @param {*} srcValue The source value.
	 * @param {string} key The key of the property to merge.
	 * @param {Object} object The parent object of `objValue`.
	 * @param {Object} source The parent object of `srcValue`.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 * @returns {*} Returns the value to assign.
	 */
	function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	  if (isObject(objValue) && isObject(srcValue)) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, objValue);
	    baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
	    stack['delete'](srcValue);
	  }
	  return objValue;
	}
	
	module.exports = mergeDefaults;


/***/ },
/* 109 */
/*!********************************!*\
  !*** ./~/lodash/_baseMerge.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(/*! ./_Stack */ 110),
	    assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ 116),
	    baseFor = __webpack_require__(/*! ./_baseFor */ 117),
	    baseMergeDeep = __webpack_require__(/*! ./_baseMergeDeep */ 119),
	    isObject = __webpack_require__(/*! ./isObject */ 13),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  baseFor(source, function(srcValue, key) {
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack);
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	        : undefined;
	
	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  }, keysIn);
	}
	
	module.exports = baseMerge;


/***/ },
/* 110 */
/*!****************************!*\
  !*** ./~/lodash/_Stack.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(/*! ./_ListCache */ 76),
	    stackClear = __webpack_require__(/*! ./_stackClear */ 111),
	    stackDelete = __webpack_require__(/*! ./_stackDelete */ 112),
	    stackGet = __webpack_require__(/*! ./_stackGet */ 113),
	    stackHas = __webpack_require__(/*! ./_stackHas */ 114),
	    stackSet = __webpack_require__(/*! ./_stackSet */ 115);
	
	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}
	
	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;
	
	module.exports = Stack;


/***/ },
/* 111 */
/*!*********************************!*\
  !*** ./~/lodash/_stackClear.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(/*! ./_ListCache */ 76);
	
	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}
	
	module.exports = stackClear;


/***/ },
/* 112 */
/*!**********************************!*\
  !*** ./~/lodash/_stackDelete.js ***!
  \**********************************/
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);
	
	  this.size = data.size;
	  return result;
	}
	
	module.exports = stackDelete;


/***/ },
/* 113 */
/*!*******************************!*\
  !*** ./~/lodash/_stackGet.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}
	
	module.exports = stackGet;


/***/ },
/* 114 */
/*!*******************************!*\
  !*** ./~/lodash/_stackHas.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}
	
	module.exports = stackHas;


/***/ },
/* 115 */
/*!*******************************!*\
  !*** ./~/lodash/_stackSet.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(/*! ./_ListCache */ 76),
	    Map = __webpack_require__(/*! ./_Map */ 83),
	    MapCache = __webpack_require__(/*! ./_MapCache */ 67);
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}
	
	module.exports = stackSet;


/***/ },
/* 116 */
/*!***************************************!*\
  !*** ./~/lodash/_assignMergeValue.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ 8),
	    eq = __webpack_require__(/*! ./eq */ 20);
	
	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if ((value !== undefined && !eq(object[key], value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}
	
	module.exports = assignMergeValue;


/***/ },
/* 117 */
/*!******************************!*\
  !*** ./~/lodash/_baseFor.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ 118);
	
	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	module.exports = baseFor;


/***/ },
/* 118 */
/*!************************************!*\
  !*** ./~/lodash/_createBaseFor.js ***!
  \************************************/
/***/ function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;
	
	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	module.exports = createBaseFor;


/***/ },
/* 119 */
/*!************************************!*\
  !*** ./~/lodash/_baseMergeDeep.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ 116),
	    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ 120),
	    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ 121),
	    copyArray = __webpack_require__(/*! ./_copyArray */ 124),
	    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ 125),
	    isArguments = __webpack_require__(/*! ./isArguments */ 39),
	    isArray = __webpack_require__(/*! ./isArray */ 42),
	    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ 127),
	    isBuffer = __webpack_require__(/*! ./isBuffer */ 43),
	    isFunction = __webpack_require__(/*! ./isFunction */ 12),
	    isObject = __webpack_require__(/*! ./isObject */ 13),
	    isPlainObject = __webpack_require__(/*! ./isPlainObject */ 128),
	    isTypedArray = __webpack_require__(/*! ./isTypedArray */ 46),
	    toPlainObject = __webpack_require__(/*! ./toPlainObject */ 129);
	
	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = object[key],
	      srcValue = source[key],
	      stacked = stack.get(srcValue);
	
	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;
	
	  var isCommon = newValue === undefined;
	
	  if (isCommon) {
	    var isArr = isArray(srcValue),
	        isBuff = !isArr && isBuffer(srcValue),
	        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
	
	    newValue = srcValue;
	    if (isArr || isBuff || isTyped) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else if (isBuff) {
	        isCommon = false;
	        newValue = cloneBuffer(srcValue, true);
	      }
	      else if (isTyped) {
	        isCommon = false;
	        newValue = cloneTypedArray(srcValue, true);
	      }
	      else {
	        newValue = [];
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      newValue = objValue;
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	        newValue = initCloneObject(srcValue);
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue(object, key, newValue);
	}
	
	module.exports = baseMergeDeep;


/***/ },
/* 120 */
/*!**********************************!*\
  !*** ./~/lodash/_cloneBuffer.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ 16);
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
	
	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
	
	  buffer.copy(result);
	  return result;
	}
	
	module.exports = cloneBuffer;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 44)(module)))

/***/ },
/* 121 */
/*!**************************************!*\
  !*** ./~/lodash/_cloneTypedArray.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ 122);
	
	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}
	
	module.exports = cloneTypedArray;


/***/ },
/* 122 */
/*!***************************************!*\
  !*** ./~/lodash/_cloneArrayBuffer.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ 123);
	
	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}
	
	module.exports = cloneArrayBuffer;


/***/ },
/* 123 */
/*!*********************************!*\
  !*** ./~/lodash/_Uint8Array.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(/*! ./_root */ 16);
	
	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;
	
	module.exports = Uint8Array;


/***/ },
/* 124 */
/*!********************************!*\
  !*** ./~/lodash/_copyArray.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;
	
	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}
	
	module.exports = copyArray;


/***/ },
/* 125 */
/*!**************************************!*\
  !*** ./~/lodash/_initCloneObject.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(/*! ./_baseCreate */ 104),
	    getPrototype = __webpack_require__(/*! ./_getPrototype */ 126),
	    isPrototype = __webpack_require__(/*! ./_isPrototype */ 35);
	
	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}
	
	module.exports = initCloneObject;


/***/ },
/* 126 */
/*!***********************************!*\
  !*** ./~/lodash/_getPrototype.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(/*! ./_overArg */ 52);
	
	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);
	
	module.exports = getPrototype;


/***/ },
/* 127 */
/*!***************************************!*\
  !*** ./~/lodash/isArrayLikeObject.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(/*! ./isArrayLike */ 32),
	    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 41);
	
	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}
	
	module.exports = isArrayLikeObject;


/***/ },
/* 128 */
/*!***********************************!*\
  !*** ./~/lodash/isPlainObject.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var getPrototype = __webpack_require__(/*! ./_getPrototype */ 126),
	    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 41);
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || objectToString.call(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}
	
	module.exports = isPlainObject;


/***/ },
/* 129 */
/*!***********************************!*\
  !*** ./~/lodash/toPlainObject.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(/*! ./_copyObject */ 21),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}
	
	module.exports = toPlainObject;


/***/ },
/* 130 */
/*!*******************************!*\
  !*** ./~/lodash/mergeWith.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(/*! ./_baseMerge */ 109),
	    createAssigner = __webpack_require__(/*! ./_createAssigner */ 22);
	
	/**
	 * This method is like `_.merge` except that it accepts `customizer` which
	 * is invoked to produce the merged values of the destination and source
	 * properties. If `customizer` returns `undefined`, merging is handled by the
	 * method instead. The `customizer` is invoked with six arguments:
	 * (objValue, srcValue, key, object, source, stack).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   if (_.isArray(objValue)) {
	 *     return objValue.concat(srcValue);
	 *   }
	 * }
	 *
	 * var object = { 'a': [1], 'b': [2] };
	 * var other = { 'a': [3], 'b': [4] };
	 *
	 * _.mergeWith(object, other, customizer);
	 * // => { 'a': [1, 3], 'b': [2, 4] }
	 */
	var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	  baseMerge(object, source, srcIndex, customizer);
	});
	
	module.exports = mergeWith;


/***/ },
/* 131 */
/*!*****************************!*\
  !*** ./~/lodash/entries.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./toPairs */ 132);


/***/ },
/* 132 */
/*!*****************************!*\
  !*** ./~/lodash/toPairs.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var createToPairs = __webpack_require__(/*! ./_createToPairs */ 133),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * Creates an array of own enumerable string keyed-value pairs for `object`
	 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	 * entries are returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias entries
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairs(new Foo);
	 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	 */
	var toPairs = createToPairs(keys);
	
	module.exports = toPairs;


/***/ },
/* 133 */
/*!************************************!*\
  !*** ./~/lodash/_createToPairs.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseToPairs = __webpack_require__(/*! ./_baseToPairs */ 134),
	    getTag = __webpack_require__(/*! ./_getTag */ 135),
	    mapToArray = __webpack_require__(/*! ./_mapToArray */ 141),
	    setToPairs = __webpack_require__(/*! ./_setToPairs */ 142);
	
	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';
	
	/**
	 * Creates a `_.toPairs` or `_.toPairsIn` function.
	 *
	 * @private
	 * @param {Function} keysFunc The function to get the keys of a given object.
	 * @returns {Function} Returns the new pairs function.
	 */
	function createToPairs(keysFunc) {
	  return function(object) {
	    var tag = getTag(object);
	    if (tag == mapTag) {
	      return mapToArray(object);
	    }
	    if (tag == setTag) {
	      return setToPairs(object);
	    }
	    return baseToPairs(object, keysFunc(object));
	  };
	}
	
	module.exports = createToPairs;


/***/ },
/* 134 */
/*!**********************************!*\
  !*** ./~/lodash/_baseToPairs.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(/*! ./_arrayMap */ 93);
	
	/**
	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	 * of key-value pairs for `object` corresponding to the property names of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the key-value pairs.
	 */
	function baseToPairs(object, props) {
	  return arrayMap(props, function(key) {
	    return [key, object[key]];
	  });
	}
	
	module.exports = baseToPairs;


/***/ },
/* 135 */
/*!*****************************!*\
  !*** ./~/lodash/_getTag.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(/*! ./_DataView */ 136),
	    Map = __webpack_require__(/*! ./_Map */ 83),
	    Promise = __webpack_require__(/*! ./_Promise */ 137),
	    Set = __webpack_require__(/*! ./_Set */ 138),
	    WeakMap = __webpack_require__(/*! ./_WeakMap */ 139),
	    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ 140),
	    toSource = __webpack_require__(/*! ./_toSource */ 18);
	
	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';
	
	var dataViewTag = '[object DataView]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);
	
	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;
	
	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;
	
	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}
	
	module.exports = getTag;


/***/ },
/* 136 */
/*!*******************************!*\
  !*** ./~/lodash/_DataView.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(/*! ./_getNative */ 10),
	    root = __webpack_require__(/*! ./_root */ 16);
	
	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');
	
	module.exports = DataView;


/***/ },
/* 137 */
/*!******************************!*\
  !*** ./~/lodash/_Promise.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(/*! ./_getNative */ 10),
	    root = __webpack_require__(/*! ./_root */ 16);
	
	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');
	
	module.exports = Promise;


/***/ },
/* 138 */
/*!**************************!*\
  !*** ./~/lodash/_Set.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(/*! ./_getNative */ 10),
	    root = __webpack_require__(/*! ./_root */ 16);
	
	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');
	
	module.exports = Set;


/***/ },
/* 139 */
/*!******************************!*\
  !*** ./~/lodash/_WeakMap.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(/*! ./_getNative */ 10),
	    root = __webpack_require__(/*! ./_root */ 16);
	
	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');
	
	module.exports = WeakMap;


/***/ },
/* 140 */
/*!*********************************!*\
  !*** ./~/lodash/_baseGetTag.js ***!
  \*********************************/
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}
	
	module.exports = baseGetTag;


/***/ },
/* 141 */
/*!*********************************!*\
  !*** ./~/lodash/_mapToArray.js ***!
  \*********************************/
/***/ function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);
	
	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}
	
	module.exports = mapToArray;


/***/ },
/* 142 */
/*!*********************************!*\
  !*** ./~/lodash/_setToPairs.js ***!
  \*********************************/
/***/ function(module, exports) {

	/**
	 * Converts `set` to its value-value pairs.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the value-value pairs.
	 */
	function setToPairs(set) {
	  var index = -1,
	      result = Array(set.size);
	
	  set.forEach(function(value) {
	    result[++index] = [value, value];
	  });
	  return result;
	}
	
	module.exports = setToPairs;


/***/ },
/* 143 */
/*!*******************************!*\
  !*** ./~/lodash/entriesIn.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./toPairsIn */ 144);


/***/ },
/* 144 */
/*!*******************************!*\
  !*** ./~/lodash/toPairsIn.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var createToPairs = __webpack_require__(/*! ./_createToPairs */ 133),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * Creates an array of own and inherited enumerable string keyed-value pairs
	 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	 * or set, its entries are returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias entriesIn
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairsIn(new Foo);
	 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	 */
	var toPairsIn = createToPairs(keysIn);
	
	module.exports = toPairsIn;


/***/ },
/* 145 */
/*!****************************!*\
  !*** ./~/lodash/extend.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./assignIn */ 53);


/***/ },
/* 146 */
/*!********************************!*\
  !*** ./~/lodash/extendWith.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./assignInWith */ 57);


/***/ },
/* 147 */
/*!*****************************!*\
  !*** ./~/lodash/findKey.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFindKey = __webpack_require__(/*! ./_baseFindKey */ 148),
	    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ 149),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150);
	
	/**
	 * This method is like `_.find` except that it returns the key of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {string|undefined} Returns the key of the matched element,
	 *  else `undefined`.
	 * @example
	 *
	 * var users = {
	 *   'barney':  { 'age': 36, 'active': true },
	 *   'fred':    { 'age': 40, 'active': false },
	 *   'pebbles': { 'age': 1,  'active': true }
	 * };
	 *
	 * _.findKey(users, function(o) { return o.age < 40; });
	 * // => 'barney' (iteration order is not guaranteed)
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findKey(users, { 'age': 1, 'active': true });
	 * // => 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findKey(users, ['active', false]);
	 * // => 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findKey(users, 'active');
	 * // => 'barney'
	 */
	function findKey(object, predicate) {
	  return baseFindKey(object, baseIteratee(predicate, 3), baseForOwn);
	}
	
	module.exports = findKey;


/***/ },
/* 148 */
/*!**********************************!*\
  !*** ./~/lodash/_baseFindKey.js ***!
  \**********************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	 * without support for iteratee shorthands, which iterates over `collection`
	 * using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFindKey(collection, predicate, eachFunc) {
	  var result;
	  eachFunc(collection, function(value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = key;
	      return false;
	    }
	  });
	  return result;
	}
	
	module.exports = baseFindKey;


/***/ },
/* 149 */
/*!*********************************!*\
  !*** ./~/lodash/_baseForOwn.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(/*! ./_baseFor */ 117),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}
	
	module.exports = baseForOwn;


/***/ },
/* 150 */
/*!***********************************!*\
  !*** ./~/lodash/_baseIteratee.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(/*! ./_baseMatches */ 151),
	    baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ 167),
	    identity = __webpack_require__(/*! ./identity */ 24),
	    isArray = __webpack_require__(/*! ./isArray */ 42),
	    property = __webpack_require__(/*! ./property */ 171);
	
	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}
	
	module.exports = baseIteratee;


/***/ },
/* 151 */
/*!**********************************!*\
  !*** ./~/lodash/_baseMatches.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ 152),
	    getMatchData = __webpack_require__(/*! ./_getMatchData */ 164),
	    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ 166);
	
	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}
	
	module.exports = baseMatches;


/***/ },
/* 152 */
/*!**********************************!*\
  !*** ./~/lodash/_baseIsMatch.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(/*! ./_Stack */ 110),
	    baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ 153);
	
	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;
	
	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;
	
	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];
	
	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	
	module.exports = baseIsMatch;


/***/ },
/* 153 */
/*!**********************************!*\
  !*** ./~/lodash/_baseIsEqual.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ 154),
	    isObject = __webpack_require__(/*! ./isObject */ 13),
	    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 41);
	
	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {boolean} [bitmask] The bitmask of comparison flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - Unordered comparison
	 *     2 - Partial comparison
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, bitmask, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	}
	
	module.exports = baseIsEqual;


/***/ },
/* 154 */
/*!**************************************!*\
  !*** ./~/lodash/_baseIsEqualDeep.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(/*! ./_Stack */ 110),
	    equalArrays = __webpack_require__(/*! ./_equalArrays */ 155),
	    equalByTag = __webpack_require__(/*! ./_equalByTag */ 161),
	    equalObjects = __webpack_require__(/*! ./_equalObjects */ 163),
	    getTag = __webpack_require__(/*! ./_getTag */ 135),
	    isArray = __webpack_require__(/*! ./isArray */ 42),
	    isBuffer = __webpack_require__(/*! ./isBuffer */ 43),
	    isTypedArray = __webpack_require__(/*! ./isTypedArray */ 46);
	
	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;
	
	  if (!objIsArr) {
	    objTag = getTag(object);
	    objTag = objTag == argsTag ? objectTag : objTag;
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    othTag = othTag == argsTag ? objectTag : othTag;
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;
	
	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	  }
	  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;
	
	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	}
	
	module.exports = baseIsEqualDeep;


/***/ },
/* 155 */
/*!**********************************!*\
  !*** ./~/lodash/_equalArrays.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(/*! ./_SetCache */ 156),
	    arraySome = __webpack_require__(/*! ./_arraySome */ 159),
	    cacheHas = __webpack_require__(/*! ./_cacheHas */ 160);
	
	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      arrLength = array.length,
	      othLength = other.length;
	
	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;
	
	  stack.set(array, other);
	  stack.set(other, array);
	
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];
	
	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, customizer, bitmask, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}
	
	module.exports = equalArrays;


/***/ },
/* 156 */
/*!*******************************!*\
  !*** ./~/lodash/_SetCache.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(/*! ./_MapCache */ 67),
	    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ 157),
	    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ 158);
	
	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;
	
	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}
	
	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;
	
	module.exports = SetCache;


/***/ },
/* 157 */
/*!**********************************!*\
  !*** ./~/lodash/_setCacheAdd.js ***!
  \**********************************/
/***/ function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}
	
	module.exports = setCacheAdd;


/***/ },
/* 158 */
/*!**********************************!*\
  !*** ./~/lodash/_setCacheHas.js ***!
  \**********************************/
/***/ function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}
	
	module.exports = setCacheHas;


/***/ },
/* 159 */
/*!********************************!*\
  !*** ./~/lodash/_arraySome.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array ? array.length : 0;
	
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	module.exports = arraySome;


/***/ },
/* 160 */
/*!*******************************!*\
  !*** ./~/lodash/_cacheHas.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}
	
	module.exports = cacheHas;


/***/ },
/* 161 */
/*!*********************************!*\
  !*** ./~/lodash/_equalByTag.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(/*! ./_Symbol */ 92),
	    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ 123),
	    eq = __webpack_require__(/*! ./eq */ 20),
	    equalArrays = __webpack_require__(/*! ./_equalArrays */ 155),
	    mapToArray = __webpack_require__(/*! ./_mapToArray */ 141),
	    setToArray = __webpack_require__(/*! ./_setToArray */ 162);
	
	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;
	
	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;
	
	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;
	
	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);
	
	    case errorTag:
	      return object.name == other.name && object.message == other.message;
	
	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');
	
	    case mapTag:
	      var convert = mapToArray;
	
	    case setTag:
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	      convert || (convert = setToArray);
	
	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= UNORDERED_COMPARE_FLAG;
	
	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
	      stack['delete'](object);
	      return result;
	
	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}
	
	module.exports = equalByTag;


/***/ },
/* 162 */
/*!*********************************!*\
  !*** ./~/lodash/_setToArray.js ***!
  \*********************************/
/***/ function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);
	
	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}
	
	module.exports = setToArray;


/***/ },
/* 163 */
/*!***********************************!*\
  !*** ./~/lodash/_equalObjects.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(/*! ./keys */ 36);
	
	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;
	
	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);
	
	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];
	
	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;
	
	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}
	
	module.exports = equalObjects;


/***/ },
/* 164 */
/*!***********************************!*\
  !*** ./~/lodash/_getMatchData.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ 165),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;
	
	  while (length--) {
	    var key = result[length],
	        value = object[key];
	
	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}
	
	module.exports = getMatchData;


/***/ },
/* 165 */
/*!*****************************************!*\
  !*** ./~/lodash/_isStrictComparable.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(/*! ./isObject */ 13);
	
	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}
	
	module.exports = isStrictComparable;


/***/ },
/* 166 */
/*!**********************************************!*\
  !*** ./~/lodash/_matchesStrictComparable.js ***!
  \**********************************************/
/***/ function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}
	
	module.exports = matchesStrictComparable;


/***/ },
/* 167 */
/*!******************************************!*\
  !*** ./~/lodash/_baseMatchesProperty.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ 153),
	    get = __webpack_require__(/*! ./get */ 61),
	    hasIn = __webpack_require__(/*! ./hasIn */ 168),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ 165),
	    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ 166),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;
	
	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	  };
	}
	
	module.exports = baseMatchesProperty;


/***/ },
/* 168 */
/*!***************************!*\
  !*** ./~/lodash/hasIn.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ 169),
	    hasPath = __webpack_require__(/*! ./_hasPath */ 170);
	
	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}
	
	module.exports = hasIn;


/***/ },
/* 169 */
/*!********************************!*\
  !*** ./~/lodash/_baseHasIn.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}
	
	module.exports = baseHasIn;


/***/ },
/* 170 */
/*!******************************!*\
  !*** ./~/lodash/_hasPath.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(/*! ./_castPath */ 63),
	    isArguments = __webpack_require__(/*! ./isArguments */ 39),
	    isArray = __webpack_require__(/*! ./isArray */ 42),
	    isIndex = __webpack_require__(/*! ./_isIndex */ 34),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    isLength = __webpack_require__(/*! ./isLength */ 33),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = isKey(path, object) ? [path] : castPath(path);
	
	  var index = -1,
	      length = path.length,
	      result = false;
	
	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object ? object.length : 0;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}
	
	module.exports = hasPath;


/***/ },
/* 171 */
/*!******************************!*\
  !*** ./~/lodash/property.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(/*! ./_baseProperty */ 172),
	    basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ 173),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}
	
	module.exports = property;


/***/ },
/* 172 */
/*!***********************************!*\
  !*** ./~/lodash/_baseProperty.js ***!
  \***********************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}
	
	module.exports = baseProperty;


/***/ },
/* 173 */
/*!***************************************!*\
  !*** ./~/lodash/_basePropertyDeep.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(/*! ./_baseGet */ 62);
	
	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}
	
	module.exports = basePropertyDeep;


/***/ },
/* 174 */
/*!*********************************!*\
  !*** ./~/lodash/findLastKey.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFindKey = __webpack_require__(/*! ./_baseFindKey */ 148),
	    baseForOwnRight = __webpack_require__(/*! ./_baseForOwnRight */ 175),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150);
	
	/**
	 * This method is like `_.findKey` except that it iterates over elements of
	 * a collection in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {string|undefined} Returns the key of the matched element,
	 *  else `undefined`.
	 * @example
	 *
	 * var users = {
	 *   'barney':  { 'age': 36, 'active': true },
	 *   'fred':    { 'age': 40, 'active': false },
	 *   'pebbles': { 'age': 1,  'active': true }
	 * };
	 *
	 * _.findLastKey(users, function(o) { return o.age < 40; });
	 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findLastKey(users, { 'age': 36, 'active': true });
	 * // => 'barney'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findLastKey(users, ['active', false]);
	 * // => 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findLastKey(users, 'active');
	 * // => 'pebbles'
	 */
	function findLastKey(object, predicate) {
	  return baseFindKey(object, baseIteratee(predicate, 3), baseForOwnRight);
	}
	
	module.exports = findLastKey;


/***/ },
/* 175 */
/*!**************************************!*\
  !*** ./~/lodash/_baseForOwnRight.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseForRight = __webpack_require__(/*! ./_baseForRight */ 176),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwnRight(object, iteratee) {
	  return object && baseForRight(object, iteratee, keys);
	}
	
	module.exports = baseForOwnRight;


/***/ },
/* 176 */
/*!***********************************!*\
  !*** ./~/lodash/_baseForRight.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ 118);
	
	/**
	 * This function is like `baseFor` except that it iterates over properties
	 * in the opposite order.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseForRight = createBaseFor(true);
	
	module.exports = baseForRight;


/***/ },
/* 177 */
/*!***************************!*\
  !*** ./~/lodash/forIn.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(/*! ./_baseFor */ 117),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * Iterates over own and inherited enumerable string keyed properties of an
	 * object and invokes `iteratee` for each property. The iteratee is invoked
	 * with three arguments: (value, key, object). Iteratee functions may exit
	 * iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forInRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forIn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	 */
	function forIn(object, iteratee) {
	  return object == null
	    ? object
	    : baseFor(object, baseIteratee(iteratee, 3), keysIn);
	}
	
	module.exports = forIn;


/***/ },
/* 178 */
/*!********************************!*\
  !*** ./~/lodash/forInRight.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseForRight = __webpack_require__(/*! ./_baseForRight */ 176),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * This method is like `_.forIn` except that it iterates over properties of
	 * `object` in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forInRight(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	 */
	function forInRight(object, iteratee) {
	  return object == null
	    ? object
	    : baseForRight(object, baseIteratee(iteratee, 3), keysIn);
	}
	
	module.exports = forInRight;


/***/ },
/* 179 */
/*!****************************!*\
  !*** ./~/lodash/forOwn.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ 149),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150);
	
	/**
	 * Iterates over own enumerable string keyed properties of an object and
	 * invokes `iteratee` for each property. The iteratee is invoked with three
	 * arguments: (value, key, object). Iteratee functions may exit iteration
	 * early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forOwnRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forOwn(object, iteratee) {
	  return object && baseForOwn(object, baseIteratee(iteratee, 3));
	}
	
	module.exports = forOwn;


/***/ },
/* 180 */
/*!*********************************!*\
  !*** ./~/lodash/forOwnRight.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseForOwnRight = __webpack_require__(/*! ./_baseForOwnRight */ 175),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150);
	
	/**
	 * This method is like `_.forOwn` except that it iterates over properties of
	 * `object` in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forOwn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwnRight(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	 */
	function forOwnRight(object, iteratee) {
	  return object && baseForOwnRight(object, baseIteratee(iteratee, 3));
	}
	
	module.exports = forOwnRight;


/***/ },
/* 181 */
/*!*******************************!*\
  !*** ./~/lodash/functions.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFunctions = __webpack_require__(/*! ./_baseFunctions */ 182),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * Creates an array of function property names from own enumerable properties
	 * of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @returns {Array} Returns the function names.
	 * @see _.functionsIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = _.constant('a');
	 *   this.b = _.constant('b');
	 * }
	 *
	 * Foo.prototype.c = _.constant('c');
	 *
	 * _.functions(new Foo);
	 * // => ['a', 'b']
	 */
	function functions(object) {
	  return object == null ? [] : baseFunctions(object, keys(object));
	}
	
	module.exports = functions;


/***/ },
/* 182 */
/*!************************************!*\
  !*** ./~/lodash/_baseFunctions.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ 183),
	    isFunction = __webpack_require__(/*! ./isFunction */ 12);
	
	/**
	 * The base implementation of `_.functions` which creates an array of
	 * `object` function property names filtered from `props`.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} props The property names to filter.
	 * @returns {Array} Returns the function names.
	 */
	function baseFunctions(object, props) {
	  return arrayFilter(props, function(key) {
	    return isFunction(object[key]);
	  });
	}
	
	module.exports = baseFunctions;


/***/ },
/* 183 */
/*!**********************************!*\
  !*** ./~/lodash/_arrayFilter.js ***!
  \**********************************/
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array ? array.length : 0,
	      resIndex = 0,
	      result = [];
	
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = arrayFilter;


/***/ },
/* 184 */
/*!*********************************!*\
  !*** ./~/lodash/functionsIn.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFunctions = __webpack_require__(/*! ./_baseFunctions */ 182),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * Creates an array of function property names from own and inherited
	 * enumerable properties of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @returns {Array} Returns the function names.
	 * @see _.functions
	 * @example
	 *
	 * function Foo() {
	 *   this.a = _.constant('a');
	 *   this.b = _.constant('b');
	 * }
	 *
	 * Foo.prototype.c = _.constant('c');
	 *
	 * _.functionsIn(new Foo);
	 * // => ['a', 'b', 'c']
	 */
	function functionsIn(object) {
	  return object == null ? [] : baseFunctions(object, keysIn(object));
	}
	
	module.exports = functionsIn;


/***/ },
/* 185 */
/*!*************************!*\
  !*** ./~/lodash/has.js ***!
  \*************************/
/***/ function(module, exports, __webpack_require__) {

	var baseHas = __webpack_require__(/*! ./_baseHas */ 186),
	    hasPath = __webpack_require__(/*! ./_hasPath */ 170);
	
	/**
	 * Checks if `path` is a direct property of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': 2 } };
	 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b');
	 * // => true
	 *
	 * _.has(object, ['a', 'b']);
	 * // => true
	 *
	 * _.has(other, 'a');
	 * // => false
	 */
	function has(object, path) {
	  return object != null && hasPath(object, path, baseHas);
	}
	
	module.exports = has;


/***/ },
/* 186 */
/*!******************************!*\
  !*** ./~/lodash/_baseHas.js ***!
  \******************************/
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  return object != null && hasOwnProperty.call(object, key);
	}
	
	module.exports = baseHas;


/***/ },
/* 187 */
/*!****************************!*\
  !*** ./~/lodash/invert.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(/*! ./constant */ 29),
	    createInverter = __webpack_require__(/*! ./_createInverter */ 188),
	    identity = __webpack_require__(/*! ./identity */ 24);
	
	/**
	 * Creates an object composed of the inverted keys and values of `object`.
	 * If `object` contains duplicate values, subsequent values overwrite
	 * property assignments of previous values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.7.0
	 * @category Object
	 * @param {Object} object The object to invert.
	 * @returns {Object} Returns the new inverted object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2, 'c': 1 };
	 *
	 * _.invert(object);
	 * // => { '1': 'c', '2': 'b' }
	 */
	var invert = createInverter(function(result, value, key) {
	  result[value] = key;
	}, constant(identity));
	
	module.exports = invert;


/***/ },
/* 188 */
/*!*************************************!*\
  !*** ./~/lodash/_createInverter.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseInverter = __webpack_require__(/*! ./_baseInverter */ 189);
	
	/**
	 * Creates a function like `_.invertBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} toIteratee The function to resolve iteratees.
	 * @returns {Function} Returns the new inverter function.
	 */
	function createInverter(setter, toIteratee) {
	  return function(object, iteratee) {
	    return baseInverter(object, setter, toIteratee(iteratee), {});
	  };
	}
	
	module.exports = createInverter;


/***/ },
/* 189 */
/*!***********************************!*\
  !*** ./~/lodash/_baseInverter.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ 149);
	
	/**
	 * The base implementation of `_.invert` and `_.invertBy` which inverts
	 * `object` with values transformed by `iteratee` and set by `setter`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform values.
	 * @param {Object} accumulator The initial inverted object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function baseInverter(object, setter, iteratee, accumulator) {
	  baseForOwn(object, function(value, key, object) {
	    setter(accumulator, iteratee(value), key, object);
	  });
	  return accumulator;
	}
	
	module.exports = baseInverter;


/***/ },
/* 190 */
/*!******************************!*\
  !*** ./~/lodash/invertBy.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150),
	    createInverter = __webpack_require__(/*! ./_createInverter */ 188);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * This method is like `_.invert` except that the inverted object is generated
	 * from the results of running each element of `object` thru `iteratee`. The
	 * corresponding inverted value of each inverted key is an array of keys
	 * responsible for generating the inverted value. The iteratee is invoked
	 * with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.1.0
	 * @category Object
	 * @param {Object} object The object to invert.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Object} Returns the new inverted object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2, 'c': 1 };
	 *
	 * _.invertBy(object);
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 *
	 * _.invertBy(object, function(value) {
	 *   return 'group' + value;
	 * });
	 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	 */
	var invertBy = createInverter(function(result, value, key) {
	  if (hasOwnProperty.call(result, value)) {
	    result[value].push(key);
	  } else {
	    result[value] = [key];
	  }
	}, baseIteratee);
	
	module.exports = invertBy;


/***/ },
/* 191 */
/*!****************************!*\
  !*** ./~/lodash/invoke.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseInvoke = __webpack_require__(/*! ./_baseInvoke */ 192),
	    baseRest = __webpack_require__(/*! ./_baseRest */ 23);
	
	/**
	 * Invokes the method at `path` of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {*} Returns the result of the invoked method.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	 *
	 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	 * // => [2, 3]
	 */
	var invoke = baseRest(baseInvoke);
	
	module.exports = invoke;


/***/ },
/* 192 */
/*!*********************************!*\
  !*** ./~/lodash/_baseInvoke.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(/*! ./_apply */ 26),
	    castPath = __webpack_require__(/*! ./_castPath */ 63),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    last = __webpack_require__(/*! ./last */ 193),
	    parent = __webpack_require__(/*! ./_parent */ 194),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * The base implementation of `_.invoke` without support for individual
	 * method arguments.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {Array} args The arguments to invoke the method with.
	 * @returns {*} Returns the result of the invoked method.
	 */
	function baseInvoke(object, path, args) {
	  if (!isKey(path, object)) {
	    path = castPath(path);
	    object = parent(object, path);
	    path = last(path);
	  }
	  var func = object == null ? object : object[toKey(path)];
	  return func == null ? undefined : apply(func, object, args);
	}
	
	module.exports = baseInvoke;


/***/ },
/* 193 */
/*!**************************!*\
  !*** ./~/lodash/last.js ***!
  \**************************/
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}
	
	module.exports = last;


/***/ },
/* 194 */
/*!*****************************!*\
  !*** ./~/lodash/_parent.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(/*! ./_baseGet */ 62),
	    baseSlice = __webpack_require__(/*! ./_baseSlice */ 195);
	
	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */
	function parent(object, path) {
	  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	}
	
	module.exports = parent;


/***/ },
/* 195 */
/*!********************************!*\
  !*** ./~/lodash/_baseSlice.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;
	
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;
	
	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}
	
	module.exports = baseSlice;


/***/ },
/* 196 */
/*!*****************************!*\
  !*** ./~/lodash/mapKeys.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ 8),
	    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ 149),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150);
	
	/**
	 * The opposite of `_.mapValues`; this method creates an object with the
	 * same values as `object` and keys generated by running each own enumerable
	 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	 * with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.8.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @see _.mapValues
	 * @example
	 *
	 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   return key + value;
	 * });
	 * // => { 'a1': 1, 'b2': 2 }
	 */
	function mapKeys(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);
	
	  baseForOwn(object, function(value, key, object) {
	    baseAssignValue(result, iteratee(value, key, object), value);
	  });
	  return result;
	}
	
	module.exports = mapKeys;


/***/ },
/* 197 */
/*!*******************************!*\
  !*** ./~/lodash/mapValues.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ 8),
	    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ 149),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150);
	
	/**
	 * Creates an object with the same keys as `object` and values generated
	 * by running each own enumerable string keyed property of `object` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @see _.mapKeys
	 * @example
	 *
	 * var users = {
	 *   'fred':    { 'user': 'fred',    'age': 40 },
	 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	 * };
	 *
	 * _.mapValues(users, function(o) { return o.age; });
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.mapValues(users, 'age');
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 */
	function mapValues(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);
	
	  baseForOwn(object, function(value, key, object) {
	    baseAssignValue(result, key, iteratee(value, key, object));
	  });
	  return result;
	}
	
	module.exports = mapValues;


/***/ },
/* 198 */
/*!***************************!*\
  !*** ./~/lodash/merge.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(/*! ./_baseMerge */ 109),
	    createAssigner = __webpack_require__(/*! ./_createAssigner */ 22);
	
	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */
	var merge = createAssigner(function(object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});
	
	module.exports = merge;


/***/ },
/* 199 */
/*!**************************!*\
  !*** ./~/lodash/omit.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(/*! ./_arrayMap */ 93),
	    baseDifference = __webpack_require__(/*! ./_baseDifference */ 200),
	    basePick = __webpack_require__(/*! ./_basePick */ 207),
	    flatRest = __webpack_require__(/*! ./_flatRest */ 97),
	    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ 209),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable string keyed properties of `object` that are
	 * not omitted.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [props] The property identifiers to omit.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.omit(object, ['a', 'c']);
	 * // => { 'b': '2' }
	 */
	var omit = flatRest(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  props = arrayMap(props, toKey);
	  return basePick(object, baseDifference(getAllKeysIn(object), props));
	});
	
	module.exports = omit;


/***/ },
/* 200 */
/*!*************************************!*\
  !*** ./~/lodash/_baseDifference.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(/*! ./_SetCache */ 156),
	    arrayIncludes = __webpack_require__(/*! ./_arrayIncludes */ 201),
	    arrayIncludesWith = __webpack_require__(/*! ./_arrayIncludesWith */ 206),
	    arrayMap = __webpack_require__(/*! ./_arrayMap */ 93),
	    baseUnary = __webpack_require__(/*! ./_baseUnary */ 48),
	    cacheHas = __webpack_require__(/*! ./_cacheHas */ 160);
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/**
	 * The base implementation of methods like `_.difference` without support
	 * for excluding multiple arrays or iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      isCommon = true,
	      length = array.length,
	      result = [],
	      valuesLength = values.length;
	
	  if (!length) {
	    return result;
	  }
	  if (iteratee) {
	    values = arrayMap(values, baseUnary(iteratee));
	  }
	  if (comparator) {
	    includes = arrayIncludesWith;
	    isCommon = false;
	  }
	  else if (values.length >= LARGE_ARRAY_SIZE) {
	    includes = cacheHas;
	    isCommon = false;
	    values = new SetCache(values);
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;
	
	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === computed) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (!includes(values, computed, comparator)) {
	      result.push(value);
	    }
	  }
	  return result;
	}
	
	module.exports = baseDifference;


/***/ },
/* 201 */
/*!************************************!*\
  !*** ./~/lodash/_arrayIncludes.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ 202);
	
	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array ? array.length : 0;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}
	
	module.exports = arrayIncludes;


/***/ },
/* 202 */
/*!**********************************!*\
  !*** ./~/lodash/_baseIndexOf.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(/*! ./_baseFindIndex */ 203),
	    baseIsNaN = __webpack_require__(/*! ./_baseIsNaN */ 204),
	    strictIndexOf = __webpack_require__(/*! ./_strictIndexOf */ 205);
	
	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}
	
	module.exports = baseIndexOf;


/***/ },
/* 203 */
/*!************************************!*\
  !*** ./~/lodash/_baseFindIndex.js ***!
  \************************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);
	
	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	module.exports = baseFindIndex;


/***/ },
/* 204 */
/*!********************************!*\
  !*** ./~/lodash/_baseIsNaN.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}
	
	module.exports = baseIsNaN;


/***/ },
/* 205 */
/*!************************************!*\
  !*** ./~/lodash/_strictIndexOf.js ***!
  \************************************/
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;
	
	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	module.exports = strictIndexOf;


/***/ },
/* 206 */
/*!****************************************!*\
  !*** ./~/lodash/_arrayIncludesWith.js ***!
  \****************************************/
/***/ function(module, exports) {

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array ? array.length : 0;
	
	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}
	
	module.exports = arrayIncludesWith;


/***/ },
/* 207 */
/*!*******************************!*\
  !*** ./~/lodash/_basePick.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var basePickBy = __webpack_require__(/*! ./_basePickBy */ 208);
	
	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property identifiers to pick.
	 * @returns {Object} Returns the new object.
	 */
	function basePick(object, props) {
	  object = Object(object);
	  return basePickBy(object, props, function(value, key) {
	    return key in object;
	  });
	}
	
	module.exports = basePick;


/***/ },
/* 208 */
/*!*********************************!*\
  !*** ./~/lodash/_basePickBy.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ 8);
	
	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property identifiers to pick from.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy(object, props, predicate) {
	  var index = -1,
	      length = props.length,
	      result = {};
	
	  while (++index < length) {
	    var key = props[index],
	        value = object[key];
	
	    if (predicate(value, key)) {
	      baseAssignValue(result, key, value);
	    }
	  }
	  return result;
	}
	
	module.exports = basePickBy;


/***/ },
/* 209 */
/*!***********************************!*\
  !*** ./~/lodash/_getAllKeysIn.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ 210),
	    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ 211),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn(object) {
	  return baseGetAllKeys(object, keysIn, getSymbolsIn);
	}
	
	module.exports = getAllKeysIn;


/***/ },
/* 210 */
/*!*************************************!*\
  !*** ./~/lodash/_baseGetAllKeys.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(/*! ./_arrayPush */ 100),
	    isArray = __webpack_require__(/*! ./isArray */ 42);
	
	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}
	
	module.exports = baseGetAllKeys;


/***/ },
/* 211 */
/*!***********************************!*\
  !*** ./~/lodash/_getSymbolsIn.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(/*! ./_arrayPush */ 100),
	    getPrototype = __webpack_require__(/*! ./_getPrototype */ 126),
	    getSymbols = __webpack_require__(/*! ./_getSymbols */ 212),
	    stubArray = __webpack_require__(/*! ./stubArray */ 213);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;
	
	/**
	 * Creates an array of the own and inherited enumerable symbol properties
	 * of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	  var result = [];
	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype(object);
	  }
	  return result;
	};
	
	module.exports = getSymbolsIn;


/***/ },
/* 212 */
/*!*********************************!*\
  !*** ./~/lodash/_getSymbols.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(/*! ./_overArg */ 52),
	    stubArray = __webpack_require__(/*! ./stubArray */ 213);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;
	
	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
	
	module.exports = getSymbols;


/***/ },
/* 213 */
/*!*******************************!*\
  !*** ./~/lodash/stubArray.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}
	
	module.exports = stubArray;


/***/ },
/* 214 */
/*!****************************!*\
  !*** ./~/lodash/omitBy.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150),
	    negate = __webpack_require__(/*! ./negate */ 215),
	    pickBy = __webpack_require__(/*! ./pickBy */ 216);
	
	/**
	 * The opposite of `_.pickBy`; this method creates an object composed of
	 * the own and inherited enumerable string keyed properties of `object` that
	 * `predicate` doesn't return truthy for. The predicate is invoked with two
	 * arguments: (value, key).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function} [predicate=_.identity] The function invoked per property.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.omitBy(object, _.isNumber);
	 * // => { 'b': '2' }
	 */
	function omitBy(object, predicate) {
	  return pickBy(object, negate(baseIteratee(predicate)));
	}
	
	module.exports = omitBy;


/***/ },
/* 215 */
/*!****************************!*\
  !*** ./~/lodash/negate.js ***!
  \****************************/
/***/ function(module, exports) {

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that negates the result of the predicate `func`. The
	 * `func` predicate is invoked with the `this` binding and arguments of the
	 * created function.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} predicate The predicate to negate.
	 * @returns {Function} Returns the new negated function.
	 * @example
	 *
	 * function isEven(n) {
	 *   return n % 2 == 0;
	 * }
	 *
	 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	 * // => [1, 3, 5]
	 */
	function negate(predicate) {
	  if (typeof predicate != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  return function() {
	    var args = arguments;
	    switch (args.length) {
	      case 0: return !predicate.call(this);
	      case 1: return !predicate.call(this, args[0]);
	      case 2: return !predicate.call(this, args[0], args[1]);
	      case 3: return !predicate.call(this, args[0], args[1], args[2]);
	    }
	    return !predicate.apply(this, args);
	  };
	}
	
	module.exports = negate;


/***/ },
/* 216 */
/*!****************************!*\
  !*** ./~/lodash/pickBy.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150),
	    basePickBy = __webpack_require__(/*! ./_basePickBy */ 208),
	    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ 209);
	
	/**
	 * Creates an object composed of the `object` properties `predicate` returns
	 * truthy for. The predicate is invoked with two arguments: (value, key).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function} [predicate=_.identity] The function invoked per property.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pickBy(object, _.isNumber);
	 * // => { 'a': 1, 'c': 3 }
	 */
	function pickBy(object, predicate) {
	  return object == null ? {} : basePickBy(object, getAllKeysIn(object), baseIteratee(predicate));
	}
	
	module.exports = pickBy;


/***/ },
/* 217 */
/*!**************************!*\
  !*** ./~/lodash/pick.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(/*! ./_arrayMap */ 93),
	    basePick = __webpack_require__(/*! ./_basePick */ 207),
	    flatRest = __webpack_require__(/*! ./_flatRest */ 97),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [props] The property identifiers to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var pick = flatRest(function(object, props) {
	  return object == null ? {} : basePick(object, arrayMap(props, toKey));
	});
	
	module.exports = pick;


/***/ },
/* 218 */
/*!****************************!*\
  !*** ./~/lodash/result.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(/*! ./_castPath */ 63),
	    isFunction = __webpack_require__(/*! ./isFunction */ 12),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * This method is like `_.get` except that if the resolved value is a
	 * function it's invoked with the `this` binding of its parent object and
	 * its result is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to resolve.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	 *
	 * _.result(object, 'a[0].b.c1');
	 * // => 3
	 *
	 * _.result(object, 'a[0].b.c2');
	 * // => 4
	 *
	 * _.result(object, 'a[0].b.c3', 'default');
	 * // => 'default'
	 *
	 * _.result(object, 'a[0].b.c3', _.constant('default'));
	 * // => 'default'
	 */
	function result(object, path, defaultValue) {
	  path = isKey(path, object) ? [path] : castPath(path);
	
	  var index = -1,
	      length = path.length;
	
	  // Ensure the loop is entered when path is empty.
	  if (!length) {
	    object = undefined;
	    length = 1;
	  }
	  while (++index < length) {
	    var value = object == null ? undefined : object[toKey(path[index])];
	    if (value === undefined) {
	      index = length;
	      value = defaultValue;
	    }
	    object = isFunction(value) ? value.call(object) : value;
	  }
	  return object;
	}
	
	module.exports = result;


/***/ },
/* 219 */
/*!*************************!*\
  !*** ./~/lodash/set.js ***!
  \*************************/
/***/ function(module, exports, __webpack_require__) {

	var baseSet = __webpack_require__(/*! ./_baseSet */ 220);
	
	/**
	 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	 * it's created. Arrays are created for missing index properties while objects
	 * are created for all other missing properties. Use `_.setWith` to customize
	 * `path` creation.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.set(object, 'a[0].b.c', 4);
	 * console.log(object.a[0].b.c);
	 * // => 4
	 *
	 * _.set(object, ['x', '0', 'y', 'z'], 5);
	 * console.log(object.x[0].y.z);
	 * // => 5
	 */
	function set(object, path, value) {
	  return object == null ? object : baseSet(object, path, value);
	}
	
	module.exports = set;


/***/ },
/* 220 */
/*!******************************!*\
  !*** ./~/lodash/_baseSet.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(/*! ./_assignValue */ 7),
	    castPath = __webpack_require__(/*! ./_castPath */ 63),
	    isIndex = __webpack_require__(/*! ./_isIndex */ 34),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    isObject = __webpack_require__(/*! ./isObject */ 13),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject(object)) {
	    return object;
	  }
	  path = isKey(path, object) ? [path] : castPath(path);
	
	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;
	
	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;
	
	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject(objValue)
	          ? objValue
	          : (isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}
	
	module.exports = baseSet;


/***/ },
/* 221 */
/*!*****************************!*\
  !*** ./~/lodash/setWith.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseSet = __webpack_require__(/*! ./_baseSet */ 220);
	
	/**
	 * This method is like `_.set` except that it accepts `customizer` which is
	 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	 * path creation is handled by the method instead. The `customizer` is invoked
	 * with three arguments: (nsValue, key, nsObject).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {};
	 *
	 * _.setWith(object, '[0][1]', 'a', Object);
	 * // => { '0': { '1': 'a' } }
	 */
	function setWith(object, path, value, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return object == null ? object : baseSet(object, path, value, customizer);
	}
	
	module.exports = setWith;


/***/ },
/* 222 */
/*!*******************************!*\
  !*** ./~/lodash/transform.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(/*! ./_arrayEach */ 223),
	    baseCreate = __webpack_require__(/*! ./_baseCreate */ 104),
	    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ 149),
	    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 150),
	    getPrototype = __webpack_require__(/*! ./_getPrototype */ 126),
	    isArray = __webpack_require__(/*! ./isArray */ 42),
	    isBuffer = __webpack_require__(/*! ./isBuffer */ 43),
	    isFunction = __webpack_require__(/*! ./isFunction */ 12),
	    isObject = __webpack_require__(/*! ./isObject */ 13),
	    isTypedArray = __webpack_require__(/*! ./isTypedArray */ 46);
	
	/**
	 * An alternative to `_.reduce`; this method transforms `object` to a new
	 * `accumulator` object which is the result of running each of its own
	 * enumerable string keyed properties thru `iteratee`, with each invocation
	 * potentially mutating the `accumulator` object. If `accumulator` is not
	 * provided, a new object with the same `[[Prototype]]` will be used. The
	 * iteratee is invoked with four arguments: (accumulator, value, key, object).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The custom accumulator value.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.transform([2, 3, 4], function(result, n) {
	 *   result.push(n *= n);
	 *   return n % 2 == 0;
	 * }, []);
	 * // => [4, 9]
	 *
	 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 */
	function transform(object, iteratee, accumulator) {
	  var isArr = isArray(object),
	      isArrLike = isArr || isBuffer(object) || isTypedArray(object);
	
	  iteratee = baseIteratee(iteratee, 4);
	  if (accumulator == null) {
	    var Ctor = object && object.constructor;
	    if (isArrLike) {
	      accumulator = isArr ? new Ctor : [];
	    }
	    else if (isObject(object)) {
	      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	    }
	    else {
	      accumulator = {};
	    }
	  }
	  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	    return iteratee(accumulator, value, index, object);
	  });
	  return accumulator;
	}
	
	module.exports = transform;


/***/ },
/* 223 */
/*!********************************!*\
  !*** ./~/lodash/_arrayEach.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;
	
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	
	module.exports = arrayEach;


/***/ },
/* 224 */
/*!***************************!*\
  !*** ./~/lodash/unset.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var baseUnset = __webpack_require__(/*! ./_baseUnset */ 225);
	
	/**
	 * Removes the property at `path` of `object`.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	 * _.unset(object, 'a[0].b.c');
	 * // => true
	 *
	 * console.log(object);
	 * // => { 'a': [{ 'b': {} }] };
	 *
	 * _.unset(object, ['a', '0', 'b', 'c']);
	 * // => true
	 *
	 * console.log(object);
	 * // => { 'a': [{ 'b': {} }] };
	 */
	function unset(object, path) {
	  return object == null ? true : baseUnset(object, path);
	}
	
	module.exports = unset;


/***/ },
/* 225 */
/*!********************************!*\
  !*** ./~/lodash/_baseUnset.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(/*! ./_castPath */ 63),
	    isKey = __webpack_require__(/*! ./_isKey */ 95),
	    last = __webpack_require__(/*! ./last */ 193),
	    parent = __webpack_require__(/*! ./_parent */ 194),
	    toKey = __webpack_require__(/*! ./_toKey */ 96);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * The base implementation of `_.unset`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 */
	function baseUnset(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);
	  object = parent(object, path);
	
	  var key = toKey(last(path));
	  return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];
	}
	
	module.exports = baseUnset;


/***/ },
/* 226 */
/*!****************************!*\
  !*** ./~/lodash/update.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseUpdate = __webpack_require__(/*! ./_baseUpdate */ 227),
	    castFunction = __webpack_require__(/*! ./_castFunction */ 228);
	
	/**
	 * This method is like `_.set` except that accepts `updater` to produce the
	 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	 * is invoked with one argument: (value).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.6.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {Function} updater The function to produce the updated value.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	 * console.log(object.a[0].b.c);
	 * // => 9
	 *
	 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	 * console.log(object.x[0].y.z);
	 * // => 0
	 */
	function update(object, path, updater) {
	  return object == null ? object : baseUpdate(object, path, castFunction(updater));
	}
	
	module.exports = update;


/***/ },
/* 227 */
/*!*********************************!*\
  !*** ./~/lodash/_baseUpdate.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(/*! ./_baseGet */ 62),
	    baseSet = __webpack_require__(/*! ./_baseSet */ 220);
	
	/**
	 * The base implementation of `_.update`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to update.
	 * @param {Function} updater The function to produce the updated value.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseUpdate(object, path, updater, customizer) {
	  return baseSet(object, path, updater(baseGet(object, path)), customizer);
	}
	
	module.exports = baseUpdate;


/***/ },
/* 228 */
/*!***********************************!*\
  !*** ./~/lodash/_castFunction.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(/*! ./identity */ 24);
	
	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction(value) {
	  return typeof value == 'function' ? value : identity;
	}
	
	module.exports = castFunction;


/***/ },
/* 229 */
/*!********************************!*\
  !*** ./~/lodash/updateWith.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var baseUpdate = __webpack_require__(/*! ./_baseUpdate */ 227),
	    castFunction = __webpack_require__(/*! ./_castFunction */ 228);
	
	/**
	 * This method is like `_.update` except that it accepts `customizer` which is
	 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	 * path creation is handled by the method instead. The `customizer` is invoked
	 * with three arguments: (nsValue, key, nsObject).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.6.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {Function} updater The function to produce the updated value.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {};
	 *
	 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	 * // => { '0': { '1': 'a' } }
	 */
	function updateWith(object, path, updater, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	}
	
	module.exports = updateWith;


/***/ },
/* 230 */
/*!****************************!*\
  !*** ./~/lodash/values.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(/*! ./_baseValues */ 231),
	    keys = __webpack_require__(/*! ./keys */ 36);
	
	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return object ? baseValues(object, keys(object)) : [];
	}
	
	module.exports = values;


/***/ },
/* 231 */
/*!*********************************!*\
  !*** ./~/lodash/_baseValues.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(/*! ./_arrayMap */ 93);
	
	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  return arrayMap(props, function(key) {
	    return object[key];
	  });
	}
	
	module.exports = baseValues;


/***/ },
/* 232 */
/*!******************************!*\
  !*** ./~/lodash/valuesIn.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(/*! ./_baseValues */ 231),
	    keysIn = __webpack_require__(/*! ./keysIn */ 54);
	
	/**
	 * Creates an array of the own and inherited enumerable string keyed property
	 * values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.valuesIn(new Foo);
	 * // => [1, 2, 3] (iteration order is not guaranteed)
	 */
	function valuesIn(object) {
	  return object == null ? [] : baseValues(object, keysIn(object));
	}
	
	module.exports = valuesIn;


/***/ },
/* 233 */
/*!**********************************!*\
  !*** ./~/eventemitter3/index.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var has = Object.prototype.hasOwnProperty;
	
	//
	// We store our EE objects in a plain object whose properties are event names.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// `~` to make sure that the built-in object properties are not overridden or
	// used as an attack vector.
	// We also assume that `Object.create(null)` is available when the event name
	// is an ES6 Symbol.
	//
	var prefix = typeof Object.create !== 'function' ? '~' : false;
	
	/**
	 * Representation of a single EventEmitter function.
	 *
	 * @param {Function} fn Event handler to be called.
	 * @param {Mixed} context Context for function execution.
	 * @param {Boolean} [once=false] Only emit once
	 * @api private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}
	
	/**
	 * Minimal EventEmitter interface that is molded against the Node.js
	 * EventEmitter interface.
	 *
	 * @constructor
	 * @api public
	 */
	function EventEmitter() { /* Nothing to set */ }
	
	/**
	 * Hold the assigned EventEmitters by name.
	 *
	 * @type {Object}
	 * @private
	 */
	EventEmitter.prototype._events = undefined;
	
	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @api public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var events = this._events
	    , names = []
	    , name;
	
	  if (!events) return names;
	
	  for (name in events) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }
	
	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }
	
	  return names;
	};
	
	/**
	 * Return a list of assigned event listeners.
	 *
	 * @param {String} event The events that should be listed.
	 * @param {Boolean} exists We only need to know if there are listeners.
	 * @returns {Array|Boolean}
	 * @api public
	 */
	EventEmitter.prototype.listeners = function listeners(event, exists) {
	  var evt = prefix ? prefix + event : event
	    , available = this._events && this._events[evt];
	
	  if (exists) return !!available;
	  if (!available) return [];
	  if (available.fn) return [available.fn];
	
	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
	    ee[i] = available[i].fn;
	  }
	
	  return ee;
	};
	
	/**
	 * Emit an event to all registered event listeners.
	 *
	 * @param {String} event The name of the event.
	 * @returns {Boolean} Indication if we've emitted an event.
	 * @api public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events || !this._events[evt]) return false;
	
	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;
	
	  if ('function' === typeof listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
	
	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }
	
	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }
	
	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;
	
	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
	
	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }
	
	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }
	
	  return true;
	};
	
	/**
	 * Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} [context=this] The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  var listener = new EE(fn, context || this)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }
	
	  return this;
	};
	
	/**
	 * Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} [context=this] The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  var listener = new EE(fn, context || this, true)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }
	
	  return this;
	};
	
	/**
	 * Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {Function} fn The listener that we need to find.
	 * @param {Mixed} context Only remove listeners matching this context.
	 * @param {Boolean} once Only remove once listeners.
	 * @api public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events || !this._events[evt]) return this;
	
	  var listeners = this._events[evt]
	    , events = [];
	
	  if (fn) {
	    if (listeners.fn) {
	      if (
	           listeners.fn !== fn
	        || (once && !listeners.once)
	        || (context && listeners.context !== context)
	      ) {
	        events.push(listeners);
	      }
	    } else {
	      for (var i = 0, length = listeners.length; i < length; i++) {
	        if (
	             listeners[i].fn !== fn
	          || (once && !listeners[i].once)
	          || (context && listeners[i].context !== context)
	        ) {
	          events.push(listeners[i]);
	        }
	      }
	    }
	  }
	
	  //
	  // Reset the array, or remove it completely if we have no more listeners.
	  //
	  if (events.length) {
	    this._events[evt] = events.length === 1 ? events[0] : events;
	  } else {
	    delete this._events[evt];
	  }
	
	  return this;
	};
	
	/**
	 * Remove all listeners or only the listeners for the specified event.
	 *
	 * @param {String} event The event want to remove all listeners for.
	 * @api public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  if (!this._events) return this;
	
	  if (event) delete this._events[prefix ? prefix + event : event];
	  else this._events = prefix ? {} : Object.create(null);
	
	  return this;
	};
	
	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;
	
	//
	// This function doesn't apply anymore.
	//
	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
	  return this;
	};
	
	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;
	
	//
	// Expose the module.
	//
	if (true) {
	  module.exports = EventEmitter;
	}


/***/ },
/* 234 */
/*!**********************************************!*\
  !*** ./~/signalk-client/~/ws/lib/browser.js ***!
  \**********************************************/
/***/ function(module, exports) {

	
	/**
	 * Module dependencies.
	 */
	
	var global = (function() { return this; })();
	
	/**
	 * WebSocket constructor.
	 */
	
	var WebSocket = global.WebSocket || global.MozWebSocket;
	
	/**
	 * Module exports.
	 */
	
	module.exports = WebSocket ? ws : null;
	
	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */
	
	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}
	
	if (WebSocket) ws.prototype = WebSocket.prototype;


/***/ },
/* 235 */
/*!****************************!*\
  !*** ./~/debug/browser.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(/*! ./debug */ 236);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 236 */
/*!**************************!*\
  !*** ./~/debug/debug.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(/*! ms */ 237);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 237 */
/*!***********************!*\
  !*** ./~/ms/index.js ***!
  \***********************/
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 238 */
/*!**********************!*\
  !*** ./~/url/url.js ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var punycode = __webpack_require__(/*! punycode */ 239);
	var util = __webpack_require__(/*! ./util */ 240);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(/*! querystring */ 241);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ },
/* 239 */
/*!********************************!*\
  !*** ./~/punycode/punycode.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 44)(module), (function() { return this; }())))

/***/ },
/* 240 */
/*!***********************!*\
  !*** ./~/url/util.js ***!
  \***********************/
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ },
/* 241 */
/*!********************************!*\
  !*** ./~/querystring/index.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(/*! ./decode */ 242);
	exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ 243);


/***/ },
/* 242 */
/*!*********************************!*\
  !*** ./~/querystring/decode.js ***!
  \*********************************/
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },
/* 243 */
/*!*********************************!*\
  !*** ./~/querystring/encode.js ***!
  \*********************************/
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 244 */
/*!*******************************************!*\
  !*** ./~/bluebird/js/browser/bluebird.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global, setImmediate) {/* @preserve
	 * The MIT License (MIT)
	 * 
	 * Copyright (c) 2013-2015 Petka Antonov
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 * 
	 */
	/**
	 * bluebird build version 3.4.6
	 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
	*/
	!function(e){if(true)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var SomePromiseArray = Promise._SomePromiseArray;
	function any(promises) {
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(1);
	    ret.setUnwrap();
	    ret.init();
	    return promise;
	}
	
	Promise.any = function (promises) {
	    return any(promises);
	};
	
	Promise.prototype.any = function () {
	    return any(this);
	};
	
	};
	
	},{}],2:[function(_dereq_,module,exports){
	"use strict";
	var firstLineError;
	try {throw new Error(); } catch (e) {firstLineError = e;}
	var schedule = _dereq_("./schedule");
	var Queue = _dereq_("./queue");
	var util = _dereq_("./util");
	
	function Async() {
	    this._customScheduler = false;
	    this._isTickUsed = false;
	    this._lateQueue = new Queue(16);
	    this._normalQueue = new Queue(16);
	    this._haveDrainedQueues = false;
	    this._trampolineEnabled = true;
	    var self = this;
	    this.drainQueues = function () {
	        self._drainQueues();
	    };
	    this._schedule = schedule;
	}
	
	Async.prototype.setScheduler = function(fn) {
	    var prev = this._schedule;
	    this._schedule = fn;
	    this._customScheduler = true;
	    return prev;
	};
	
	Async.prototype.hasCustomScheduler = function() {
	    return this._customScheduler;
	};
	
	Async.prototype.enableTrampoline = function() {
	    this._trampolineEnabled = true;
	};
	
	Async.prototype.disableTrampolineIfNecessary = function() {
	    if (util.hasDevTools) {
	        this._trampolineEnabled = false;
	    }
	};
	
	Async.prototype.haveItemsQueued = function () {
	    return this._isTickUsed || this._haveDrainedQueues;
	};
	
	
	Async.prototype.fatalError = function(e, isNode) {
	    if (isNode) {
	        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
	            "\n");
	        process.exit(2);
	    } else {
	        this.throwLater(e);
	    }
	};
	
	Async.prototype.throwLater = function(fn, arg) {
	    if (arguments.length === 1) {
	        arg = fn;
	        fn = function () { throw arg; };
	    }
	    if (typeof setTimeout !== "undefined") {
	        setTimeout(function() {
	            fn(arg);
	        }, 0);
	    } else try {
	        this._schedule(function() {
	            fn(arg);
	        });
	    } catch (e) {
	        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	};
	
	function AsyncInvokeLater(fn, receiver, arg) {
	    this._lateQueue.push(fn, receiver, arg);
	    this._queueTick();
	}
	
	function AsyncInvoke(fn, receiver, arg) {
	    this._normalQueue.push(fn, receiver, arg);
	    this._queueTick();
	}
	
	function AsyncSettlePromises(promise) {
	    this._normalQueue._pushOne(promise);
	    this._queueTick();
	}
	
	if (!util.hasDevTools) {
	    Async.prototype.invokeLater = AsyncInvokeLater;
	    Async.prototype.invoke = AsyncInvoke;
	    Async.prototype.settlePromises = AsyncSettlePromises;
	} else {
	    Async.prototype.invokeLater = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvokeLater.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function() {
	                setTimeout(function() {
	                    fn.call(receiver, arg);
	                }, 100);
	            });
	        }
	    };
	
	    Async.prototype.invoke = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvoke.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function() {
	                fn.call(receiver, arg);
	            });
	        }
	    };
	
	    Async.prototype.settlePromises = function(promise) {
	        if (this._trampolineEnabled) {
	            AsyncSettlePromises.call(this, promise);
	        } else {
	            this._schedule(function() {
	                promise._settlePromises();
	            });
	        }
	    };
	}
	
	Async.prototype.invokeFirst = function (fn, receiver, arg) {
	    this._normalQueue.unshift(fn, receiver, arg);
	    this._queueTick();
	};
	
	Async.prototype._drainQueue = function(queue) {
	    while (queue.length() > 0) {
	        var fn = queue.shift();
	        if (typeof fn !== "function") {
	            fn._settlePromises();
	            continue;
	        }
	        var receiver = queue.shift();
	        var arg = queue.shift();
	        fn.call(receiver, arg);
	    }
	};
	
	Async.prototype._drainQueues = function () {
	    this._drainQueue(this._normalQueue);
	    this._reset();
	    this._haveDrainedQueues = true;
	    this._drainQueue(this._lateQueue);
	};
	
	Async.prototype._queueTick = function () {
	    if (!this._isTickUsed) {
	        this._isTickUsed = true;
	        this._schedule(this.drainQueues);
	    }
	};
	
	Async.prototype._reset = function () {
	    this._isTickUsed = false;
	};
	
	module.exports = Async;
	module.exports.firstLineError = firstLineError;
	
	},{"./queue":26,"./schedule":29,"./util":36}],3:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
	var calledBind = false;
	var rejectThis = function(_, e) {
	    this._reject(e);
	};
	
	var targetRejected = function(e, context) {
	    context.promiseRejectionQueued = true;
	    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
	};
	
	var bindingResolved = function(thisArg, context) {
	    if (((this._bitField & 50397184) === 0)) {
	        this._resolveCallback(context.target);
	    }
	};
	
	var bindingRejected = function(e, context) {
	    if (!context.promiseRejectionQueued) this._reject(e);
	};
	
	Promise.prototype.bind = function (thisArg) {
	    if (!calledBind) {
	        calledBind = true;
	        Promise.prototype._propagateFrom = debug.propagateFromFunction();
	        Promise.prototype._boundValue = debug.boundValueFunction();
	    }
	    var maybePromise = tryConvertToPromise(thisArg);
	    var ret = new Promise(INTERNAL);
	    ret._propagateFrom(this, 1);
	    var target = this._target();
	    ret._setBoundTo(maybePromise);
	    if (maybePromise instanceof Promise) {
	        var context = {
	            promiseRejectionQueued: false,
	            promise: ret,
	            target: target,
	            bindingPromise: maybePromise
	        };
	        target._then(INTERNAL, targetRejected, undefined, ret, context);
	        maybePromise._then(
	            bindingResolved, bindingRejected, undefined, ret, context);
	        ret._setOnCancel(maybePromise);
	    } else {
	        ret._resolveCallback(target);
	    }
	    return ret;
	};
	
	Promise.prototype._setBoundTo = function (obj) {
	    if (obj !== undefined) {
	        this._bitField = this._bitField | 2097152;
	        this._boundTo = obj;
	    } else {
	        this._bitField = this._bitField & (~2097152);
	    }
	};
	
	Promise.prototype._isBound = function () {
	    return (this._bitField & 2097152) === 2097152;
	};
	
	Promise.bind = function (thisArg, value) {
	    return Promise.resolve(value).bind(thisArg);
	};
	};
	
	},{}],4:[function(_dereq_,module,exports){
	"use strict";
	var old;
	if (typeof Promise !== "undefined") old = Promise;
	function noConflict() {
	    try { if (Promise === bluebird) Promise = old; }
	    catch (e) {}
	    return bluebird;
	}
	var bluebird = _dereq_("./promise")();
	bluebird.noConflict = noConflict;
	module.exports = bluebird;
	
	},{"./promise":22}],5:[function(_dereq_,module,exports){
	"use strict";
	var cr = Object.create;
	if (cr) {
	    var callerCache = cr(null);
	    var getterCache = cr(null);
	    callerCache[" size"] = getterCache[" size"] = 0;
	}
	
	module.exports = function(Promise) {
	var util = _dereq_("./util");
	var canEvaluate = util.canEvaluate;
	var isIdentifier = util.isIdentifier;
	
	var getMethodCaller;
	var getGetter;
	if (false) {
	var makeMethodCaller = function (methodName) {
	    return new Function("ensureMethod", "                                    \n\
	        return function(obj) {                                               \n\
	            'use strict'                                                     \n\
	            var len = this.length;                                           \n\
	            ensureMethod(obj, 'methodName');                                 \n\
	            switch(len) {                                                    \n\
	                case 1: return obj.methodName(this[0]);                      \n\
	                case 2: return obj.methodName(this[0], this[1]);             \n\
	                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
	                case 0: return obj.methodName();                             \n\
	                default:                                                     \n\
	                    return obj.methodName.apply(obj, this);                  \n\
	            }                                                                \n\
	        };                                                                   \n\
	        ".replace(/methodName/g, methodName))(ensureMethod);
	};
	
	var makeGetter = function (propertyName) {
	    return new Function("obj", "                                             \n\
	        'use strict';                                                        \n\
	        return obj.propertyName;                                             \n\
	        ".replace("propertyName", propertyName));
	};
	
	var getCompiled = function(name, compiler, cache) {
	    var ret = cache[name];
	    if (typeof ret !== "function") {
	        if (!isIdentifier(name)) {
	            return null;
	        }
	        ret = compiler(name);
	        cache[name] = ret;
	        cache[" size"]++;
	        if (cache[" size"] > 512) {
	            var keys = Object.keys(cache);
	            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
	            cache[" size"] = keys.length - 256;
	        }
	    }
	    return ret;
	};
	
	getMethodCaller = function(name) {
	    return getCompiled(name, makeMethodCaller, callerCache);
	};
	
	getGetter = function(name) {
	    return getCompiled(name, makeGetter, getterCache);
	};
	}
	
	function ensureMethod(obj, methodName) {
	    var fn;
	    if (obj != null) fn = obj[methodName];
	    if (typeof fn !== "function") {
	        var message = "Object " + util.classString(obj) + " has no method '" +
	            util.toString(methodName) + "'";
	        throw new Promise.TypeError(message);
	    }
	    return fn;
	}
	
	function caller(obj) {
	    var methodName = this.pop();
	    var fn = ensureMethod(obj, methodName);
	    return fn.apply(obj, this);
	}
	Promise.prototype.call = function (methodName) {
	    var args = [].slice.call(arguments, 1);;
	    if (false) {
	        if (canEvaluate) {
	            var maybeCaller = getMethodCaller(methodName);
	            if (maybeCaller !== null) {
	                return this._then(
	                    maybeCaller, undefined, undefined, args, undefined);
	            }
	        }
	    }
	    args.push(methodName);
	    return this._then(caller, undefined, undefined, args, undefined);
	};
	
	function namedGetter(obj) {
	    return obj[this];
	}
	function indexedGetter(obj) {
	    var index = +this;
	    if (index < 0) index = Math.max(0, index + obj.length);
	    return obj[index];
	}
	Promise.prototype.get = function (propertyName) {
	    var isIndex = (typeof propertyName === "number");
	    var getter;
	    if (!isIndex) {
	        if (canEvaluate) {
	            var maybeGetter = getGetter(propertyName);
	            getter = maybeGetter !== null ? maybeGetter : namedGetter;
	        } else {
	            getter = namedGetter;
	        }
	    } else {
	        getter = indexedGetter;
	    }
	    return this._then(getter, undefined, undefined, propertyName, undefined);
	};
	};
	
	},{"./util":36}],6:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, PromiseArray, apiRejection, debug) {
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var async = Promise._async;
	
	Promise.prototype["break"] = Promise.prototype.cancel = function() {
	    if (!debug.cancellation()) return this._warn("cancellation is disabled");
	
	    var promise = this;
	    var child = promise;
	    while (promise._isCancellable()) {
	        if (!promise._cancelBy(child)) {
	            if (child._isFollowing()) {
	                child._followee().cancel();
	            } else {
	                child._cancelBranched();
	            }
	            break;
	        }
	
	        var parent = promise._cancellationParent;
	        if (parent == null || !parent._isCancellable()) {
	            if (promise._isFollowing()) {
	                promise._followee().cancel();
	            } else {
	                promise._cancelBranched();
	            }
	            break;
	        } else {
	            if (promise._isFollowing()) promise._followee().cancel();
	            promise._setWillBeCancelled();
	            child = promise;
	            promise = parent;
	        }
	    }
	};
	
	Promise.prototype._branchHasCancelled = function() {
	    this._branchesRemainingToCancel--;
	};
	
	Promise.prototype._enoughBranchesHaveCancelled = function() {
	    return this._branchesRemainingToCancel === undefined ||
	           this._branchesRemainingToCancel <= 0;
	};
	
	Promise.prototype._cancelBy = function(canceller) {
	    if (canceller === this) {
	        this._branchesRemainingToCancel = 0;
	        this._invokeOnCancel();
	        return true;
	    } else {
	        this._branchHasCancelled();
	        if (this._enoughBranchesHaveCancelled()) {
	            this._invokeOnCancel();
	            return true;
	        }
	    }
	    return false;
	};
	
	Promise.prototype._cancelBranched = function() {
	    if (this._enoughBranchesHaveCancelled()) {
	        this._cancel();
	    }
	};
	
	Promise.prototype._cancel = function() {
	    if (!this._isCancellable()) return;
	    this._setCancelled();
	    async.invoke(this._cancelPromises, this, undefined);
	};
	
	Promise.prototype._cancelPromises = function() {
	    if (this._length() > 0) this._settlePromises();
	};
	
	Promise.prototype._unsetOnCancel = function() {
	    this._onCancelField = undefined;
	};
	
	Promise.prototype._isCancellable = function() {
	    return this.isPending() && !this._isCancelled();
	};
	
	Promise.prototype.isCancellable = function() {
	    return this.isPending() && !this.isCancelled();
	};
	
	Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
	    if (util.isArray(onCancelCallback)) {
	        for (var i = 0; i < onCancelCallback.length; ++i) {
	            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
	        }
	    } else if (onCancelCallback !== undefined) {
	        if (typeof onCancelCallback === "function") {
	            if (!internalOnly) {
	                var e = tryCatch(onCancelCallback).call(this._boundValue());
	                if (e === errorObj) {
	                    this._attachExtraTrace(e.e);
	                    async.throwLater(e.e);
	                }
	            }
	        } else {
	            onCancelCallback._resultCancelled(this);
	        }
	    }
	};
	
	Promise.prototype._invokeOnCancel = function() {
	    var onCancelCallback = this._onCancel();
	    this._unsetOnCancel();
	    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
	};
	
	Promise.prototype._invokeInternalOnCancel = function() {
	    if (this._isCancellable()) {
	        this._doInvokeOnCancel(this._onCancel(), true);
	        this._unsetOnCancel();
	    }
	};
	
	Promise.prototype._resultCancelled = function() {
	    this.cancel();
	};
	
	};
	
	},{"./util":36}],7:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(NEXT_FILTER) {
	var util = _dereq_("./util");
	var getKeys = _dereq_("./es5").keys;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	
	function catchFilter(instances, cb, promise) {
	    return function(e) {
	        var boundTo = promise._boundValue();
	        predicateLoop: for (var i = 0; i < instances.length; ++i) {
	            var item = instances[i];
	
	            if (item === Error ||
	                (item != null && item.prototype instanceof Error)) {
	                if (e instanceof item) {
	                    return tryCatch(cb).call(boundTo, e);
	                }
	            } else if (typeof item === "function") {
	                var matchesPredicate = tryCatch(item).call(boundTo, e);
	                if (matchesPredicate === errorObj) {
	                    return matchesPredicate;
	                } else if (matchesPredicate) {
	                    return tryCatch(cb).call(boundTo, e);
	                }
	            } else if (util.isObject(e)) {
	                var keys = getKeys(item);
	                for (var j = 0; j < keys.length; ++j) {
	                    var key = keys[j];
	                    if (item[key] != e[key]) {
	                        continue predicateLoop;
	                    }
	                }
	                return tryCatch(cb).call(boundTo, e);
	            }
	        }
	        return NEXT_FILTER;
	    };
	}
	
	return catchFilter;
	};
	
	},{"./es5":13,"./util":36}],8:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var longStackTraces = false;
	var contextStack = [];
	
	Promise.prototype._promiseCreated = function() {};
	Promise.prototype._pushContext = function() {};
	Promise.prototype._popContext = function() {return null;};
	Promise._peekContext = Promise.prototype._peekContext = function() {};
	
	function Context() {
	    this._trace = new Context.CapturedTrace(peekContext());
	}
	Context.prototype._pushContext = function () {
	    if (this._trace !== undefined) {
	        this._trace._promiseCreated = null;
	        contextStack.push(this._trace);
	    }
	};
	
	Context.prototype._popContext = function () {
	    if (this._trace !== undefined) {
	        var trace = contextStack.pop();
	        var ret = trace._promiseCreated;
	        trace._promiseCreated = null;
	        return ret;
	    }
	    return null;
	};
	
	function createContext() {
	    if (longStackTraces) return new Context();
	}
	
	function peekContext() {
	    var lastIndex = contextStack.length - 1;
	    if (lastIndex >= 0) {
	        return contextStack[lastIndex];
	    }
	    return undefined;
	}
	Context.CapturedTrace = null;
	Context.create = createContext;
	Context.deactivateLongStackTraces = function() {};
	Context.activateLongStackTraces = function() {
	    var Promise_pushContext = Promise.prototype._pushContext;
	    var Promise_popContext = Promise.prototype._popContext;
	    var Promise_PeekContext = Promise._peekContext;
	    var Promise_peekContext = Promise.prototype._peekContext;
	    var Promise_promiseCreated = Promise.prototype._promiseCreated;
	    Context.deactivateLongStackTraces = function() {
	        Promise.prototype._pushContext = Promise_pushContext;
	        Promise.prototype._popContext = Promise_popContext;
	        Promise._peekContext = Promise_PeekContext;
	        Promise.prototype._peekContext = Promise_peekContext;
	        Promise.prototype._promiseCreated = Promise_promiseCreated;
	        longStackTraces = false;
	    };
	    longStackTraces = true;
	    Promise.prototype._pushContext = Context.prototype._pushContext;
	    Promise.prototype._popContext = Context.prototype._popContext;
	    Promise._peekContext = Promise.prototype._peekContext = peekContext;
	    Promise.prototype._promiseCreated = function() {
	        var ctx = this._peekContext();
	        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
	    };
	};
	return Context;
	};
	
	},{}],9:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, Context) {
	var getDomain = Promise._getDomain;
	var async = Promise._async;
	var Warning = _dereq_("./errors").Warning;
	var util = _dereq_("./util");
	var canAttachTrace = util.canAttachTrace;
	var unhandledRejectionHandled;
	var possiblyUnhandledRejection;
	var bluebirdFramePattern =
	    /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
	var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
	var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
	var stackFramePattern = null;
	var formatStack = null;
	var indentStackFrames = false;
	var printWarning;
	var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
	                        (true ||
	                         util.env("BLUEBIRD_DEBUG") ||
	                         util.env("NODE_ENV") === "development"));
	
	var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
	    (debugging || util.env("BLUEBIRD_WARNINGS")));
	
	var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
	    (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));
	
	var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
	    (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
	
	Promise.prototype.suppressUnhandledRejections = function() {
	    var target = this._target();
	    target._bitField = ((target._bitField & (~1048576)) |
	                      524288);
	};
	
	Promise.prototype._ensurePossibleRejectionHandled = function () {
	    if ((this._bitField & 524288) !== 0) return;
	    this._setRejectionIsUnhandled();
	    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
	};
	
	Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
	    fireRejectionEvent("rejectionHandled",
	                                  unhandledRejectionHandled, undefined, this);
	};
	
	Promise.prototype._setReturnedNonUndefined = function() {
	    this._bitField = this._bitField | 268435456;
	};
	
	Promise.prototype._returnedNonUndefined = function() {
	    return (this._bitField & 268435456) !== 0;
	};
	
	Promise.prototype._notifyUnhandledRejection = function () {
	    if (this._isRejectionUnhandled()) {
	        var reason = this._settledValue();
	        this._setUnhandledRejectionIsNotified();
	        fireRejectionEvent("unhandledRejection",
	                                      possiblyUnhandledRejection, reason, this);
	    }
	};
	
	Promise.prototype._setUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField | 262144;
	};
	
	Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField & (~262144);
	};
	
	Promise.prototype._isUnhandledRejectionNotified = function () {
	    return (this._bitField & 262144) > 0;
	};
	
	Promise.prototype._setRejectionIsUnhandled = function () {
	    this._bitField = this._bitField | 1048576;
	};
	
	Promise.prototype._unsetRejectionIsUnhandled = function () {
	    this._bitField = this._bitField & (~1048576);
	    if (this._isUnhandledRejectionNotified()) {
	        this._unsetUnhandledRejectionIsNotified();
	        this._notifyUnhandledRejectionIsHandled();
	    }
	};
	
	Promise.prototype._isRejectionUnhandled = function () {
	    return (this._bitField & 1048576) > 0;
	};
	
	Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
	    return warn(message, shouldUseOwnTrace, promise || this);
	};
	
	Promise.onPossiblyUnhandledRejection = function (fn) {
	    var domain = getDomain();
	    possiblyUnhandledRejection =
	        typeof fn === "function" ? (domain === null ?
	                                            fn : util.domainBind(domain, fn))
	                                 : undefined;
	};
	
	Promise.onUnhandledRejectionHandled = function (fn) {
	    var domain = getDomain();
	    unhandledRejectionHandled =
	        typeof fn === "function" ? (domain === null ?
	                                            fn : util.domainBind(domain, fn))
	                                 : undefined;
	};
	
	var disableLongStackTraces = function() {};
	Promise.longStackTraces = function () {
	    if (async.haveItemsQueued() && !config.longStackTraces) {
	        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    if (!config.longStackTraces && longStackTracesIsSupported()) {
	        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
	        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
	        config.longStackTraces = true;
	        disableLongStackTraces = function() {
	            if (async.haveItemsQueued() && !config.longStackTraces) {
	                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	            }
	            Promise.prototype._captureStackTrace = Promise_captureStackTrace;
	            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
	            Context.deactivateLongStackTraces();
	            async.enableTrampoline();
	            config.longStackTraces = false;
	        };
	        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
	        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
	        Context.activateLongStackTraces();
	        async.disableTrampolineIfNecessary();
	    }
	};
	
	Promise.hasLongStackTraces = function () {
	    return config.longStackTraces && longStackTracesIsSupported();
	};
	
	var fireDomEvent = (function() {
	    try {
	        if (typeof CustomEvent === "function") {
	            var event = new CustomEvent("CustomEvent");
	            util.global.dispatchEvent(event);
	            return function(name, event) {
	                var domEvent = new CustomEvent(name.toLowerCase(), {
	                    detail: event,
	                    cancelable: true
	                });
	                return !util.global.dispatchEvent(domEvent);
	            };
	        } else if (typeof Event === "function") {
	            var event = new Event("CustomEvent");
	            util.global.dispatchEvent(event);
	            return function(name, event) {
	                var domEvent = new Event(name.toLowerCase(), {
	                    cancelable: true
	                });
	                domEvent.detail = event;
	                return !util.global.dispatchEvent(domEvent);
	            };
	        } else {
	            var event = document.createEvent("CustomEvent");
	            event.initCustomEvent("testingtheevent", false, true, {});
	            util.global.dispatchEvent(event);
	            return function(name, event) {
	                var domEvent = document.createEvent("CustomEvent");
	                domEvent.initCustomEvent(name.toLowerCase(), false, true,
	                    event);
	                return !util.global.dispatchEvent(domEvent);
	            };
	        }
	    } catch (e) {}
	    return function() {
	        return false;
	    };
	})();
	
	var fireGlobalEvent = (function() {
	    if (util.isNode) {
	        return function() {
	            return process.emit.apply(process, arguments);
	        };
	    } else {
	        if (!util.global) {
	            return function() {
	                return false;
	            };
	        }
	        return function(name) {
	            var methodName = "on" + name.toLowerCase();
	            var method = util.global[methodName];
	            if (!method) return false;
	            method.apply(util.global, [].slice.call(arguments, 1));
	            return true;
	        };
	    }
	})();
	
	function generatePromiseLifecycleEventObject(name, promise) {
	    return {promise: promise};
	}
	
	var eventToObjectGenerator = {
	    promiseCreated: generatePromiseLifecycleEventObject,
	    promiseFulfilled: generatePromiseLifecycleEventObject,
	    promiseRejected: generatePromiseLifecycleEventObject,
	    promiseResolved: generatePromiseLifecycleEventObject,
	    promiseCancelled: generatePromiseLifecycleEventObject,
	    promiseChained: function(name, promise, child) {
	        return {promise: promise, child: child};
	    },
	    warning: function(name, warning) {
	        return {warning: warning};
	    },
	    unhandledRejection: function (name, reason, promise) {
	        return {reason: reason, promise: promise};
	    },
	    rejectionHandled: generatePromiseLifecycleEventObject
	};
	
	var activeFireEvent = function (name) {
	    var globalEventFired = false;
	    try {
	        globalEventFired = fireGlobalEvent.apply(null, arguments);
	    } catch (e) {
	        async.throwLater(e);
	        globalEventFired = true;
	    }
	
	    var domEventFired = false;
	    try {
	        domEventFired = fireDomEvent(name,
	                    eventToObjectGenerator[name].apply(null, arguments));
	    } catch (e) {
	        async.throwLater(e);
	        domEventFired = true;
	    }
	
	    return domEventFired || globalEventFired;
	};
	
	Promise.config = function(opts) {
	    opts = Object(opts);
	    if ("longStackTraces" in opts) {
	        if (opts.longStackTraces) {
	            Promise.longStackTraces();
	        } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
	            disableLongStackTraces();
	        }
	    }
	    if ("warnings" in opts) {
	        var warningsOption = opts.warnings;
	        config.warnings = !!warningsOption;
	        wForgottenReturn = config.warnings;
	
	        if (util.isObject(warningsOption)) {
	            if ("wForgottenReturn" in warningsOption) {
	                wForgottenReturn = !!warningsOption.wForgottenReturn;
	            }
	        }
	    }
	    if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
	        if (async.haveItemsQueued()) {
	            throw new Error(
	                "cannot enable cancellation after promises are in use");
	        }
	        Promise.prototype._clearCancellationData =
	            cancellationClearCancellationData;
	        Promise.prototype._propagateFrom = cancellationPropagateFrom;
	        Promise.prototype._onCancel = cancellationOnCancel;
	        Promise.prototype._setOnCancel = cancellationSetOnCancel;
	        Promise.prototype._attachCancellationCallback =
	            cancellationAttachCancellationCallback;
	        Promise.prototype._execute = cancellationExecute;
	        propagateFromFunction = cancellationPropagateFrom;
	        config.cancellation = true;
	    }
	    if ("monitoring" in opts) {
	        if (opts.monitoring && !config.monitoring) {
	            config.monitoring = true;
	            Promise.prototype._fireEvent = activeFireEvent;
	        } else if (!opts.monitoring && config.monitoring) {
	            config.monitoring = false;
	            Promise.prototype._fireEvent = defaultFireEvent;
	        }
	    }
	};
	
	function defaultFireEvent() { return false; }
	
	Promise.prototype._fireEvent = defaultFireEvent;
	Promise.prototype._execute = function(executor, resolve, reject) {
	    try {
	        executor(resolve, reject);
	    } catch (e) {
	        return e;
	    }
	};
	Promise.prototype._onCancel = function () {};
	Promise.prototype._setOnCancel = function (handler) { ; };
	Promise.prototype._attachCancellationCallback = function(onCancel) {
	    ;
	};
	Promise.prototype._captureStackTrace = function () {};
	Promise.prototype._attachExtraTrace = function () {};
	Promise.prototype._clearCancellationData = function() {};
	Promise.prototype._propagateFrom = function (parent, flags) {
	    ;
	    ;
	};
	
	function cancellationExecute(executor, resolve, reject) {
	    var promise = this;
	    try {
	        executor(resolve, reject, function(onCancel) {
	            if (typeof onCancel !== "function") {
	                throw new TypeError("onCancel must be a function, got: " +
	                                    util.toString(onCancel));
	            }
	            promise._attachCancellationCallback(onCancel);
	        });
	    } catch (e) {
	        return e;
	    }
	}
	
	function cancellationAttachCancellationCallback(onCancel) {
	    if (!this._isCancellable()) return this;
	
	    var previousOnCancel = this._onCancel();
	    if (previousOnCancel !== undefined) {
	        if (util.isArray(previousOnCancel)) {
	            previousOnCancel.push(onCancel);
	        } else {
	            this._setOnCancel([previousOnCancel, onCancel]);
	        }
	    } else {
	        this._setOnCancel(onCancel);
	    }
	}
	
	function cancellationOnCancel() {
	    return this._onCancelField;
	}
	
	function cancellationSetOnCancel(onCancel) {
	    this._onCancelField = onCancel;
	}
	
	function cancellationClearCancellationData() {
	    this._cancellationParent = undefined;
	    this._onCancelField = undefined;
	}
	
	function cancellationPropagateFrom(parent, flags) {
	    if ((flags & 1) !== 0) {
	        this._cancellationParent = parent;
	        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
	        if (branchesRemainingToCancel === undefined) {
	            branchesRemainingToCancel = 0;
	        }
	        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
	    }
	    if ((flags & 2) !== 0 && parent._isBound()) {
	        this._setBoundTo(parent._boundTo);
	    }
	}
	
	function bindingPropagateFrom(parent, flags) {
	    if ((flags & 2) !== 0 && parent._isBound()) {
	        this._setBoundTo(parent._boundTo);
	    }
	}
	var propagateFromFunction = bindingPropagateFrom;
	
	function boundValueFunction() {
	    var ret = this._boundTo;
	    if (ret !== undefined) {
	        if (ret instanceof Promise) {
	            if (ret.isFulfilled()) {
	                return ret.value();
	            } else {
	                return undefined;
	            }
	        }
	    }
	    return ret;
	}
	
	function longStackTracesCaptureStackTrace() {
	    this._trace = new CapturedTrace(this._peekContext());
	}
	
	function longStackTracesAttachExtraTrace(error, ignoreSelf) {
	    if (canAttachTrace(error)) {
	        var trace = this._trace;
	        if (trace !== undefined) {
	            if (ignoreSelf) trace = trace._parent;
	        }
	        if (trace !== undefined) {
	            trace.attachExtraTrace(error);
	        } else if (!error.__stackCleaned__) {
	            var parsed = parseStackAndMessage(error);
	            util.notEnumerableProp(error, "stack",
	                parsed.message + "\n" + parsed.stack.join("\n"));
	            util.notEnumerableProp(error, "__stackCleaned__", true);
	        }
	    }
	}
	
	function checkForgottenReturns(returnValue, promiseCreated, name, promise,
	                               parent) {
	    if (returnValue === undefined && promiseCreated !== null &&
	        wForgottenReturn) {
	        if (parent !== undefined && parent._returnedNonUndefined()) return;
	        if ((promise._bitField & 65535) === 0) return;
	
	        if (name) name = name + " ";
	        var handlerLine = "";
	        var creatorLine = "";
	        if (promiseCreated._trace) {
	            var traceLines = promiseCreated._trace.stack.split("\n");
	            var stack = cleanStack(traceLines);
	            for (var i = stack.length - 1; i >= 0; --i) {
	                var line = stack[i];
	                if (!nodeFramePattern.test(line)) {
	                    var lineMatches = line.match(parseLinePattern);
	                    if (lineMatches) {
	                        handlerLine  = "at " + lineMatches[1] +
	                            ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
	                    }
	                    break;
	                }
	            }
	
	            if (stack.length > 0) {
	                var firstUserLine = stack[0];
	                for (var i = 0; i < traceLines.length; ++i) {
	
	                    if (traceLines[i] === firstUserLine) {
	                        if (i > 0) {
	                            creatorLine = "\n" + traceLines[i - 1];
	                        }
	                        break;
	                    }
	                }
	
	            }
	        }
	        var msg = "a promise was created in a " + name +
	            "handler " + handlerLine + "but was not returned from it, " +
	            "see http://goo.gl/rRqMUw" +
	            creatorLine;
	        promise._warn(msg, true, promiseCreated);
	    }
	}
	
	function deprecated(name, replacement) {
	    var message = name +
	        " is deprecated and will be removed in a future version.";
	    if (replacement) message += " Use " + replacement + " instead.";
	    return warn(message);
	}
	
	function warn(message, shouldUseOwnTrace, promise) {
	    if (!config.warnings) return;
	    var warning = new Warning(message);
	    var ctx;
	    if (shouldUseOwnTrace) {
	        promise._attachExtraTrace(warning);
	    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
	        ctx.attachExtraTrace(warning);
	    } else {
	        var parsed = parseStackAndMessage(warning);
	        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
	    }
	
	    if (!activeFireEvent("warning", warning)) {
	        formatAndLogError(warning, "", true);
	    }
	}
	
	function reconstructStack(message, stacks) {
	    for (var i = 0; i < stacks.length - 1; ++i) {
	        stacks[i].push("From previous event:");
	        stacks[i] = stacks[i].join("\n");
	    }
	    if (i < stacks.length) {
	        stacks[i] = stacks[i].join("\n");
	    }
	    return message + "\n" + stacks.join("\n");
	}
	
	function removeDuplicateOrEmptyJumps(stacks) {
	    for (var i = 0; i < stacks.length; ++i) {
	        if (stacks[i].length === 0 ||
	            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
	            stacks.splice(i, 1);
	            i--;
	        }
	    }
	}
	
	function removeCommonRoots(stacks) {
	    var current = stacks[0];
	    for (var i = 1; i < stacks.length; ++i) {
	        var prev = stacks[i];
	        var currentLastIndex = current.length - 1;
	        var currentLastLine = current[currentLastIndex];
	        var commonRootMeetPoint = -1;
	
	        for (var j = prev.length - 1; j >= 0; --j) {
	            if (prev[j] === currentLastLine) {
	                commonRootMeetPoint = j;
	                break;
	            }
	        }
	
	        for (var j = commonRootMeetPoint; j >= 0; --j) {
	            var line = prev[j];
	            if (current[currentLastIndex] === line) {
	                current.pop();
	                currentLastIndex--;
	            } else {
	                break;
	            }
	        }
	        current = prev;
	    }
	}
	
	function cleanStack(stack) {
	    var ret = [];
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        var isTraceLine = "    (No stack trace)" === line ||
	            stackFramePattern.test(line);
	        var isInternalFrame = isTraceLine && shouldIgnore(line);
	        if (isTraceLine && !isInternalFrame) {
	            if (indentStackFrames && line.charAt(0) !== " ") {
	                line = "    " + line;
	            }
	            ret.push(line);
	        }
	    }
	    return ret;
	}
	
	function stackFramesAsArray(error) {
	    var stack = error.stack.replace(/\s+$/g, "").split("\n");
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
	            break;
	        }
	    }
	    if (i > 0) {
	        stack = stack.slice(i);
	    }
	    return stack;
	}
	
	function parseStackAndMessage(error) {
	    var stack = error.stack;
	    var message = error.toString();
	    stack = typeof stack === "string" && stack.length > 0
	                ? stackFramesAsArray(error) : ["    (No stack trace)"];
	    return {
	        message: message,
	        stack: cleanStack(stack)
	    };
	}
	
	function formatAndLogError(error, title, isSoft) {
	    if (typeof console !== "undefined") {
	        var message;
	        if (util.isObject(error)) {
	            var stack = error.stack;
	            message = title + formatStack(stack, error);
	        } else {
	            message = title + String(error);
	        }
	        if (typeof printWarning === "function") {
	            printWarning(message, isSoft);
	        } else if (typeof console.log === "function" ||
	            typeof console.log === "object") {
	            console.log(message);
	        }
	    }
	}
	
	function fireRejectionEvent(name, localHandler, reason, promise) {
	    var localEventFired = false;
	    try {
	        if (typeof localHandler === "function") {
	            localEventFired = true;
	            if (name === "rejectionHandled") {
	                localHandler(promise);
	            } else {
	                localHandler(reason, promise);
	            }
	        }
	    } catch (e) {
	        async.throwLater(e);
	    }
	
	    if (name === "unhandledRejection") {
	        if (!activeFireEvent(name, reason, promise) && !localEventFired) {
	            formatAndLogError(reason, "Unhandled rejection ");
	        }
	    } else {
	        activeFireEvent(name, promise);
	    }
	}
	
	function formatNonError(obj) {
	    var str;
	    if (typeof obj === "function") {
	        str = "[function " +
	            (obj.name || "anonymous") +
	            "]";
	    } else {
	        str = obj && typeof obj.toString === "function"
	            ? obj.toString() : util.toString(obj);
	        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	        if (ruselessToString.test(str)) {
	            try {
	                var newStr = JSON.stringify(obj);
	                str = newStr;
	            }
	            catch(e) {
	
	            }
	        }
	        if (str.length === 0) {
	            str = "(empty array)";
	        }
	    }
	    return ("(<" + snip(str) + ">, no stack trace)");
	}
	
	function snip(str) {
	    var maxChars = 41;
	    if (str.length < maxChars) {
	        return str;
	    }
	    return str.substr(0, maxChars - 3) + "...";
	}
	
	function longStackTracesIsSupported() {
	    return typeof captureStackTrace === "function";
	}
	
	var shouldIgnore = function() { return false; };
	var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
	function parseLineInfo(line) {
	    var matches = line.match(parseLineInfoRegex);
	    if (matches) {
	        return {
	            fileName: matches[1],
	            line: parseInt(matches[2], 10)
	        };
	    }
	}
	
	function setBounds(firstLineError, lastLineError) {
	    if (!longStackTracesIsSupported()) return;
	    var firstStackLines = firstLineError.stack.split("\n");
	    var lastStackLines = lastLineError.stack.split("\n");
	    var firstIndex = -1;
	    var lastIndex = -1;
	    var firstFileName;
	    var lastFileName;
	    for (var i = 0; i < firstStackLines.length; ++i) {
	        var result = parseLineInfo(firstStackLines[i]);
	        if (result) {
	            firstFileName = result.fileName;
	            firstIndex = result.line;
	            break;
	        }
	    }
	    for (var i = 0; i < lastStackLines.length; ++i) {
	        var result = parseLineInfo(lastStackLines[i]);
	        if (result) {
	            lastFileName = result.fileName;
	            lastIndex = result.line;
	            break;
	        }
	    }
	    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
	        firstFileName !== lastFileName || firstIndex >= lastIndex) {
	        return;
	    }
	
	    shouldIgnore = function(line) {
	        if (bluebirdFramePattern.test(line)) return true;
	        var info = parseLineInfo(line);
	        if (info) {
	            if (info.fileName === firstFileName &&
	                (firstIndex <= info.line && info.line <= lastIndex)) {
	                return true;
	            }
	        }
	        return false;
	    };
	}
	
	function CapturedTrace(parent) {
	    this._parent = parent;
	    this._promisesCreated = 0;
	    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
	    captureStackTrace(this, CapturedTrace);
	    if (length > 32) this.uncycle();
	}
	util.inherits(CapturedTrace, Error);
	Context.CapturedTrace = CapturedTrace;
	
	CapturedTrace.prototype.uncycle = function() {
	    var length = this._length;
	    if (length < 2) return;
	    var nodes = [];
	    var stackToIndex = {};
	
	    for (var i = 0, node = this; node !== undefined; ++i) {
	        nodes.push(node);
	        node = node._parent;
	    }
	    length = this._length = i;
	    for (var i = length - 1; i >= 0; --i) {
	        var stack = nodes[i].stack;
	        if (stackToIndex[stack] === undefined) {
	            stackToIndex[stack] = i;
	        }
	    }
	    for (var i = 0; i < length; ++i) {
	        var currentStack = nodes[i].stack;
	        var index = stackToIndex[currentStack];
	        if (index !== undefined && index !== i) {
	            if (index > 0) {
	                nodes[index - 1]._parent = undefined;
	                nodes[index - 1]._length = 1;
	            }
	            nodes[i]._parent = undefined;
	            nodes[i]._length = 1;
	            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
	
	            if (index < length - 1) {
	                cycleEdgeNode._parent = nodes[index + 1];
	                cycleEdgeNode._parent.uncycle();
	                cycleEdgeNode._length =
	                    cycleEdgeNode._parent._length + 1;
	            } else {
	                cycleEdgeNode._parent = undefined;
	                cycleEdgeNode._length = 1;
	            }
	            var currentChildLength = cycleEdgeNode._length + 1;
	            for (var j = i - 2; j >= 0; --j) {
	                nodes[j]._length = currentChildLength;
	                currentChildLength++;
	            }
	            return;
	        }
	    }
	};
	
	CapturedTrace.prototype.attachExtraTrace = function(error) {
	    if (error.__stackCleaned__) return;
	    this.uncycle();
	    var parsed = parseStackAndMessage(error);
	    var message = parsed.message;
	    var stacks = [parsed.stack];
	
	    var trace = this;
	    while (trace !== undefined) {
	        stacks.push(cleanStack(trace.stack.split("\n")));
	        trace = trace._parent;
	    }
	    removeCommonRoots(stacks);
	    removeDuplicateOrEmptyJumps(stacks);
	    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
	    util.notEnumerableProp(error, "__stackCleaned__", true);
	};
	
	var captureStackTrace = (function stackDetection() {
	    var v8stackFramePattern = /^\s*at\s*/;
	    var v8stackFormatter = function(stack, error) {
	        if (typeof stack === "string") return stack;
	
	        if (error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };
	
	    if (typeof Error.stackTraceLimit === "number" &&
	        typeof Error.captureStackTrace === "function") {
	        Error.stackTraceLimit += 6;
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        var captureStackTrace = Error.captureStackTrace;
	
	        shouldIgnore = function(line) {
	            return bluebirdFramePattern.test(line);
	        };
	        return function(receiver, ignoreUntil) {
	            Error.stackTraceLimit += 6;
	            captureStackTrace(receiver, ignoreUntil);
	            Error.stackTraceLimit -= 6;
	        };
	    }
	    var err = new Error();
	
	    if (typeof err.stack === "string" &&
	        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
	        stackFramePattern = /@/;
	        formatStack = v8stackFormatter;
	        indentStackFrames = true;
	        return function captureStackTrace(o) {
	            o.stack = new Error().stack;
	        };
	    }
	
	    var hasStackAfterThrow;
	    try { throw new Error(); }
	    catch(e) {
	        hasStackAfterThrow = ("stack" in e);
	    }
	    if (!("stack" in err) && hasStackAfterThrow &&
	        typeof Error.stackTraceLimit === "number") {
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        return function captureStackTrace(o) {
	            Error.stackTraceLimit += 6;
	            try { throw new Error(); }
	            catch(e) { o.stack = e.stack; }
	            Error.stackTraceLimit -= 6;
	        };
	    }
	
	    formatStack = function(stack, error) {
	        if (typeof stack === "string") return stack;
	
	        if ((typeof error === "object" ||
	            typeof error === "function") &&
	            error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };
	
	    return null;
	
	})([]);
	
	if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
	    printWarning = function (message) {
	        console.warn(message);
	    };
	    if (util.isNode && process.stderr.isTTY) {
	        printWarning = function(message, isSoft) {
	            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
	            console.warn(color + message + "\u001b[0m\n");
	        };
	    } else if (!util.isNode && typeof (new Error().stack) === "string") {
	        printWarning = function(message, isSoft) {
	            console.warn("%c" + message,
	                        isSoft ? "color: darkorange" : "color: red");
	        };
	    }
	}
	
	var config = {
	    warnings: warnings,
	    longStackTraces: false,
	    cancellation: false,
	    monitoring: false
	};
	
	if (longStackTraces) Promise.longStackTraces();
	
	return {
	    longStackTraces: function() {
	        return config.longStackTraces;
	    },
	    warnings: function() {
	        return config.warnings;
	    },
	    cancellation: function() {
	        return config.cancellation;
	    },
	    monitoring: function() {
	        return config.monitoring;
	    },
	    propagateFromFunction: function() {
	        return propagateFromFunction;
	    },
	    boundValueFunction: function() {
	        return boundValueFunction;
	    },
	    checkForgottenReturns: checkForgottenReturns,
	    setBounds: setBounds,
	    warn: warn,
	    deprecated: deprecated,
	    CapturedTrace: CapturedTrace,
	    fireDomEvent: fireDomEvent,
	    fireGlobalEvent: fireGlobalEvent
	};
	};
	
	},{"./errors":12,"./util":36}],10:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	function returner() {
	    return this.value;
	}
	function thrower() {
	    throw this.reason;
	}
	
	Promise.prototype["return"] =
	Promise.prototype.thenReturn = function (value) {
	    if (value instanceof Promise) value.suppressUnhandledRejections();
	    return this._then(
	        returner, undefined, undefined, {value: value}, undefined);
	};
	
	Promise.prototype["throw"] =
	Promise.prototype.thenThrow = function (reason) {
	    return this._then(
	        thrower, undefined, undefined, {reason: reason}, undefined);
	};
	
	Promise.prototype.catchThrow = function (reason) {
	    if (arguments.length <= 1) {
	        return this._then(
	            undefined, thrower, undefined, {reason: reason}, undefined);
	    } else {
	        var _reason = arguments[1];
	        var handler = function() {throw _reason;};
	        return this.caught(reason, handler);
	    }
	};
	
	Promise.prototype.catchReturn = function (value) {
	    if (arguments.length <= 1) {
	        if (value instanceof Promise) value.suppressUnhandledRejections();
	        return this._then(
	            undefined, returner, undefined, {value: value}, undefined);
	    } else {
	        var _value = arguments[1];
	        if (_value instanceof Promise) _value.suppressUnhandledRejections();
	        var handler = function() {return _value;};
	        return this.caught(value, handler);
	    }
	};
	};
	
	},{}],11:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseReduce = Promise.reduce;
	var PromiseAll = Promise.all;
	
	function promiseAllThis() {
	    return PromiseAll(this);
	}
	
	function PromiseMapSeries(promises, fn) {
	    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
	}
	
	Promise.prototype.each = function (fn) {
	    return PromiseReduce(this, fn, INTERNAL, 0)
	              ._then(promiseAllThis, undefined, undefined, this, undefined);
	};
	
	Promise.prototype.mapSeries = function (fn) {
	    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
	};
	
	Promise.each = function (promises, fn) {
	    return PromiseReduce(promises, fn, INTERNAL, 0)
	              ._then(promiseAllThis, undefined, undefined, promises, undefined);
	};
	
	Promise.mapSeries = PromiseMapSeries;
	};
	
	
	},{}],12:[function(_dereq_,module,exports){
	"use strict";
	var es5 = _dereq_("./es5");
	var Objectfreeze = es5.freeze;
	var util = _dereq_("./util");
	var inherits = util.inherits;
	var notEnumerableProp = util.notEnumerableProp;
	
	function subError(nameProperty, defaultMessage) {
	    function SubError(message) {
	        if (!(this instanceof SubError)) return new SubError(message);
	        notEnumerableProp(this, "message",
	            typeof message === "string" ? message : defaultMessage);
	        notEnumerableProp(this, "name", nameProperty);
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        } else {
	            Error.call(this);
	        }
	    }
	    inherits(SubError, Error);
	    return SubError;
	}
	
	var _TypeError, _RangeError;
	var Warning = subError("Warning", "warning");
	var CancellationError = subError("CancellationError", "cancellation error");
	var TimeoutError = subError("TimeoutError", "timeout error");
	var AggregateError = subError("AggregateError", "aggregate error");
	try {
	    _TypeError = TypeError;
	    _RangeError = RangeError;
	} catch(e) {
	    _TypeError = subError("TypeError", "type error");
	    _RangeError = subError("RangeError", "range error");
	}
	
	var methods = ("join pop push shift unshift slice filter forEach some " +
	    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");
	
	for (var i = 0; i < methods.length; ++i) {
	    if (typeof Array.prototype[methods[i]] === "function") {
	        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	    }
	}
	
	es5.defineProperty(AggregateError.prototype, "length", {
	    value: 0,
	    configurable: false,
	    writable: true,
	    enumerable: true
	});
	AggregateError.prototype["isOperational"] = true;
	var level = 0;
	AggregateError.prototype.toString = function() {
	    var indent = Array(level * 4 + 1).join(" ");
	    var ret = "\n" + indent + "AggregateError of:" + "\n";
	    level++;
	    indent = Array(level * 4 + 1).join(" ");
	    for (var i = 0; i < this.length; ++i) {
	        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	        var lines = str.split("\n");
	        for (var j = 0; j < lines.length; ++j) {
	            lines[j] = indent + lines[j];
	        }
	        str = lines.join("\n");
	        ret += str + "\n";
	    }
	    level--;
	    return ret;
	};
	
	function OperationalError(message) {
	    if (!(this instanceof OperationalError))
	        return new OperationalError(message);
	    notEnumerableProp(this, "name", "OperationalError");
	    notEnumerableProp(this, "message", message);
	    this.cause = message;
	    this["isOperational"] = true;
	
	    if (message instanceof Error) {
	        notEnumerableProp(this, "message", message.message);
	        notEnumerableProp(this, "stack", message.stack);
	    } else if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, this.constructor);
	    }
	
	}
	inherits(OperationalError, Error);
	
	var errorTypes = Error["__BluebirdErrorTypes__"];
	if (!errorTypes) {
	    errorTypes = Objectfreeze({
	        CancellationError: CancellationError,
	        TimeoutError: TimeoutError,
	        OperationalError: OperationalError,
	        RejectionError: OperationalError,
	        AggregateError: AggregateError
	    });
	    es5.defineProperty(Error, "__BluebirdErrorTypes__", {
	        value: errorTypes,
	        writable: false,
	        enumerable: false,
	        configurable: false
	    });
	}
	
	module.exports = {
	    Error: Error,
	    TypeError: _TypeError,
	    RangeError: _RangeError,
	    CancellationError: errorTypes.CancellationError,
	    OperationalError: errorTypes.OperationalError,
	    TimeoutError: errorTypes.TimeoutError,
	    AggregateError: errorTypes.AggregateError,
	    Warning: Warning
	};
	
	},{"./es5":13,"./util":36}],13:[function(_dereq_,module,exports){
	var isES5 = (function(){
	    "use strict";
	    return this === undefined;
	})();
	
	if (isES5) {
	    module.exports = {
	        freeze: Object.freeze,
	        defineProperty: Object.defineProperty,
	        getDescriptor: Object.getOwnPropertyDescriptor,
	        keys: Object.keys,
	        names: Object.getOwnPropertyNames,
	        getPrototypeOf: Object.getPrototypeOf,
	        isArray: Array.isArray,
	        isES5: isES5,
	        propertyIsWritable: function(obj, prop) {
	            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	            return !!(!descriptor || descriptor.writable || descriptor.set);
	        }
	    };
	} else {
	    var has = {}.hasOwnProperty;
	    var str = {}.toString;
	    var proto = {}.constructor.prototype;
	
	    var ObjectKeys = function (o) {
	        var ret = [];
	        for (var key in o) {
	            if (has.call(o, key)) {
	                ret.push(key);
	            }
	        }
	        return ret;
	    };
	
	    var ObjectGetDescriptor = function(o, key) {
	        return {value: o[key]};
	    };
	
	    var ObjectDefineProperty = function (o, key, desc) {
	        o[key] = desc.value;
	        return o;
	    };
	
	    var ObjectFreeze = function (obj) {
	        return obj;
	    };
	
	    var ObjectGetPrototypeOf = function (obj) {
	        try {
	            return Object(obj).constructor.prototype;
	        }
	        catch (e) {
	            return proto;
	        }
	    };
	
	    var ArrayIsArray = function (obj) {
	        try {
	            return str.call(obj) === "[object Array]";
	        }
	        catch(e) {
	            return false;
	        }
	    };
	
	    module.exports = {
	        isArray: ArrayIsArray,
	        keys: ObjectKeys,
	        names: ObjectKeys,
	        defineProperty: ObjectDefineProperty,
	        getDescriptor: ObjectGetDescriptor,
	        freeze: ObjectFreeze,
	        getPrototypeOf: ObjectGetPrototypeOf,
	        isES5: isES5,
	        propertyIsWritable: function() {
	            return true;
	        }
	    };
	}
	
	},{}],14:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseMap = Promise.map;
	
	Promise.prototype.filter = function (fn, options) {
	    return PromiseMap(this, fn, options, INTERNAL);
	};
	
	Promise.filter = function (promises, fn, options) {
	    return PromiseMap(promises, fn, options, INTERNAL);
	};
	};
	
	},{}],15:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, tryConvertToPromise) {
	var util = _dereq_("./util");
	var CancellationError = Promise.CancellationError;
	var errorObj = util.errorObj;
	
	function PassThroughHandlerContext(promise, type, handler) {
	    this.promise = promise;
	    this.type = type;
	    this.handler = handler;
	    this.called = false;
	    this.cancelPromise = null;
	}
	
	PassThroughHandlerContext.prototype.isFinallyHandler = function() {
	    return this.type === 0;
	};
	
	function FinallyHandlerCancelReaction(finallyHandler) {
	    this.finallyHandler = finallyHandler;
	}
	
	FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
	    checkCancel(this.finallyHandler);
	};
	
	function checkCancel(ctx, reason) {
	    if (ctx.cancelPromise != null) {
	        if (arguments.length > 1) {
	            ctx.cancelPromise._reject(reason);
	        } else {
	            ctx.cancelPromise._cancel();
	        }
	        ctx.cancelPromise = null;
	        return true;
	    }
	    return false;
	}
	
	function succeed() {
	    return finallyHandler.call(this, this.promise._target()._settledValue());
	}
	function fail(reason) {
	    if (checkCancel(this, reason)) return;
	    errorObj.e = reason;
	    return errorObj;
	}
	function finallyHandler(reasonOrValue) {
	    var promise = this.promise;
	    var handler = this.handler;
	
	    if (!this.called) {
	        this.called = true;
	        var ret = this.isFinallyHandler()
	            ? handler.call(promise._boundValue())
	            : handler.call(promise._boundValue(), reasonOrValue);
	        if (ret !== undefined) {
	            promise._setReturnedNonUndefined();
	            var maybePromise = tryConvertToPromise(ret, promise);
	            if (maybePromise instanceof Promise) {
	                if (this.cancelPromise != null) {
	                    if (maybePromise._isCancelled()) {
	                        var reason =
	                            new CancellationError("late cancellation observer");
	                        promise._attachExtraTrace(reason);
	                        errorObj.e = reason;
	                        return errorObj;
	                    } else if (maybePromise.isPending()) {
	                        maybePromise._attachCancellationCallback(
	                            new FinallyHandlerCancelReaction(this));
	                    }
	                }
	                return maybePromise._then(
	                    succeed, fail, undefined, this, undefined);
	            }
	        }
	    }
	
	    if (promise.isRejected()) {
	        checkCancel(this);
	        errorObj.e = reasonOrValue;
	        return errorObj;
	    } else {
	        checkCancel(this);
	        return reasonOrValue;
	    }
	}
	
	Promise.prototype._passThrough = function(handler, type, success, fail) {
	    if (typeof handler !== "function") return this.then();
	    return this._then(success,
	                      fail,
	                      undefined,
	                      new PassThroughHandlerContext(this, type, handler),
	                      undefined);
	};
	
	Promise.prototype.lastly =
	Promise.prototype["finally"] = function (handler) {
	    return this._passThrough(handler,
	                             0,
	                             finallyHandler,
	                             finallyHandler);
	};
	
	Promise.prototype.tap = function (handler) {
	    return this._passThrough(handler, 1, finallyHandler);
	};
	
	return PassThroughHandlerContext;
	};
	
	},{"./util":36}],16:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          apiRejection,
	                          INTERNAL,
	                          tryConvertToPromise,
	                          Proxyable,
	                          debug) {
	var errors = _dereq_("./errors");
	var TypeError = errors.TypeError;
	var util = _dereq_("./util");
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	var yieldHandlers = [];
	
	function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
	    for (var i = 0; i < yieldHandlers.length; ++i) {
	        traceParent._pushContext();
	        var result = tryCatch(yieldHandlers[i])(value);
	        traceParent._popContext();
	        if (result === errorObj) {
	            traceParent._pushContext();
	            var ret = Promise.reject(errorObj.e);
	            traceParent._popContext();
	            return ret;
	        }
	        var maybePromise = tryConvertToPromise(result, traceParent);
	        if (maybePromise instanceof Promise) return maybePromise;
	    }
	    return null;
	}
	
	function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
	    if (debug.cancellation()) {
	        var internal = new Promise(INTERNAL);
	        var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
	        this._promise = internal.lastly(function() {
	            return _finallyPromise;
	        });
	        internal._captureStackTrace();
	        internal._setOnCancel(this);
	    } else {
	        var promise = this._promise = new Promise(INTERNAL);
	        promise._captureStackTrace();
	    }
	    this._stack = stack;
	    this._generatorFunction = generatorFunction;
	    this._receiver = receiver;
	    this._generator = undefined;
	    this._yieldHandlers = typeof yieldHandler === "function"
	        ? [yieldHandler].concat(yieldHandlers)
	        : yieldHandlers;
	    this._yieldedPromise = null;
	    this._cancellationPhase = false;
	}
	util.inherits(PromiseSpawn, Proxyable);
	
	PromiseSpawn.prototype._isResolved = function() {
	    return this._promise === null;
	};
	
	PromiseSpawn.prototype._cleanup = function() {
	    this._promise = this._generator = null;
	    if (debug.cancellation() && this._finallyPromise !== null) {
	        this._finallyPromise._fulfill();
	        this._finallyPromise = null;
	    }
	};
	
	PromiseSpawn.prototype._promiseCancelled = function() {
	    if (this._isResolved()) return;
	    var implementsReturn = typeof this._generator["return"] !== "undefined";
	
	    var result;
	    if (!implementsReturn) {
	        var reason = new Promise.CancellationError(
	            "generator .return() sentinel");
	        Promise.coroutine.returnSentinel = reason;
	        this._promise._attachExtraTrace(reason);
	        this._promise._pushContext();
	        result = tryCatch(this._generator["throw"]).call(this._generator,
	                                                         reason);
	        this._promise._popContext();
	    } else {
	        this._promise._pushContext();
	        result = tryCatch(this._generator["return"]).call(this._generator,
	                                                          undefined);
	        this._promise._popContext();
	    }
	    this._cancellationPhase = true;
	    this._yieldedPromise = null;
	    this._continue(result);
	};
	
	PromiseSpawn.prototype._promiseFulfilled = function(value) {
	    this._yieldedPromise = null;
	    this._promise._pushContext();
	    var result = tryCatch(this._generator.next).call(this._generator, value);
	    this._promise._popContext();
	    this._continue(result);
	};
	
	PromiseSpawn.prototype._promiseRejected = function(reason) {
	    this._yieldedPromise = null;
	    this._promise._attachExtraTrace(reason);
	    this._promise._pushContext();
	    var result = tryCatch(this._generator["throw"])
	        .call(this._generator, reason);
	    this._promise._popContext();
	    this._continue(result);
	};
	
	PromiseSpawn.prototype._resultCancelled = function() {
	    if (this._yieldedPromise instanceof Promise) {
	        var promise = this._yieldedPromise;
	        this._yieldedPromise = null;
	        promise.cancel();
	    }
	};
	
	PromiseSpawn.prototype.promise = function () {
	    return this._promise;
	};
	
	PromiseSpawn.prototype._run = function () {
	    this._generator = this._generatorFunction.call(this._receiver);
	    this._receiver =
	        this._generatorFunction = undefined;
	    this._promiseFulfilled(undefined);
	};
	
	PromiseSpawn.prototype._continue = function (result) {
	    var promise = this._promise;
	    if (result === errorObj) {
	        this._cleanup();
	        if (this._cancellationPhase) {
	            return promise.cancel();
	        } else {
	            return promise._rejectCallback(result.e, false);
	        }
	    }
	
	    var value = result.value;
	    if (result.done === true) {
	        this._cleanup();
	        if (this._cancellationPhase) {
	            return promise.cancel();
	        } else {
	            return promise._resolveCallback(value);
	        }
	    } else {
	        var maybePromise = tryConvertToPromise(value, this._promise);
	        if (!(maybePromise instanceof Promise)) {
	            maybePromise =
	                promiseFromYieldHandler(maybePromise,
	                                        this._yieldHandlers,
	                                        this._promise);
	            if (maybePromise === null) {
	                this._promiseRejected(
	                    new TypeError(
	                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", value) +
	                        "From coroutine:\u000a" +
	                        this._stack.split("\n").slice(1, -7).join("\n")
	                    )
	                );
	                return;
	            }
	        }
	        maybePromise = maybePromise._target();
	        var bitField = maybePromise._bitField;
	        ;
	        if (((bitField & 50397184) === 0)) {
	            this._yieldedPromise = maybePromise;
	            maybePromise._proxy(this, null);
	        } else if (((bitField & 33554432) !== 0)) {
	            Promise._async.invoke(
	                this._promiseFulfilled, this, maybePromise._value()
	            );
	        } else if (((bitField & 16777216) !== 0)) {
	            Promise._async.invoke(
	                this._promiseRejected, this, maybePromise._reason()
	            );
	        } else {
	            this._promiseCancelled();
	        }
	    }
	};
	
	Promise.coroutine = function (generatorFunction, options) {
	    if (typeof generatorFunction !== "function") {
	        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var yieldHandler = Object(options).yieldHandler;
	    var PromiseSpawn$ = PromiseSpawn;
	    var stack = new Error().stack;
	    return function () {
	        var generator = generatorFunction.apply(this, arguments);
	        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
	                                      stack);
	        var ret = spawn.promise();
	        spawn._generator = generator;
	        spawn._promiseFulfilled(undefined);
	        return ret;
	    };
	};
	
	Promise.coroutine.addYieldHandler = function(fn) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    yieldHandlers.push(fn);
	};
	
	Promise.spawn = function (generatorFunction) {
	    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
	    if (typeof generatorFunction !== "function") {
	        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var spawn = new PromiseSpawn(generatorFunction, this);
	    var ret = spawn.promise();
	    spawn._run(Promise.spawn);
	    return ret;
	};
	};
	
	},{"./errors":12,"./util":36}],17:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
	         getDomain) {
	var util = _dereq_("./util");
	var canEvaluate = util.canEvaluate;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var reject;
	
	if (false) {
	if (canEvaluate) {
	    var thenCallback = function(i) {
	        return new Function("value", "holder", "                             \n\
	            'use strict';                                                    \n\
	            holder.pIndex = value;                                           \n\
	            holder.checkFulfillment(this);                                   \n\
	            ".replace(/Index/g, i));
	    };
	
	    var promiseSetter = function(i) {
	        return new Function("promise", "holder", "                           \n\
	            'use strict';                                                    \n\
	            holder.pIndex = promise;                                         \n\
	            ".replace(/Index/g, i));
	    };
	
	    var generateHolderClass = function(total) {
	        var props = new Array(total);
	        for (var i = 0; i < props.length; ++i) {
	            props[i] = "this.p" + (i+1);
	        }
	        var assignment = props.join(" = ") + " = null;";
	        var cancellationCode= "var promise;\n" + props.map(function(prop) {
	            return "                                                         \n\
	                promise = " + prop + ";                                      \n\
	                if (promise instanceof Promise) {                            \n\
	                    promise.cancel();                                        \n\
	                }                                                            \n\
	            ";
	        }).join("\n");
	        var passedArguments = props.join(", ");
	        var name = "Holder$" + total;
	
	
	        var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
	            'use strict';                                                    \n\
	            function [TheName](fn) {                                         \n\
	                [TheProperties]                                              \n\
	                this.fn = fn;                                                \n\
	                this.asyncNeeded = true;                                     \n\
	                this.now = 0;                                                \n\
	            }                                                                \n\
	                                                                             \n\
	            [TheName].prototype._callFunction = function(promise) {          \n\
	                promise._pushContext();                                      \n\
	                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
	                promise._popContext();                                       \n\
	                if (ret === errorObj) {                                      \n\
	                    promise._rejectCallback(ret.e, false);                   \n\
	                } else {                                                     \n\
	                    promise._resolveCallback(ret);                           \n\
	                }                                                            \n\
	            };                                                               \n\
	                                                                             \n\
	            [TheName].prototype.checkFulfillment = function(promise) {       \n\
	                var now = ++this.now;                                        \n\
	                if (now === [TheTotal]) {                                    \n\
	                    if (this.asyncNeeded) {                                  \n\
	                        async.invoke(this._callFunction, this, promise);     \n\
	                    } else {                                                 \n\
	                        this._callFunction(promise);                         \n\
	                    }                                                        \n\
	                                                                             \n\
	                }                                                            \n\
	            };                                                               \n\
	                                                                             \n\
	            [TheName].prototype._resultCancelled = function() {              \n\
	                [CancellationCode]                                           \n\
	            };                                                               \n\
	                                                                             \n\
	            return [TheName];                                                \n\
	        }(tryCatch, errorObj, Promise, async);                               \n\
	        ";
	
	        code = code.replace(/\[TheName\]/g, name)
	            .replace(/\[TheTotal\]/g, total)
	            .replace(/\[ThePassedArguments\]/g, passedArguments)
	            .replace(/\[TheProperties\]/g, assignment)
	            .replace(/\[CancellationCode\]/g, cancellationCode);
	
	        return new Function("tryCatch", "errorObj", "Promise", "async", code)
	                           (tryCatch, errorObj, Promise, async);
	    };
	
	    var holderClasses = [];
	    var thenCallbacks = [];
	    var promiseSetters = [];
	
	    for (var i = 0; i < 8; ++i) {
	        holderClasses.push(generateHolderClass(i + 1));
	        thenCallbacks.push(thenCallback(i + 1));
	        promiseSetters.push(promiseSetter(i + 1));
	    }
	
	    reject = function (reason) {
	        this._reject(reason);
	    };
	}}
	
	Promise.join = function () {
	    var last = arguments.length - 1;
	    var fn;
	    if (last > 0 && typeof arguments[last] === "function") {
	        fn = arguments[last];
	        if (false) {
	            if (last <= 8 && canEvaluate) {
	                var ret = new Promise(INTERNAL);
	                ret._captureStackTrace();
	                var HolderClass = holderClasses[last - 1];
	                var holder = new HolderClass(fn);
	                var callbacks = thenCallbacks;
	
	                for (var i = 0; i < last; ++i) {
	                    var maybePromise = tryConvertToPromise(arguments[i], ret);
	                    if (maybePromise instanceof Promise) {
	                        maybePromise = maybePromise._target();
	                        var bitField = maybePromise._bitField;
	                        ;
	                        if (((bitField & 50397184) === 0)) {
	                            maybePromise._then(callbacks[i], reject,
	                                               undefined, ret, holder);
	                            promiseSetters[i](maybePromise, holder);
	                            holder.asyncNeeded = false;
	                        } else if (((bitField & 33554432) !== 0)) {
	                            callbacks[i].call(ret,
	                                              maybePromise._value(), holder);
	                        } else if (((bitField & 16777216) !== 0)) {
	                            ret._reject(maybePromise._reason());
	                        } else {
	                            ret._cancel();
	                        }
	                    } else {
	                        callbacks[i].call(ret, maybePromise, holder);
	                    }
	                }
	
	                if (!ret._isFateSealed()) {
	                    if (holder.asyncNeeded) {
	                        var domain = getDomain();
	                        if (domain !== null) {
	                            holder.fn = util.domainBind(domain, holder.fn);
	                        }
	                    }
	                    ret._setAsyncGuaranteed();
	                    ret._setOnCancel(holder);
	                }
	                return ret;
	            }
	        }
	    }
	    var args = [].slice.call(arguments);;
	    if (fn) args.pop();
	    var ret = new PromiseArray(args).promise();
	    return fn !== undefined ? ret.spread(fn) : ret;
	};
	
	};
	
	},{"./util":36}],18:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL,
	                          debug) {
	var getDomain = Promise._getDomain;
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var async = Promise._async;
	
	function MappingPromiseArray(promises, fn, limit, _filter) {
	    this.constructor$(promises);
	    this._promise._captureStackTrace();
	    var domain = getDomain();
	    this._callback = domain === null ? fn : util.domainBind(domain, fn);
	    this._preservedValues = _filter === INTERNAL
	        ? new Array(this.length())
	        : null;
	    this._limit = limit;
	    this._inFlight = 0;
	    this._queue = [];
	    async.invoke(this._asyncInit, this, undefined);
	}
	util.inherits(MappingPromiseArray, PromiseArray);
	
	MappingPromiseArray.prototype._asyncInit = function() {
	    this._init$(undefined, -2);
	};
	
	MappingPromiseArray.prototype._init = function () {};
	
	MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var values = this._values;
	    var length = this.length();
	    var preservedValues = this._preservedValues;
	    var limit = this._limit;
	
	    if (index < 0) {
	        index = (index * -1) - 1;
	        values[index] = value;
	        if (limit >= 1) {
	            this._inFlight--;
	            this._drainQueue();
	            if (this._isResolved()) return true;
	        }
	    } else {
	        if (limit >= 1 && this._inFlight >= limit) {
	            values[index] = value;
	            this._queue.push(index);
	            return false;
	        }
	        if (preservedValues !== null) preservedValues[index] = value;
	
	        var promise = this._promise;
	        var callback = this._callback;
	        var receiver = promise._boundValue();
	        promise._pushContext();
	        var ret = tryCatch(callback).call(receiver, value, index, length);
	        var promiseCreated = promise._popContext();
	        debug.checkForgottenReturns(
	            ret,
	            promiseCreated,
	            preservedValues !== null ? "Promise.filter" : "Promise.map",
	            promise
	        );
	        if (ret === errorObj) {
	            this._reject(ret.e);
	            return true;
	        }
	
	        var maybePromise = tryConvertToPromise(ret, this._promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            var bitField = maybePromise._bitField;
	            ;
	            if (((bitField & 50397184) === 0)) {
	                if (limit >= 1) this._inFlight++;
	                values[index] = maybePromise;
	                maybePromise._proxy(this, (index + 1) * -1);
	                return false;
	            } else if (((bitField & 33554432) !== 0)) {
	                ret = maybePromise._value();
	            } else if (((bitField & 16777216) !== 0)) {
	                this._reject(maybePromise._reason());
	                return true;
	            } else {
	                this._cancel();
	                return true;
	            }
	        }
	        values[index] = ret;
	    }
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= length) {
	        if (preservedValues !== null) {
	            this._filter(values, preservedValues);
	        } else {
	            this._resolve(values);
	        }
	        return true;
	    }
	    return false;
	};
	
	MappingPromiseArray.prototype._drainQueue = function () {
	    var queue = this._queue;
	    var limit = this._limit;
	    var values = this._values;
	    while (queue.length > 0 && this._inFlight < limit) {
	        if (this._isResolved()) return;
	        var index = queue.pop();
	        this._promiseFulfilled(values[index], index);
	    }
	};
	
	MappingPromiseArray.prototype._filter = function (booleans, values) {
	    var len = values.length;
	    var ret = new Array(len);
	    var j = 0;
	    for (var i = 0; i < len; ++i) {
	        if (booleans[i]) ret[j++] = values[i];
	    }
	    ret.length = j;
	    this._resolve(ret);
	};
	
	MappingPromiseArray.prototype.preservedValues = function () {
	    return this._preservedValues;
	};
	
	function map(promises, fn, options, _filter) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	
	    var limit = 0;
	    if (options !== undefined) {
	        if (typeof options === "object" && options !== null) {
	            if (typeof options.concurrency !== "number") {
	                return Promise.reject(
	                    new TypeError("'concurrency' must be a number but it is " +
	                                    util.classString(options.concurrency)));
	            }
	            limit = options.concurrency;
	        } else {
	            return Promise.reject(new TypeError(
	                            "options argument must be an object but it is " +
	                             util.classString(options)));
	        }
	    }
	    limit = typeof limit === "number" &&
	        isFinite(limit) && limit >= 1 ? limit : 0;
	    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
	}
	
	Promise.prototype.map = function (fn, options) {
	    return map(this, fn, options, null);
	};
	
	Promise.map = function (promises, fn, options, _filter) {
	    return map(promises, fn, options, _filter);
	};
	
	
	};
	
	},{"./util":36}],19:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;
	
	Promise.method = function (fn) {
	    if (typeof fn !== "function") {
	        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
	    }
	    return function () {
	        var ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._pushContext();
	        var value = tryCatch(fn).apply(this, arguments);
	        var promiseCreated = ret._popContext();
	        debug.checkForgottenReturns(
	            value, promiseCreated, "Promise.method", ret);
	        ret._resolveFromSyncValue(value);
	        return ret;
	    };
	};
	
	Promise.attempt = Promise["try"] = function (fn) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._pushContext();
	    var value;
	    if (arguments.length > 1) {
	        debug.deprecated("calling Promise.try with more than 1 argument");
	        var arg = arguments[1];
	        var ctx = arguments[2];
	        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
	                                  : tryCatch(fn).call(ctx, arg);
	    } else {
	        value = tryCatch(fn)();
	    }
	    var promiseCreated = ret._popContext();
	    debug.checkForgottenReturns(
	        value, promiseCreated, "Promise.try", ret);
	    ret._resolveFromSyncValue(value);
	    return ret;
	};
	
	Promise.prototype._resolveFromSyncValue = function (value) {
	    if (value === util.errorObj) {
	        this._rejectCallback(value.e, false);
	    } else {
	        this._resolveCallback(value, true);
	    }
	};
	};
	
	},{"./util":36}],20:[function(_dereq_,module,exports){
	"use strict";
	var util = _dereq_("./util");
	var maybeWrapAsError = util.maybeWrapAsError;
	var errors = _dereq_("./errors");
	var OperationalError = errors.OperationalError;
	var es5 = _dereq_("./es5");
	
	function isUntypedError(obj) {
	    return obj instanceof Error &&
	        es5.getPrototypeOf(obj) === Error.prototype;
	}
	
	var rErrorKey = /^(?:name|message|stack|cause)$/;
	function wrapAsOperationalError(obj) {
	    var ret;
	    if (isUntypedError(obj)) {
	        ret = new OperationalError(obj);
	        ret.name = obj.name;
	        ret.message = obj.message;
	        ret.stack = obj.stack;
	        var keys = es5.keys(obj);
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!rErrorKey.test(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	    util.markAsOriginatingFromRejection(obj);
	    return obj;
	}
	
	function nodebackForPromise(promise, multiArgs) {
	    return function(err, value) {
	        if (promise === null) return;
	        if (err) {
	            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	            promise._attachExtraTrace(wrapped);
	            promise._reject(wrapped);
	        } else if (!multiArgs) {
	            promise._fulfill(value);
	        } else {
	            var args = [].slice.call(arguments, 1);;
	            promise._fulfill(args);
	        }
	        promise = null;
	    };
	}
	
	module.exports = nodebackForPromise;
	
	},{"./errors":12,"./es5":13,"./util":36}],21:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var util = _dereq_("./util");
	var async = Promise._async;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	
	function spreadAdapter(val, nodeback) {
	    var promise = this;
	    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
	    var ret =
	        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}
	
	function successAdapter(val, nodeback) {
	    var promise = this;
	    var receiver = promise._boundValue();
	    var ret = val === undefined
	        ? tryCatch(nodeback).call(receiver, null)
	        : tryCatch(nodeback).call(receiver, null, val);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}
	function errorAdapter(reason, nodeback) {
	    var promise = this;
	    if (!reason) {
	        var newReason = new Error(reason + "");
	        newReason.cause = reason;
	        reason = newReason;
	    }
	    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}
	
	Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
	                                                                     options) {
	    if (typeof nodeback == "function") {
	        var adapter = successAdapter;
	        if (options !== undefined && Object(options).spread) {
	            adapter = spreadAdapter;
	        }
	        this._then(
	            adapter,
	            errorAdapter,
	            undefined,
	            this,
	            nodeback
	        );
	    }
	    return this;
	};
	};
	
	},{"./util":36}],22:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function() {
	var makeSelfResolutionError = function () {
	    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	};
	var reflectHandler = function() {
	    return new Promise.PromiseInspection(this._target());
	};
	var apiRejection = function(msg) {
	    return Promise.reject(new TypeError(msg));
	};
	function Proxyable() {}
	var UNDEFINED_BINDING = {};
	var util = _dereq_("./util");
	
	var getDomain;
	if (util.isNode) {
	    getDomain = function() {
	        var ret = process.domain;
	        if (ret === undefined) ret = null;
	        return ret;
	    };
	} else {
	    getDomain = function() {
	        return null;
	    };
	}
	util.notEnumerableProp(Promise, "_getDomain", getDomain);
	
	var es5 = _dereq_("./es5");
	var Async = _dereq_("./async");
	var async = new Async();
	es5.defineProperty(Promise, "_async", {value: async});
	var errors = _dereq_("./errors");
	var TypeError = Promise.TypeError = errors.TypeError;
	Promise.RangeError = errors.RangeError;
	var CancellationError = Promise.CancellationError = errors.CancellationError;
	Promise.TimeoutError = errors.TimeoutError;
	Promise.OperationalError = errors.OperationalError;
	Promise.RejectionError = errors.OperationalError;
	Promise.AggregateError = errors.AggregateError;
	var INTERNAL = function(){};
	var APPLY = {};
	var NEXT_FILTER = {};
	var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
	var PromiseArray =
	    _dereq_("./promise_array")(Promise, INTERNAL,
	                               tryConvertToPromise, apiRejection, Proxyable);
	var Context = _dereq_("./context")(Promise);
	 /*jshint unused:false*/
	var createContext = Context.create;
	var debug = _dereq_("./debuggability")(Promise, Context);
	var CapturedTrace = debug.CapturedTrace;
	var PassThroughHandlerContext =
	    _dereq_("./finally")(Promise, tryConvertToPromise);
	var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
	var nodebackForPromise = _dereq_("./nodeback");
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	function check(self, executor) {
	    if (typeof executor !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(executor));
	    }
	    if (self.constructor !== Promise) {
	        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	}
	
	function Promise(executor) {
	    this._bitField = 0;
	    this._fulfillmentHandler0 = undefined;
	    this._rejectionHandler0 = undefined;
	    this._promise0 = undefined;
	    this._receiver0 = undefined;
	    if (executor !== INTERNAL) {
	        check(this, executor);
	        this._resolveFromExecutor(executor);
	    }
	    this._promiseCreated();
	    this._fireEvent("promiseCreated", this);
	}
	
	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};
	
	Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
	    var len = arguments.length;
	    if (len > 1) {
	        var catchInstances = new Array(len - 1),
	            j = 0, i;
	        for (i = 0; i < len - 1; ++i) {
	            var item = arguments[i];
	            if (util.isObject(item)) {
	                catchInstances[j++] = item;
	            } else {
	                return apiRejection("expecting an object but got " +
	                    "A catch statement predicate " + util.classString(item));
	            }
	        }
	        catchInstances.length = j;
	        fn = arguments[i];
	        return this.then(undefined, catchFilter(catchInstances, fn, this));
	    }
	    return this.then(undefined, fn);
	};
	
	Promise.prototype.reflect = function () {
	    return this._then(reflectHandler,
	        reflectHandler, undefined, this, undefined);
	};
	
	Promise.prototype.then = function (didFulfill, didReject) {
	    if (debug.warnings() && arguments.length > 0 &&
	        typeof didFulfill !== "function" &&
	        typeof didReject !== "function") {
	        var msg = ".then() only accepts functions but was passed: " +
	                util.classString(didFulfill);
	        if (arguments.length > 1) {
	            msg += ", " + util.classString(didReject);
	        }
	        this._warn(msg);
	    }
	    return this._then(didFulfill, didReject, undefined, undefined, undefined);
	};
	
	Promise.prototype.done = function (didFulfill, didReject) {
	    var promise =
	        this._then(didFulfill, didReject, undefined, undefined, undefined);
	    promise._setIsFinal();
	};
	
	Promise.prototype.spread = function (fn) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
	};
	
	Promise.prototype.toJSON = function () {
	    var ret = {
	        isFulfilled: false,
	        isRejected: false,
	        fulfillmentValue: undefined,
	        rejectionReason: undefined
	    };
	    if (this.isFulfilled()) {
	        ret.fulfillmentValue = this.value();
	        ret.isFulfilled = true;
	    } else if (this.isRejected()) {
	        ret.rejectionReason = this.reason();
	        ret.isRejected = true;
	    }
	    return ret;
	};
	
	Promise.prototype.all = function () {
	    if (arguments.length > 0) {
	        this._warn(".all() was passed arguments but it does not take any");
	    }
	    return new PromiseArray(this).promise();
	};
	
	Promise.prototype.error = function (fn) {
	    return this.caught(util.originatesFromRejection, fn);
	};
	
	Promise.getNewLibraryCopy = module.exports;
	
	Promise.is = function (val) {
	    return val instanceof Promise;
	};
	
	Promise.fromNode = Promise.fromCallback = function(fn) {
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
	                                         : false;
	    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
	    if (result === errorObj) {
	        ret._rejectCallback(result.e, true);
	    }
	    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
	    return ret;
	};
	
	Promise.all = function (promises) {
	    return new PromiseArray(promises).promise();
	};
	
	Promise.cast = function (obj) {
	    var ret = tryConvertToPromise(obj);
	    if (!(ret instanceof Promise)) {
	        ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._setFulfilled();
	        ret._rejectionHandler0 = obj;
	    }
	    return ret;
	};
	
	Promise.resolve = Promise.fulfilled = Promise.cast;
	
	Promise.reject = Promise.rejected = function (reason) {
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._rejectCallback(reason, true);
	    return ret;
	};
	
	Promise.setScheduler = function(fn) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    return async.setScheduler(fn);
	};
	
	Promise.prototype._then = function (
	    didFulfill,
	    didReject,
	    _,    receiver,
	    internalData
	) {
	    var haveInternalData = internalData !== undefined;
	    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
	    var target = this._target();
	    var bitField = target._bitField;
	
	    if (!haveInternalData) {
	        promise._propagateFrom(this, 3);
	        promise._captureStackTrace();
	        if (receiver === undefined &&
	            ((this._bitField & 2097152) !== 0)) {
	            if (!((bitField & 50397184) === 0)) {
	                receiver = this._boundValue();
	            } else {
	                receiver = target === this ? undefined : this._boundTo;
	            }
	        }
	        this._fireEvent("promiseChained", this, promise);
	    }
	
	    var domain = getDomain();
	    if (!((bitField & 50397184) === 0)) {
	        var handler, value, settler = target._settlePromiseCtx;
	        if (((bitField & 33554432) !== 0)) {
	            value = target._rejectionHandler0;
	            handler = didFulfill;
	        } else if (((bitField & 16777216) !== 0)) {
	            value = target._fulfillmentHandler0;
	            handler = didReject;
	            target._unsetRejectionIsUnhandled();
	        } else {
	            settler = target._settlePromiseLateCancellationObserver;
	            value = new CancellationError("late cancellation observer");
	            target._attachExtraTrace(value);
	            handler = didReject;
	        }
	
	        async.invoke(settler, target, {
	            handler: domain === null ? handler
	                : (typeof handler === "function" &&
	                    util.domainBind(domain, handler)),
	            promise: promise,
	            receiver: receiver,
	            value: value
	        });
	    } else {
	        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
	    }
	
	    return promise;
	};
	
	Promise.prototype._length = function () {
	    return this._bitField & 65535;
	};
	
	Promise.prototype._isFateSealed = function () {
	    return (this._bitField & 117506048) !== 0;
	};
	
	Promise.prototype._isFollowing = function () {
	    return (this._bitField & 67108864) === 67108864;
	};
	
	Promise.prototype._setLength = function (len) {
	    this._bitField = (this._bitField & -65536) |
	        (len & 65535);
	};
	
	Promise.prototype._setFulfilled = function () {
	    this._bitField = this._bitField | 33554432;
	    this._fireEvent("promiseFulfilled", this);
	};
	
	Promise.prototype._setRejected = function () {
	    this._bitField = this._bitField | 16777216;
	    this._fireEvent("promiseRejected", this);
	};
	
	Promise.prototype._setFollowing = function () {
	    this._bitField = this._bitField | 67108864;
	    this._fireEvent("promiseResolved", this);
	};
	
	Promise.prototype._setIsFinal = function () {
	    this._bitField = this._bitField | 4194304;
	};
	
	Promise.prototype._isFinal = function () {
	    return (this._bitField & 4194304) > 0;
	};
	
	Promise.prototype._unsetCancelled = function() {
	    this._bitField = this._bitField & (~65536);
	};
	
	Promise.prototype._setCancelled = function() {
	    this._bitField = this._bitField | 65536;
	    this._fireEvent("promiseCancelled", this);
	};
	
	Promise.prototype._setWillBeCancelled = function() {
	    this._bitField = this._bitField | 8388608;
	};
	
	Promise.prototype._setAsyncGuaranteed = function() {
	    if (async.hasCustomScheduler()) return;
	    this._bitField = this._bitField | 134217728;
	};
	
	Promise.prototype._receiverAt = function (index) {
	    var ret = index === 0 ? this._receiver0 : this[
	            index * 4 - 4 + 3];
	    if (ret === UNDEFINED_BINDING) {
	        return undefined;
	    } else if (ret === undefined && this._isBound()) {
	        return this._boundValue();
	    }
	    return ret;
	};
	
	Promise.prototype._promiseAt = function (index) {
	    return this[
	            index * 4 - 4 + 2];
	};
	
	Promise.prototype._fulfillmentHandlerAt = function (index) {
	    return this[
	            index * 4 - 4 + 0];
	};
	
	Promise.prototype._rejectionHandlerAt = function (index) {
	    return this[
	            index * 4 - 4 + 1];
	};
	
	Promise.prototype._boundValue = function() {};
	
	Promise.prototype._migrateCallback0 = function (follower) {
	    var bitField = follower._bitField;
	    var fulfill = follower._fulfillmentHandler0;
	    var reject = follower._rejectionHandler0;
	    var promise = follower._promise0;
	    var receiver = follower._receiverAt(0);
	    if (receiver === undefined) receiver = UNDEFINED_BINDING;
	    this._addCallbacks(fulfill, reject, promise, receiver, null);
	};
	
	Promise.prototype._migrateCallbackAt = function (follower, index) {
	    var fulfill = follower._fulfillmentHandlerAt(index);
	    var reject = follower._rejectionHandlerAt(index);
	    var promise = follower._promiseAt(index);
	    var receiver = follower._receiverAt(index);
	    if (receiver === undefined) receiver = UNDEFINED_BINDING;
	    this._addCallbacks(fulfill, reject, promise, receiver, null);
	};
	
	Promise.prototype._addCallbacks = function (
	    fulfill,
	    reject,
	    promise,
	    receiver,
	    domain
	) {
	    var index = this._length();
	
	    if (index >= 65535 - 4) {
	        index = 0;
	        this._setLength(0);
	    }
	
	    if (index === 0) {
	        this._promise0 = promise;
	        this._receiver0 = receiver;
	        if (typeof fulfill === "function") {
	            this._fulfillmentHandler0 =
	                domain === null ? fulfill : util.domainBind(domain, fulfill);
	        }
	        if (typeof reject === "function") {
	            this._rejectionHandler0 =
	                domain === null ? reject : util.domainBind(domain, reject);
	        }
	    } else {
	        var base = index * 4 - 4;
	        this[base + 2] = promise;
	        this[base + 3] = receiver;
	        if (typeof fulfill === "function") {
	            this[base + 0] =
	                domain === null ? fulfill : util.domainBind(domain, fulfill);
	        }
	        if (typeof reject === "function") {
	            this[base + 1] =
	                domain === null ? reject : util.domainBind(domain, reject);
	        }
	    }
	    this._setLength(index + 1);
	    return index;
	};
	
	Promise.prototype._proxy = function (proxyable, arg) {
	    this._addCallbacks(undefined, undefined, arg, proxyable, null);
	};
	
	Promise.prototype._resolveCallback = function(value, shouldBind) {
	    if (((this._bitField & 117506048) !== 0)) return;
	    if (value === this)
	        return this._rejectCallback(makeSelfResolutionError(), false);
	    var maybePromise = tryConvertToPromise(value, this);
	    if (!(maybePromise instanceof Promise)) return this._fulfill(value);
	
	    if (shouldBind) this._propagateFrom(maybePromise, 2);
	
	    var promise = maybePromise._target();
	
	    if (promise === this) {
	        this._reject(makeSelfResolutionError());
	        return;
	    }
	
	    var bitField = promise._bitField;
	    if (((bitField & 50397184) === 0)) {
	        var len = this._length();
	        if (len > 0) promise._migrateCallback0(this);
	        for (var i = 1; i < len; ++i) {
	            promise._migrateCallbackAt(this, i);
	        }
	        this._setFollowing();
	        this._setLength(0);
	        this._setFollowee(promise);
	    } else if (((bitField & 33554432) !== 0)) {
	        this._fulfill(promise._value());
	    } else if (((bitField & 16777216) !== 0)) {
	        this._reject(promise._reason());
	    } else {
	        var reason = new CancellationError("late cancellation observer");
	        promise._attachExtraTrace(reason);
	        this._reject(reason);
	    }
	};
	
	Promise.prototype._rejectCallback =
	function(reason, synchronous, ignoreNonErrorWarnings) {
	    var trace = util.ensureErrorObject(reason);
	    var hasStack = trace === reason;
	    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
	        var message = "a promise was rejected with a non-error: " +
	            util.classString(reason);
	        this._warn(message, true);
	    }
	    this._attachExtraTrace(trace, synchronous ? hasStack : false);
	    this._reject(reason);
	};
	
	Promise.prototype._resolveFromExecutor = function (executor) {
	    var promise = this;
	    this._captureStackTrace();
	    this._pushContext();
	    var synchronous = true;
	    var r = this._execute(executor, function(value) {
	        promise._resolveCallback(value);
	    }, function (reason) {
	        promise._rejectCallback(reason, synchronous);
	    });
	    synchronous = false;
	    this._popContext();
	
	    if (r !== undefined) {
	        promise._rejectCallback(r, true);
	    }
	};
	
	Promise.prototype._settlePromiseFromHandler = function (
	    handler, receiver, value, promise
	) {
	    var bitField = promise._bitField;
	    if (((bitField & 65536) !== 0)) return;
	    promise._pushContext();
	    var x;
	    if (receiver === APPLY) {
	        if (!value || typeof value.length !== "number") {
	            x = errorObj;
	            x.e = new TypeError("cannot .spread() a non-array: " +
	                                    util.classString(value));
	        } else {
	            x = tryCatch(handler).apply(this._boundValue(), value);
	        }
	    } else {
	        x = tryCatch(handler).call(receiver, value);
	    }
	    var promiseCreated = promise._popContext();
	    bitField = promise._bitField;
	    if (((bitField & 65536) !== 0)) return;
	
	    if (x === NEXT_FILTER) {
	        promise._reject(value);
	    } else if (x === errorObj) {
	        promise._rejectCallback(x.e, false);
	    } else {
	        debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
	        promise._resolveCallback(x);
	    }
	};
	
	Promise.prototype._target = function() {
	    var ret = this;
	    while (ret._isFollowing()) ret = ret._followee();
	    return ret;
	};
	
	Promise.prototype._followee = function() {
	    return this._rejectionHandler0;
	};
	
	Promise.prototype._setFollowee = function(promise) {
	    this._rejectionHandler0 = promise;
	};
	
	Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
	    var isPromise = promise instanceof Promise;
	    var bitField = this._bitField;
	    var asyncGuaranteed = ((bitField & 134217728) !== 0);
	    if (((bitField & 65536) !== 0)) {
	        if (isPromise) promise._invokeInternalOnCancel();
	
	        if (receiver instanceof PassThroughHandlerContext &&
	            receiver.isFinallyHandler()) {
	            receiver.cancelPromise = promise;
	            if (tryCatch(handler).call(receiver, value) === errorObj) {
	                promise._reject(errorObj.e);
	            }
	        } else if (handler === reflectHandler) {
	            promise._fulfill(reflectHandler.call(receiver));
	        } else if (receiver instanceof Proxyable) {
	            receiver._promiseCancelled(promise);
	        } else if (isPromise || promise instanceof PromiseArray) {
	            promise._cancel();
	        } else {
	            receiver.cancel();
	        }
	    } else if (typeof handler === "function") {
	        if (!isPromise) {
	            handler.call(receiver, value, promise);
	        } else {
	            if (asyncGuaranteed) promise._setAsyncGuaranteed();
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	        }
	    } else if (receiver instanceof Proxyable) {
	        if (!receiver._isResolved()) {
	            if (((bitField & 33554432) !== 0)) {
	                receiver._promiseFulfilled(value, promise);
	            } else {
	                receiver._promiseRejected(value, promise);
	            }
	        }
	    } else if (isPromise) {
	        if (asyncGuaranteed) promise._setAsyncGuaranteed();
	        if (((bitField & 33554432) !== 0)) {
	            promise._fulfill(value);
	        } else {
	            promise._reject(value);
	        }
	    }
	};
	
	Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
	    var handler = ctx.handler;
	    var promise = ctx.promise;
	    var receiver = ctx.receiver;
	    var value = ctx.value;
	    if (typeof handler === "function") {
	        if (!(promise instanceof Promise)) {
	            handler.call(receiver, value, promise);
	        } else {
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	        }
	    } else if (promise instanceof Promise) {
	        promise._reject(value);
	    }
	};
	
	Promise.prototype._settlePromiseCtx = function(ctx) {
	    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
	};
	
	Promise.prototype._settlePromise0 = function(handler, value, bitField) {
	    var promise = this._promise0;
	    var receiver = this._receiverAt(0);
	    this._promise0 = undefined;
	    this._receiver0 = undefined;
	    this._settlePromise(promise, handler, receiver, value);
	};
	
	Promise.prototype._clearCallbackDataAtIndex = function(index) {
	    var base = index * 4 - 4;
	    this[base + 2] =
	    this[base + 3] =
	    this[base + 0] =
	    this[base + 1] = undefined;
	};
	
	Promise.prototype._fulfill = function (value) {
	    var bitField = this._bitField;
	    if (((bitField & 117506048) >>> 16)) return;
	    if (value === this) {
	        var err = makeSelfResolutionError();
	        this._attachExtraTrace(err);
	        return this._reject(err);
	    }
	    this._setFulfilled();
	    this._rejectionHandler0 = value;
	
	    if ((bitField & 65535) > 0) {
	        if (((bitField & 134217728) !== 0)) {
	            this._settlePromises();
	        } else {
	            async.settlePromises(this);
	        }
	    }
	};
	
	Promise.prototype._reject = function (reason) {
	    var bitField = this._bitField;
	    if (((bitField & 117506048) >>> 16)) return;
	    this._setRejected();
	    this._fulfillmentHandler0 = reason;
	
	    if (this._isFinal()) {
	        return async.fatalError(reason, util.isNode);
	    }
	
	    if ((bitField & 65535) > 0) {
	        async.settlePromises(this);
	    } else {
	        this._ensurePossibleRejectionHandled();
	    }
	};
	
	Promise.prototype._fulfillPromises = function (len, value) {
	    for (var i = 1; i < len; i++) {
	        var handler = this._fulfillmentHandlerAt(i);
	        var promise = this._promiseAt(i);
	        var receiver = this._receiverAt(i);
	        this._clearCallbackDataAtIndex(i);
	        this._settlePromise(promise, handler, receiver, value);
	    }
	};
	
	Promise.prototype._rejectPromises = function (len, reason) {
	    for (var i = 1; i < len; i++) {
	        var handler = this._rejectionHandlerAt(i);
	        var promise = this._promiseAt(i);
	        var receiver = this._receiverAt(i);
	        this._clearCallbackDataAtIndex(i);
	        this._settlePromise(promise, handler, receiver, reason);
	    }
	};
	
	Promise.prototype._settlePromises = function () {
	    var bitField = this._bitField;
	    var len = (bitField & 65535);
	
	    if (len > 0) {
	        if (((bitField & 16842752) !== 0)) {
	            var reason = this._fulfillmentHandler0;
	            this._settlePromise0(this._rejectionHandler0, reason, bitField);
	            this._rejectPromises(len, reason);
	        } else {
	            var value = this._rejectionHandler0;
	            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
	            this._fulfillPromises(len, value);
	        }
	        this._setLength(0);
	    }
	    this._clearCancellationData();
	};
	
	Promise.prototype._settledValue = function() {
	    var bitField = this._bitField;
	    if (((bitField & 33554432) !== 0)) {
	        return this._rejectionHandler0;
	    } else if (((bitField & 16777216) !== 0)) {
	        return this._fulfillmentHandler0;
	    }
	};
	
	function deferResolve(v) {this.promise._resolveCallback(v);}
	function deferReject(v) {this.promise._rejectCallback(v, false);}
	
	Promise.defer = Promise.pending = function() {
	    debug.deprecated("Promise.defer", "new Promise");
	    var promise = new Promise(INTERNAL);
	    return {
	        promise: promise,
	        resolve: deferResolve,
	        reject: deferReject
	    };
	};
	
	util.notEnumerableProp(Promise,
	                       "_makeSelfResolutionError",
	                       makeSelfResolutionError);
	
	_dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
	    debug);
	_dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
	_dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
	_dereq_("./direct_resolve")(Promise);
	_dereq_("./synchronous_inspection")(Promise);
	_dereq_("./join")(
	    Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
	Promise.Promise = Promise;
	Promise.version = "3.4.6";
	_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	_dereq_('./call_get.js')(Promise);
	_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
	_dereq_('./timers.js')(Promise, INTERNAL, debug);
	_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
	_dereq_('./nodeify.js')(Promise);
	_dereq_('./promisify.js')(Promise, INTERNAL);
	_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
	_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	_dereq_('./settle.js')(Promise, PromiseArray, debug);
	_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
	_dereq_('./filter.js')(Promise, INTERNAL);
	_dereq_('./each.js')(Promise, INTERNAL);
	_dereq_('./any.js')(Promise);
	                                                         
	    util.toFastProperties(Promise);                                          
	    util.toFastProperties(Promise.prototype);                                
	    function fillTypes(value) {                                              
	        var p = new Promise(INTERNAL);                                       
	        p._fulfillmentHandler0 = value;                                      
	        p._rejectionHandler0 = value;                                        
	        p._promise0 = value;                                                 
	        p._receiver0 = value;                                                
	    }                                                                        
	    // Complete slack tracking, opt out of field-type tracking and           
	    // stabilize map                                                         
	    fillTypes({a: 1});                                                       
	    fillTypes({b: 2});                                                       
	    fillTypes({c: 3});                                                       
	    fillTypes(1);                                                            
	    fillTypes(function(){});                                                 
	    fillTypes(undefined);                                                    
	    fillTypes(false);                                                        
	    fillTypes(new Promise(INTERNAL));                                        
	    debug.setBounds(Async.firstLineError, util.lastLineError);               
	    return Promise;                                                          
	
	};
	
	},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise,
	    apiRejection, Proxyable) {
	var util = _dereq_("./util");
	var isArray = util.isArray;
	
	function toResolutionValue(val) {
	    switch(val) {
	    case -2: return [];
	    case -3: return {};
	    }
	}
	
	function PromiseArray(values) {
	    var promise = this._promise = new Promise(INTERNAL);
	    if (values instanceof Promise) {
	        promise._propagateFrom(values, 3);
	    }
	    promise._setOnCancel(this);
	    this._values = values;
	    this._length = 0;
	    this._totalResolved = 0;
	    this._init(undefined, -2);
	}
	util.inherits(PromiseArray, Proxyable);
	
	PromiseArray.prototype.length = function () {
	    return this._length;
	};
	
	PromiseArray.prototype.promise = function () {
	    return this._promise;
	};
	
	PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
	    var values = tryConvertToPromise(this._values, this._promise);
	    if (values instanceof Promise) {
	        values = values._target();
	        var bitField = values._bitField;
	        ;
	        this._values = values;
	
	        if (((bitField & 50397184) === 0)) {
	            this._promise._setAsyncGuaranteed();
	            return values._then(
	                init,
	                this._reject,
	                undefined,
	                this,
	                resolveValueIfEmpty
	           );
	        } else if (((bitField & 33554432) !== 0)) {
	            values = values._value();
	        } else if (((bitField & 16777216) !== 0)) {
	            return this._reject(values._reason());
	        } else {
	            return this._cancel();
	        }
	    }
	    values = util.asArray(values);
	    if (values === null) {
	        var err = apiRejection(
	            "expecting an array or an iterable object but got " + util.classString(values)).reason();
	        this._promise._rejectCallback(err, false);
	        return;
	    }
	
	    if (values.length === 0) {
	        if (resolveValueIfEmpty === -5) {
	            this._resolveEmptyArray();
	        }
	        else {
	            this._resolve(toResolutionValue(resolveValueIfEmpty));
	        }
	        return;
	    }
	    this._iterate(values);
	};
	
	PromiseArray.prototype._iterate = function(values) {
	    var len = this.getActualLength(values.length);
	    this._length = len;
	    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
	    var result = this._promise;
	    var isResolved = false;
	    var bitField = null;
	    for (var i = 0; i < len; ++i) {
	        var maybePromise = tryConvertToPromise(values[i], result);
	
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            bitField = maybePromise._bitField;
	        } else {
	            bitField = null;
	        }
	
	        if (isResolved) {
	            if (bitField !== null) {
	                maybePromise.suppressUnhandledRejections();
	            }
	        } else if (bitField !== null) {
	            if (((bitField & 50397184) === 0)) {
	                maybePromise._proxy(this, i);
	                this._values[i] = maybePromise;
	            } else if (((bitField & 33554432) !== 0)) {
	                isResolved = this._promiseFulfilled(maybePromise._value(), i);
	            } else if (((bitField & 16777216) !== 0)) {
	                isResolved = this._promiseRejected(maybePromise._reason(), i);
	            } else {
	                isResolved = this._promiseCancelled(i);
	            }
	        } else {
	            isResolved = this._promiseFulfilled(maybePromise, i);
	        }
	    }
	    if (!isResolved) result._setAsyncGuaranteed();
	};
	
	PromiseArray.prototype._isResolved = function () {
	    return this._values === null;
	};
	
	PromiseArray.prototype._resolve = function (value) {
	    this._values = null;
	    this._promise._fulfill(value);
	};
	
	PromiseArray.prototype._cancel = function() {
	    if (this._isResolved() || !this._promise._isCancellable()) return;
	    this._values = null;
	    this._promise._cancel();
	};
	
	PromiseArray.prototype._reject = function (reason) {
	    this._values = null;
	    this._promise._rejectCallback(reason, false);
	};
	
	PromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	        return true;
	    }
	    return false;
	};
	
	PromiseArray.prototype._promiseCancelled = function() {
	    this._cancel();
	    return true;
	};
	
	PromiseArray.prototype._promiseRejected = function (reason) {
	    this._totalResolved++;
	    this._reject(reason);
	    return true;
	};
	
	PromiseArray.prototype._resultCancelled = function() {
	    if (this._isResolved()) return;
	    var values = this._values;
	    this._cancel();
	    if (values instanceof Promise) {
	        values.cancel();
	    } else {
	        for (var i = 0; i < values.length; ++i) {
	            if (values[i] instanceof Promise) {
	                values[i].cancel();
	            }
	        }
	    }
	};
	
	PromiseArray.prototype.shouldCopyValues = function () {
	    return true;
	};
	
	PromiseArray.prototype.getActualLength = function (len) {
	    return len;
	};
	
	return PromiseArray;
	};
	
	},{"./util":36}],24:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var THIS = {};
	var util = _dereq_("./util");
	var nodebackForPromise = _dereq_("./nodeback");
	var withAppended = util.withAppended;
	var maybeWrapAsError = util.maybeWrapAsError;
	var canEvaluate = util.canEvaluate;
	var TypeError = _dereq_("./errors").TypeError;
	var defaultSuffix = "Async";
	var defaultPromisified = {__isPromisified__: true};
	var noCopyProps = [
	    "arity",    "length",
	    "name",
	    "arguments",
	    "caller",
	    "callee",
	    "prototype",
	    "__isPromisified__"
	];
	var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");
	
	var defaultFilter = function(name) {
	    return util.isIdentifier(name) &&
	        name.charAt(0) !== "_" &&
	        name !== "constructor";
	};
	
	function propsFilter(key) {
	    return !noCopyPropsPattern.test(key);
	}
	
	function isPromisified(fn) {
	    try {
	        return fn.__isPromisified__ === true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	
	function hasPromisified(obj, key, suffix) {
	    var val = util.getDataPropertyOrDefault(obj, key + suffix,
	                                            defaultPromisified);
	    return val ? isPromisified(val) : false;
	}
	function checkValid(ret, suffix, suffixRegexp) {
	    for (var i = 0; i < ret.length; i += 2) {
	        var key = ret[i];
	        if (suffixRegexp.test(key)) {
	            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	            for (var j = 0; j < ret.length; j += 2) {
	                if (ret[j] === keyWithoutAsyncSuffix) {
	                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
	                        .replace("%s", suffix));
	                }
	            }
	        }
	    }
	}
	
	function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
	    var keys = util.inheritedDataKeys(obj);
	    var ret = [];
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var value = obj[key];
	        var passesDefaultFilter = filter === defaultFilter
	            ? true : defaultFilter(key, value, obj);
	        if (typeof value === "function" &&
	            !isPromisified(value) &&
	            !hasPromisified(obj, key, suffix) &&
	            filter(key, value, obj, passesDefaultFilter)) {
	            ret.push(key, value);
	        }
	    }
	    checkValid(ret, suffix, suffixRegexp);
	    return ret;
	}
	
	var escapeIdentRegex = function(str) {
	    return str.replace(/([$])/, "\\$");
	};
	
	var makeNodePromisifiedEval;
	if (false) {
	var switchCaseArgumentOrder = function(likelyArgumentCount) {
	    var ret = [likelyArgumentCount];
	    var min = Math.max(0, likelyArgumentCount - 1 - 3);
	    for(var i = likelyArgumentCount - 1; i >= min; --i) {
	        ret.push(i);
	    }
	    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
	        ret.push(i);
	    }
	    return ret;
	};
	
	var argumentSequence = function(argumentCount) {
	    return util.filledRange(argumentCount, "_arg", "");
	};
	
	var parameterDeclaration = function(parameterCount) {
	    return util.filledRange(
	        Math.max(parameterCount, 3), "_arg", "");
	};
	
	var parameterCount = function(fn) {
	    if (typeof fn.length === "number") {
	        return Math.max(Math.min(fn.length, 1023 + 1), 0);
	    }
	    return 0;
	};
	
	makeNodePromisifiedEval =
	function(callback, receiver, originalName, fn, _, multiArgs) {
	    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	    var shouldProxyThis = typeof callback === "string" || receiver === THIS;
	
	    function generateCallForArgumentCount(count) {
	        var args = argumentSequence(count).join(", ");
	        var comma = count > 0 ? ", " : "";
	        var ret;
	        if (shouldProxyThis) {
	            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
	        } else {
	            ret = receiver === undefined
	                ? "ret = callback({{args}}, nodeback); break;\n"
	                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
	        }
	        return ret.replace("{{args}}", args).replace(", ", comma);
	    }
	
	    function generateArgumentSwitchCase() {
	        var ret = "";
	        for (var i = 0; i < argumentOrder.length; ++i) {
	            ret += "case " + argumentOrder[i] +":" +
	                generateCallForArgumentCount(argumentOrder[i]);
	        }
	
	        ret += "                                                             \n\
	        default:                                                             \n\
	            var args = new Array(len + 1);                                   \n\
	            var i = 0;                                                       \n\
	            for (var i = 0; i < len; ++i) {                                  \n\
	               args[i] = arguments[i];                                       \n\
	            }                                                                \n\
	            args[i] = nodeback;                                              \n\
	            [CodeForCall]                                                    \n\
	            break;                                                           \n\
	        ".replace("[CodeForCall]", (shouldProxyThis
	                                ? "ret = callback.apply(this, args);\n"
	                                : "ret = callback.apply(receiver, args);\n"));
	        return ret;
	    }
	
	    var getFunctionCode = typeof callback === "string"
	                                ? ("this != null ? this['"+callback+"'] : fn")
	                                : "fn";
	    var body = "'use strict';                                                \n\
	        var ret = function (Parameters) {                                    \n\
	            'use strict';                                                    \n\
	            var len = arguments.length;                                      \n\
	            var promise = new Promise(INTERNAL);                             \n\
	            promise._captureStackTrace();                                    \n\
	            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
	            var ret;                                                         \n\
	            var callback = tryCatch([GetFunctionCode]);                      \n\
	            switch(len) {                                                    \n\
	                [CodeForSwitchCase]                                          \n\
	            }                                                                \n\
	            if (ret === errorObj) {                                          \n\
	                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
	            }                                                                \n\
	            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
	            return promise;                                                  \n\
	        };                                                                   \n\
	        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
	        return ret;                                                          \n\
	    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
	        .replace("[GetFunctionCode]", getFunctionCode);
	    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
	    return new Function("Promise",
	                        "fn",
	                        "receiver",
	                        "withAppended",
	                        "maybeWrapAsError",
	                        "nodebackForPromise",
	                        "tryCatch",
	                        "errorObj",
	                        "notEnumerableProp",
	                        "INTERNAL",
	                        body)(
	                    Promise,
	                    fn,
	                    receiver,
	                    withAppended,
	                    maybeWrapAsError,
	                    nodebackForPromise,
	                    util.tryCatch,
	                    util.errorObj,
	                    util.notEnumerableProp,
	                    INTERNAL);
	};
	}
	
	function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
	    var defaultThis = (function() {return this;})();
	    var method = callback;
	    if (typeof method === "string") {
	        callback = fn;
	    }
	    function promisified() {
	        var _receiver = receiver;
	        if (receiver === THIS) _receiver = this;
	        var promise = new Promise(INTERNAL);
	        promise._captureStackTrace();
	        var cb = typeof method === "string" && this !== defaultThis
	            ? this[method] : callback;
	        var fn = nodebackForPromise(promise, multiArgs);
	        try {
	            cb.apply(_receiver, withAppended(arguments, fn));
	        } catch(e) {
	            promise._rejectCallback(maybeWrapAsError(e), true, true);
	        }
	        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
	        return promise;
	    }
	    util.notEnumerableProp(promisified, "__isPromisified__", true);
	    return promisified;
	}
	
	var makeNodePromisified = canEvaluate
	    ? makeNodePromisifiedEval
	    : makeNodePromisifiedClosure;
	
	function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
	    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	    var methods =
	        promisifiableMethods(obj, suffix, suffixRegexp, filter);
	
	    for (var i = 0, len = methods.length; i < len; i+= 2) {
	        var key = methods[i];
	        var fn = methods[i+1];
	        var promisifiedKey = key + suffix;
	        if (promisifier === makeNodePromisified) {
	            obj[promisifiedKey] =
	                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
	        } else {
	            var promisified = promisifier(fn, function() {
	                return makeNodePromisified(key, THIS, key,
	                                           fn, suffix, multiArgs);
	            });
	            util.notEnumerableProp(promisified, "__isPromisified__", true);
	            obj[promisifiedKey] = promisified;
	        }
	    }
	    util.toFastProperties(obj);
	    return obj;
	}
	
	function promisify(callback, receiver, multiArgs) {
	    return makeNodePromisified(callback, receiver, undefined,
	                                callback, null, multiArgs);
	}
	
	Promise.promisify = function (fn, options) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    if (isPromisified(fn)) {
	        return fn;
	    }
	    options = Object(options);
	    var receiver = options.context === undefined ? THIS : options.context;
	    var multiArgs = !!options.multiArgs;
	    var ret = promisify(fn, receiver, multiArgs);
	    util.copyDescriptors(fn, ret, propsFilter);
	    return ret;
	};
	
	Promise.promisifyAll = function (target, options) {
	    if (typeof target !== "function" && typeof target !== "object") {
	        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    options = Object(options);
	    var multiArgs = !!options.multiArgs;
	    var suffix = options.suffix;
	    if (typeof suffix !== "string") suffix = defaultSuffix;
	    var filter = options.filter;
	    if (typeof filter !== "function") filter = defaultFilter;
	    var promisifier = options.promisifier;
	    if (typeof promisifier !== "function") promisifier = makeNodePromisified;
	
	    if (!util.isIdentifier(suffix)) {
	        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	
	    var keys = util.inheritedDataKeys(target);
	    for (var i = 0; i < keys.length; ++i) {
	        var value = target[keys[i]];
	        if (keys[i] !== "constructor" &&
	            util.isClass(value)) {
	            promisifyAll(value.prototype, suffix, filter, promisifier,
	                multiArgs);
	            promisifyAll(value, suffix, filter, promisifier, multiArgs);
	        }
	    }
	
	    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
	};
	};
	
	
	},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(
	    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
	var util = _dereq_("./util");
	var isObject = util.isObject;
	var es5 = _dereq_("./es5");
	var Es6Map;
	if (typeof Map === "function") Es6Map = Map;
	
	var mapToEntries = (function() {
	    var index = 0;
	    var size = 0;
	
	    function extractEntry(value, key) {
	        this[index] = value;
	        this[index + size] = key;
	        index++;
	    }
	
	    return function mapToEntries(map) {
	        size = map.size;
	        index = 0;
	        var ret = new Array(map.size * 2);
	        map.forEach(extractEntry, ret);
	        return ret;
	    };
	})();
	
	var entriesToMap = function(entries) {
	    var ret = new Es6Map();
	    var length = entries.length / 2 | 0;
	    for (var i = 0; i < length; ++i) {
	        var key = entries[length + i];
	        var value = entries[i];
	        ret.set(key, value);
	    }
	    return ret;
	};
	
	function PropertiesPromiseArray(obj) {
	    var isMap = false;
	    var entries;
	    if (Es6Map !== undefined && obj instanceof Es6Map) {
	        entries = mapToEntries(obj);
	        isMap = true;
	    } else {
	        var keys = es5.keys(obj);
	        var len = keys.length;
	        entries = new Array(len * 2);
	        for (var i = 0; i < len; ++i) {
	            var key = keys[i];
	            entries[i] = obj[key];
	            entries[i + len] = key;
	        }
	    }
	    this.constructor$(entries);
	    this._isMap = isMap;
	    this._init$(undefined, -3);
	}
	util.inherits(PropertiesPromiseArray, PromiseArray);
	
	PropertiesPromiseArray.prototype._init = function () {};
	
	PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        var val;
	        if (this._isMap) {
	            val = entriesToMap(this._values);
	        } else {
	            val = {};
	            var keyOffset = this.length();
	            for (var i = 0, len = this.length(); i < len; ++i) {
	                val[this._values[i + keyOffset]] = this._values[i];
	            }
	        }
	        this._resolve(val);
	        return true;
	    }
	    return false;
	};
	
	PropertiesPromiseArray.prototype.shouldCopyValues = function () {
	    return false;
	};
	
	PropertiesPromiseArray.prototype.getActualLength = function (len) {
	    return len >> 1;
	};
	
	function props(promises) {
	    var ret;
	    var castValue = tryConvertToPromise(promises);
	
	    if (!isObject(castValue)) {
	        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    } else if (castValue instanceof Promise) {
	        ret = castValue._then(
	            Promise.props, undefined, undefined, undefined, undefined);
	    } else {
	        ret = new PropertiesPromiseArray(castValue).promise();
	    }
	
	    if (castValue instanceof Promise) {
	        ret._propagateFrom(castValue, 2);
	    }
	    return ret;
	}
	
	Promise.prototype.props = function () {
	    return props(this);
	};
	
	Promise.props = function (promises) {
	    return props(promises);
	};
	};
	
	},{"./es5":13,"./util":36}],26:[function(_dereq_,module,exports){
	"use strict";
	function arrayMove(src, srcIndex, dst, dstIndex, len) {
	    for (var j = 0; j < len; ++j) {
	        dst[j + dstIndex] = src[j + srcIndex];
	        src[j + srcIndex] = void 0;
	    }
	}
	
	function Queue(capacity) {
	    this._capacity = capacity;
	    this._length = 0;
	    this._front = 0;
	}
	
	Queue.prototype._willBeOverCapacity = function (size) {
	    return this._capacity < size;
	};
	
	Queue.prototype._pushOne = function (arg) {
	    var length = this.length();
	    this._checkCapacity(length + 1);
	    var i = (this._front + length) & (this._capacity - 1);
	    this[i] = arg;
	    this._length = length + 1;
	};
	
	Queue.prototype._unshiftOne = function(value) {
	    var capacity = this._capacity;
	    this._checkCapacity(this.length() + 1);
	    var front = this._front;
	    var i = (((( front - 1 ) &
	                    ( capacity - 1) ) ^ capacity ) - capacity );
	    this[i] = value;
	    this._front = i;
	    this._length = this.length() + 1;
	};
	
	Queue.prototype.unshift = function(fn, receiver, arg) {
	    this._unshiftOne(arg);
	    this._unshiftOne(receiver);
	    this._unshiftOne(fn);
	};
	
	Queue.prototype.push = function (fn, receiver, arg) {
	    var length = this.length() + 3;
	    if (this._willBeOverCapacity(length)) {
	        this._pushOne(fn);
	        this._pushOne(receiver);
	        this._pushOne(arg);
	        return;
	    }
	    var j = this._front + length - 3;
	    this._checkCapacity(length);
	    var wrapMask = this._capacity - 1;
	    this[(j + 0) & wrapMask] = fn;
	    this[(j + 1) & wrapMask] = receiver;
	    this[(j + 2) & wrapMask] = arg;
	    this._length = length;
	};
	
	Queue.prototype.shift = function () {
	    var front = this._front,
	        ret = this[front];
	
	    this[front] = undefined;
	    this._front = (front + 1) & (this._capacity - 1);
	    this._length--;
	    return ret;
	};
	
	Queue.prototype.length = function () {
	    return this._length;
	};
	
	Queue.prototype._checkCapacity = function (size) {
	    if (this._capacity < size) {
	        this._resizeTo(this._capacity << 1);
	    }
	};
	
	Queue.prototype._resizeTo = function (capacity) {
	    var oldCapacity = this._capacity;
	    this._capacity = capacity;
	    var front = this._front;
	    var length = this._length;
	    var moveItemsCount = (front + length) & (oldCapacity - 1);
	    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
	};
	
	module.exports = Queue;
	
	},{}],27:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(
	    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	var util = _dereq_("./util");
	
	var raceLater = function (promise) {
	    return promise.then(function(array) {
	        return race(array, promise);
	    });
	};
	
	function race(promises, parent) {
	    var maybePromise = tryConvertToPromise(promises);
	
	    if (maybePromise instanceof Promise) {
	        return raceLater(maybePromise);
	    } else {
	        promises = util.asArray(promises);
	        if (promises === null)
	            return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
	    }
	
	    var ret = new Promise(INTERNAL);
	    if (parent !== undefined) {
	        ret._propagateFrom(parent, 3);
	    }
	    var fulfill = ret._fulfill;
	    var reject = ret._reject;
	    for (var i = 0, len = promises.length; i < len; ++i) {
	        var val = promises[i];
	
	        if (val === undefined && !(i in promises)) {
	            continue;
	        }
	
	        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
	    }
	    return ret;
	}
	
	Promise.race = function (promises) {
	    return race(promises, undefined);
	};
	
	Promise.prototype.race = function () {
	    return race(this, undefined);
	};
	
	};
	
	},{"./util":36}],28:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL,
	                          debug) {
	var getDomain = Promise._getDomain;
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;
	
	function ReductionPromiseArray(promises, fn, initialValue, _each) {
	    this.constructor$(promises);
	    var domain = getDomain();
	    this._fn = domain === null ? fn : util.domainBind(domain, fn);
	    if (initialValue !== undefined) {
	        initialValue = Promise.resolve(initialValue);
	        initialValue._attachCancellationCallback(this);
	    }
	    this._initialValue = initialValue;
	    this._currentCancellable = null;
	    if(_each === INTERNAL) {
	        this._eachValues = Array(this._length);
	    } else if (_each === 0) {
	        this._eachValues = null;
	    } else {
	        this._eachValues = undefined;
	    }
	    this._promise._captureStackTrace();
	    this._init$(undefined, -5);
	}
	util.inherits(ReductionPromiseArray, PromiseArray);
	
	ReductionPromiseArray.prototype._gotAccum = function(accum) {
	    if (this._eachValues !== undefined && 
	        this._eachValues !== null && 
	        accum !== INTERNAL) {
	        this._eachValues.push(accum);
	    }
	};
	
	ReductionPromiseArray.prototype._eachComplete = function(value) {
	    if (this._eachValues !== null) {
	        this._eachValues.push(value);
	    }
	    return this._eachValues;
	};
	
	ReductionPromiseArray.prototype._init = function() {};
	
	ReductionPromiseArray.prototype._resolveEmptyArray = function() {
	    this._resolve(this._eachValues !== undefined ? this._eachValues
	                                                 : this._initialValue);
	};
	
	ReductionPromiseArray.prototype.shouldCopyValues = function () {
	    return false;
	};
	
	ReductionPromiseArray.prototype._resolve = function(value) {
	    this._promise._resolveCallback(value);
	    this._values = null;
	};
	
	ReductionPromiseArray.prototype._resultCancelled = function(sender) {
	    if (sender === this._initialValue) return this._cancel();
	    if (this._isResolved()) return;
	    this._resultCancelled$();
	    if (this._currentCancellable instanceof Promise) {
	        this._currentCancellable.cancel();
	    }
	    if (this._initialValue instanceof Promise) {
	        this._initialValue.cancel();
	    }
	};
	
	ReductionPromiseArray.prototype._iterate = function (values) {
	    this._values = values;
	    var value;
	    var i;
	    var length = values.length;
	    if (this._initialValue !== undefined) {
	        value = this._initialValue;
	        i = 0;
	    } else {
	        value = Promise.resolve(values[0]);
	        i = 1;
	    }
	
	    this._currentCancellable = value;
	
	    if (!value.isRejected()) {
	        for (; i < length; ++i) {
	            var ctx = {
	                accum: null,
	                value: values[i],
	                index: i,
	                length: length,
	                array: this
	            };
	            value = value._then(gotAccum, undefined, undefined, ctx, undefined);
	        }
	    }
	
	    if (this._eachValues !== undefined) {
	        value = value
	            ._then(this._eachComplete, undefined, undefined, this, undefined);
	    }
	    value._then(completed, completed, undefined, value, this);
	};
	
	Promise.prototype.reduce = function (fn, initialValue) {
	    return reduce(this, fn, initialValue, null);
	};
	
	Promise.reduce = function (promises, fn, initialValue, _each) {
	    return reduce(promises, fn, initialValue, _each);
	};
	
	function completed(valueOrReason, array) {
	    if (this.isFulfilled()) {
	        array._resolve(valueOrReason);
	    } else {
	        array._reject(valueOrReason);
	    }
	}
	
	function reduce(promises, fn, initialValue, _each) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	    return array.promise();
	}
	
	function gotAccum(accum) {
	    this.accum = accum;
	    this.array._gotAccum(accum);
	    var value = tryConvertToPromise(this.value, this.array._promise);
	    if (value instanceof Promise) {
	        this.array._currentCancellable = value;
	        return value._then(gotValue, undefined, undefined, this, undefined);
	    } else {
	        return gotValue.call(this, value);
	    }
	}
	
	function gotValue(value) {
	    var array = this.array;
	    var promise = array._promise;
	    var fn = tryCatch(array._fn);
	    promise._pushContext();
	    var ret;
	    if (array._eachValues !== undefined) {
	        ret = fn.call(promise._boundValue(), value, this.index, this.length);
	    } else {
	        ret = fn.call(promise._boundValue(),
	                              this.accum, value, this.index, this.length);
	    }
	    if (ret instanceof Promise) {
	        array._currentCancellable = ret;
	    }
	    var promiseCreated = promise._popContext();
	    debug.checkForgottenReturns(
	        ret,
	        promiseCreated,
	        array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
	        promise
	    );
	    return ret;
	}
	};
	
	},{"./util":36}],29:[function(_dereq_,module,exports){
	"use strict";
	var util = _dereq_("./util");
	var schedule;
	var noAsyncScheduler = function() {
	    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	};
	var NativePromise = util.getNativePromise();
	if (util.isNode && typeof MutationObserver === "undefined") {
	    var GlobalSetImmediate = global.setImmediate;
	    var ProcessNextTick = process.nextTick;
	    schedule = util.isRecentNode
	                ? function(fn) { GlobalSetImmediate.call(global, fn); }
	                : function(fn) { ProcessNextTick.call(process, fn); };
	} else if (typeof NativePromise === "function" &&
	           typeof NativePromise.resolve === "function") {
	    var nativePromise = NativePromise.resolve();
	    schedule = function(fn) {
	        nativePromise.then(fn);
	    };
	} else if ((typeof MutationObserver !== "undefined") &&
	          !(typeof window !== "undefined" &&
	            window.navigator &&
	            (window.navigator.standalone || window.cordova))) {
	    schedule = (function() {
	        var div = document.createElement("div");
	        var opts = {attributes: true};
	        var toggleScheduled = false;
	        var div2 = document.createElement("div");
	        var o2 = new MutationObserver(function() {
	            div.classList.toggle("foo");
	            toggleScheduled = false;
	        });
	        o2.observe(div2, opts);
	
	        var scheduleToggle = function() {
	            if (toggleScheduled) return;
	                toggleScheduled = true;
	                div2.classList.toggle("foo");
	            };
	
	            return function schedule(fn) {
	            var o = new MutationObserver(function() {
	                o.disconnect();
	                fn();
	            });
	            o.observe(div, opts);
	            scheduleToggle();
	        };
	    })();
	} else if (typeof setImmediate !== "undefined") {
	    schedule = function (fn) {
	        setImmediate(fn);
	    };
	} else if (typeof setTimeout !== "undefined") {
	    schedule = function (fn) {
	        setTimeout(fn, 0);
	    };
	} else {
	    schedule = noAsyncScheduler;
	}
	module.exports = schedule;
	
	},{"./util":36}],30:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	    function(Promise, PromiseArray, debug) {
	var PromiseInspection = Promise.PromiseInspection;
	var util = _dereq_("./util");
	
	function SettledPromiseArray(values) {
	    this.constructor$(values);
	}
	util.inherits(SettledPromiseArray, PromiseArray);
	
	SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
	    this._values[index] = inspection;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	        return true;
	    }
	    return false;
	};
	
	SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 33554432;
	    ret._settledValueField = value;
	    return this._promiseResolved(index, ret);
	};
	SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 16777216;
	    ret._settledValueField = reason;
	    return this._promiseResolved(index, ret);
	};
	
	Promise.settle = function (promises) {
	    debug.deprecated(".settle()", ".reflect()");
	    return new SettledPromiseArray(promises).promise();
	};
	
	Promise.prototype.settle = function () {
	    return Promise.settle(this);
	};
	};
	
	},{"./util":36}],31:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, PromiseArray, apiRejection) {
	var util = _dereq_("./util");
	var RangeError = _dereq_("./errors").RangeError;
	var AggregateError = _dereq_("./errors").AggregateError;
	var isArray = util.isArray;
	var CANCELLATION = {};
	
	
	function SomePromiseArray(values) {
	    this.constructor$(values);
	    this._howMany = 0;
	    this._unwrap = false;
	    this._initialized = false;
	}
	util.inherits(SomePromiseArray, PromiseArray);
	
	SomePromiseArray.prototype._init = function () {
	    if (!this._initialized) {
	        return;
	    }
	    if (this._howMany === 0) {
	        this._resolve([]);
	        return;
	    }
	    this._init$(undefined, -5);
	    var isArrayResolved = isArray(this._values);
	    if (!this._isResolved() &&
	        isArrayResolved &&
	        this._howMany > this._canPossiblyFulfill()) {
	        this._reject(this._getRangeError(this.length()));
	    }
	};
	
	SomePromiseArray.prototype.init = function () {
	    this._initialized = true;
	    this._init();
	};
	
	SomePromiseArray.prototype.setUnwrap = function () {
	    this._unwrap = true;
	};
	
	SomePromiseArray.prototype.howMany = function () {
	    return this._howMany;
	};
	
	SomePromiseArray.prototype.setHowMany = function (count) {
	    this._howMany = count;
	};
	
	SomePromiseArray.prototype._promiseFulfilled = function (value) {
	    this._addFulfilled(value);
	    if (this._fulfilled() === this.howMany()) {
	        this._values.length = this.howMany();
	        if (this.howMany() === 1 && this._unwrap) {
	            this._resolve(this._values[0]);
	        } else {
	            this._resolve(this._values);
	        }
	        return true;
	    }
	    return false;
	
	};
	SomePromiseArray.prototype._promiseRejected = function (reason) {
	    this._addRejected(reason);
	    return this._checkOutcome();
	};
	
	SomePromiseArray.prototype._promiseCancelled = function () {
	    if (this._values instanceof Promise || this._values == null) {
	        return this._cancel();
	    }
	    this._addRejected(CANCELLATION);
	    return this._checkOutcome();
	};
	
	SomePromiseArray.prototype._checkOutcome = function() {
	    if (this.howMany() > this._canPossiblyFulfill()) {
	        var e = new AggregateError();
	        for (var i = this.length(); i < this._values.length; ++i) {
	            if (this._values[i] !== CANCELLATION) {
	                e.push(this._values[i]);
	            }
	        }
	        if (e.length > 0) {
	            this._reject(e);
	        } else {
	            this._cancel();
	        }
	        return true;
	    }
	    return false;
	};
	
	SomePromiseArray.prototype._fulfilled = function () {
	    return this._totalResolved;
	};
	
	SomePromiseArray.prototype._rejected = function () {
	    return this._values.length - this.length();
	};
	
	SomePromiseArray.prototype._addRejected = function (reason) {
	    this._values.push(reason);
	};
	
	SomePromiseArray.prototype._addFulfilled = function (value) {
	    this._values[this._totalResolved++] = value;
	};
	
	SomePromiseArray.prototype._canPossiblyFulfill = function () {
	    return this.length() - this._rejected();
	};
	
	SomePromiseArray.prototype._getRangeError = function (count) {
	    var message = "Input array must contain at least " +
	            this._howMany + " items but contains only " + count + " items";
	    return new RangeError(message);
	};
	
	SomePromiseArray.prototype._resolveEmptyArray = function () {
	    this._reject(this._getRangeError(0));
	};
	
	function some(promises, howMany) {
	    if ((howMany | 0) !== howMany || howMany < 0) {
	        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(howMany);
	    ret.init();
	    return promise;
	}
	
	Promise.some = function (promises, howMany) {
	    return some(promises, howMany);
	};
	
	Promise.prototype.some = function (howMany) {
	    return some(this, howMany);
	};
	
	Promise._SomePromiseArray = SomePromiseArray;
	};
	
	},{"./errors":12,"./util":36}],32:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	function PromiseInspection(promise) {
	    if (promise !== undefined) {
	        promise = promise._target();
	        this._bitField = promise._bitField;
	        this._settledValueField = promise._isFateSealed()
	            ? promise._settledValue() : undefined;
	    }
	    else {
	        this._bitField = 0;
	        this._settledValueField = undefined;
	    }
	}
	
	PromiseInspection.prototype._settledValue = function() {
	    return this._settledValueField;
	};
	
	var value = PromiseInspection.prototype.value = function () {
	    if (!this.isFulfilled()) {
	        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    return this._settledValue();
	};
	
	var reason = PromiseInspection.prototype.error =
	PromiseInspection.prototype.reason = function () {
	    if (!this.isRejected()) {
	        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    return this._settledValue();
	};
	
	var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
	    return (this._bitField & 33554432) !== 0;
	};
	
	var isRejected = PromiseInspection.prototype.isRejected = function () {
	    return (this._bitField & 16777216) !== 0;
	};
	
	var isPending = PromiseInspection.prototype.isPending = function () {
	    return (this._bitField & 50397184) === 0;
	};
	
	var isResolved = PromiseInspection.prototype.isResolved = function () {
	    return (this._bitField & 50331648) !== 0;
	};
	
	PromiseInspection.prototype.isCancelled = function() {
	    return (this._bitField & 8454144) !== 0;
	};
	
	Promise.prototype.__isCancelled = function() {
	    return (this._bitField & 65536) === 65536;
	};
	
	Promise.prototype._isCancelled = function() {
	    return this._target().__isCancelled();
	};
	
	Promise.prototype.isCancelled = function() {
	    return (this._target()._bitField & 8454144) !== 0;
	};
	
	Promise.prototype.isPending = function() {
	    return isPending.call(this._target());
	};
	
	Promise.prototype.isRejected = function() {
	    return isRejected.call(this._target());
	};
	
	Promise.prototype.isFulfilled = function() {
	    return isFulfilled.call(this._target());
	};
	
	Promise.prototype.isResolved = function() {
	    return isResolved.call(this._target());
	};
	
	Promise.prototype.value = function() {
	    return value.call(this._target());
	};
	
	Promise.prototype.reason = function() {
	    var target = this._target();
	    target._unsetRejectionIsUnhandled();
	    return reason.call(target);
	};
	
	Promise.prototype._value = function() {
	    return this._settledValue();
	};
	
	Promise.prototype._reason = function() {
	    this._unsetRejectionIsUnhandled();
	    return this._settledValue();
	};
	
	Promise.PromiseInspection = PromiseInspection;
	};
	
	},{}],33:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var util = _dereq_("./util");
	var errorObj = util.errorObj;
	var isObject = util.isObject;
	
	function tryConvertToPromise(obj, context) {
	    if (isObject(obj)) {
	        if (obj instanceof Promise) return obj;
	        var then = getThen(obj);
	        if (then === errorObj) {
	            if (context) context._pushContext();
	            var ret = Promise.reject(then.e);
	            if (context) context._popContext();
	            return ret;
	        } else if (typeof then === "function") {
	            if (isAnyBluebirdPromise(obj)) {
	                var ret = new Promise(INTERNAL);
	                obj._then(
	                    ret._fulfill,
	                    ret._reject,
	                    undefined,
	                    ret,
	                    null
	                );
	                return ret;
	            }
	            return doThenable(obj, then, context);
	        }
	    }
	    return obj;
	}
	
	function doGetThen(obj) {
	    return obj.then;
	}
	
	function getThen(obj) {
	    try {
	        return doGetThen(obj);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}
	
	var hasProp = {}.hasOwnProperty;
	function isAnyBluebirdPromise(obj) {
	    try {
	        return hasProp.call(obj, "_promise0");
	    } catch (e) {
	        return false;
	    }
	}
	
	function doThenable(x, then, context) {
	    var promise = new Promise(INTERNAL);
	    var ret = promise;
	    if (context) context._pushContext();
	    promise._captureStackTrace();
	    if (context) context._popContext();
	    var synchronous = true;
	    var result = util.tryCatch(then).call(x, resolve, reject);
	    synchronous = false;
	
	    if (promise && result === errorObj) {
	        promise._rejectCallback(result.e, true, true);
	        promise = null;
	    }
	
	    function resolve(value) {
	        if (!promise) return;
	        promise._resolveCallback(value);
	        promise = null;
	    }
	
	    function reject(reason) {
	        if (!promise) return;
	        promise._rejectCallback(reason, synchronous, true);
	        promise = null;
	    }
	    return ret;
	}
	
	return tryConvertToPromise;
	};
	
	},{"./util":36}],34:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, debug) {
	var util = _dereq_("./util");
	var TimeoutError = Promise.TimeoutError;
	
	function HandleWrapper(handle)  {
	    this.handle = handle;
	}
	
	HandleWrapper.prototype._resultCancelled = function() {
	    clearTimeout(this.handle);
	};
	
	var afterValue = function(value) { return delay(+this).thenReturn(value); };
	var delay = Promise.delay = function (ms, value) {
	    var ret;
	    var handle;
	    if (value !== undefined) {
	        ret = Promise.resolve(value)
	                ._then(afterValue, null, null, ms, undefined);
	        if (debug.cancellation() && value instanceof Promise) {
	            ret._setOnCancel(value);
	        }
	    } else {
	        ret = new Promise(INTERNAL);
	        handle = setTimeout(function() { ret._fulfill(); }, +ms);
	        if (debug.cancellation()) {
	            ret._setOnCancel(new HandleWrapper(handle));
	        }
	        ret._captureStackTrace();
	    }
	    ret._setAsyncGuaranteed();
	    return ret;
	};
	
	Promise.prototype.delay = function (ms) {
	    return delay(ms, this);
	};
	
	var afterTimeout = function (promise, message, parent) {
	    var err;
	    if (typeof message !== "string") {
	        if (message instanceof Error) {
	            err = message;
	        } else {
	            err = new TimeoutError("operation timed out");
	        }
	    } else {
	        err = new TimeoutError(message);
	    }
	    util.markAsOriginatingFromRejection(err);
	    promise._attachExtraTrace(err);
	    promise._reject(err);
	
	    if (parent != null) {
	        parent.cancel();
	    }
	};
	
	function successClear(value) {
	    clearTimeout(this.handle);
	    return value;
	}
	
	function failureClear(reason) {
	    clearTimeout(this.handle);
	    throw reason;
	}
	
	Promise.prototype.timeout = function (ms, message) {
	    ms = +ms;
	    var ret, parent;
	
	    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
	        if (ret.isPending()) {
	            afterTimeout(ret, message, parent);
	        }
	    }, ms));
	
	    if (debug.cancellation()) {
	        parent = this.then();
	        ret = parent._then(successClear, failureClear,
	                            undefined, handleWrapper, undefined);
	        ret._setOnCancel(handleWrapper);
	    } else {
	        ret = this._then(successClear, failureClear,
	                            undefined, handleWrapper, undefined);
	    }
	
	    return ret;
	};
	
	};
	
	},{"./util":36}],35:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function (Promise, apiRejection, tryConvertToPromise,
	    createContext, INTERNAL, debug) {
	    var util = _dereq_("./util");
	    var TypeError = _dereq_("./errors").TypeError;
	    var inherits = _dereq_("./util").inherits;
	    var errorObj = util.errorObj;
	    var tryCatch = util.tryCatch;
	    var NULL = {};
	
	    function thrower(e) {
	        setTimeout(function(){throw e;}, 0);
	    }
	
	    function castPreservingDisposable(thenable) {
	        var maybePromise = tryConvertToPromise(thenable);
	        if (maybePromise !== thenable &&
	            typeof thenable._isDisposable === "function" &&
	            typeof thenable._getDisposer === "function" &&
	            thenable._isDisposable()) {
	            maybePromise._setDisposable(thenable._getDisposer());
	        }
	        return maybePromise;
	    }
	    function dispose(resources, inspection) {
	        var i = 0;
	        var len = resources.length;
	        var ret = new Promise(INTERNAL);
	        function iterator() {
	            if (i >= len) return ret._fulfill();
	            var maybePromise = castPreservingDisposable(resources[i++]);
	            if (maybePromise instanceof Promise &&
	                maybePromise._isDisposable()) {
	                try {
	                    maybePromise = tryConvertToPromise(
	                        maybePromise._getDisposer().tryDispose(inspection),
	                        resources.promise);
	                } catch (e) {
	                    return thrower(e);
	                }
	                if (maybePromise instanceof Promise) {
	                    return maybePromise._then(iterator, thrower,
	                                              null, null, null);
	                }
	            }
	            iterator();
	        }
	        iterator();
	        return ret;
	    }
	
	    function Disposer(data, promise, context) {
	        this._data = data;
	        this._promise = promise;
	        this._context = context;
	    }
	
	    Disposer.prototype.data = function () {
	        return this._data;
	    };
	
	    Disposer.prototype.promise = function () {
	        return this._promise;
	    };
	
	    Disposer.prototype.resource = function () {
	        if (this.promise().isFulfilled()) {
	            return this.promise().value();
	        }
	        return NULL;
	    };
	
	    Disposer.prototype.tryDispose = function(inspection) {
	        var resource = this.resource();
	        var context = this._context;
	        if (context !== undefined) context._pushContext();
	        var ret = resource !== NULL
	            ? this.doDispose(resource, inspection) : null;
	        if (context !== undefined) context._popContext();
	        this._promise._unsetDisposable();
	        this._data = null;
	        return ret;
	    };
	
	    Disposer.isDisposer = function (d) {
	        return (d != null &&
	                typeof d.resource === "function" &&
	                typeof d.tryDispose === "function");
	    };
	
	    function FunctionDisposer(fn, promise, context) {
	        this.constructor$(fn, promise, context);
	    }
	    inherits(FunctionDisposer, Disposer);
	
	    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
	        var fn = this.data();
	        return fn.call(resource, resource, inspection);
	    };
	
	    function maybeUnwrapDisposer(value) {
	        if (Disposer.isDisposer(value)) {
	            this.resources[this.index]._setDisposable(value);
	            return value.promise();
	        }
	        return value;
	    }
	
	    function ResourceList(length) {
	        this.length = length;
	        this.promise = null;
	        this[length-1] = null;
	    }
	
	    ResourceList.prototype._resultCancelled = function() {
	        var len = this.length;
	        for (var i = 0; i < len; ++i) {
	            var item = this[i];
	            if (item instanceof Promise) {
	                item.cancel();
	            }
	        }
	    };
	
	    Promise.using = function () {
	        var len = arguments.length;
	        if (len < 2) return apiRejection(
	                        "you must pass at least 2 arguments to Promise.using");
	        var fn = arguments[len - 1];
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	        var input;
	        var spreadArgs = true;
	        if (len === 2 && Array.isArray(arguments[0])) {
	            input = arguments[0];
	            len = input.length;
	            spreadArgs = false;
	        } else {
	            input = arguments;
	            len--;
	        }
	        var resources = new ResourceList(len);
	        for (var i = 0; i < len; ++i) {
	            var resource = input[i];
	            if (Disposer.isDisposer(resource)) {
	                var disposer = resource;
	                resource = resource.promise();
	                resource._setDisposable(disposer);
	            } else {
	                var maybePromise = tryConvertToPromise(resource);
	                if (maybePromise instanceof Promise) {
	                    resource =
	                        maybePromise._then(maybeUnwrapDisposer, null, null, {
	                            resources: resources,
	                            index: i
	                    }, undefined);
	                }
	            }
	            resources[i] = resource;
	        }
	
	        var reflectedResources = new Array(resources.length);
	        for (var i = 0; i < reflectedResources.length; ++i) {
	            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
	        }
	
	        var resultPromise = Promise.all(reflectedResources)
	            .then(function(inspections) {
	                for (var i = 0; i < inspections.length; ++i) {
	                    var inspection = inspections[i];
	                    if (inspection.isRejected()) {
	                        errorObj.e = inspection.error();
	                        return errorObj;
	                    } else if (!inspection.isFulfilled()) {
	                        resultPromise.cancel();
	                        return;
	                    }
	                    inspections[i] = inspection.value();
	                }
	                promise._pushContext();
	
	                fn = tryCatch(fn);
	                var ret = spreadArgs
	                    ? fn.apply(undefined, inspections) : fn(inspections);
	                var promiseCreated = promise._popContext();
	                debug.checkForgottenReturns(
	                    ret, promiseCreated, "Promise.using", promise);
	                return ret;
	            });
	
	        var promise = resultPromise.lastly(function() {
	            var inspection = new Promise.PromiseInspection(resultPromise);
	            return dispose(resources, inspection);
	        });
	        resources.promise = promise;
	        promise._setOnCancel(resources);
	        return promise;
	    };
	
	    Promise.prototype._setDisposable = function (disposer) {
	        this._bitField = this._bitField | 131072;
	        this._disposer = disposer;
	    };
	
	    Promise.prototype._isDisposable = function () {
	        return (this._bitField & 131072) > 0;
	    };
	
	    Promise.prototype._getDisposer = function () {
	        return this._disposer;
	    };
	
	    Promise.prototype._unsetDisposable = function () {
	        this._bitField = this._bitField & (~131072);
	        this._disposer = undefined;
	    };
	
	    Promise.prototype.disposer = function (fn) {
	        if (typeof fn === "function") {
	            return new FunctionDisposer(fn, this, createContext());
	        }
	        throw new TypeError();
	    };
	
	};
	
	},{"./errors":12,"./util":36}],36:[function(_dereq_,module,exports){
	"use strict";
	var es5 = _dereq_("./es5");
	var canEvaluate = typeof navigator == "undefined";
	
	var errorObj = {e: {}};
	var tryCatchTarget;
	var globalObject = typeof self !== "undefined" ? self :
	    typeof window !== "undefined" ? window :
	    typeof global !== "undefined" ? global :
	    this !== undefined ? this : null;
	
	function tryCatcher() {
	    try {
	        var target = tryCatchTarget;
	        tryCatchTarget = null;
	        return target.apply(this, arguments);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	
	var inherits = function(Child, Parent) {
	    var hasProp = {}.hasOwnProperty;
	
	    function T() {
	        this.constructor = Child;
	        this.constructor$ = Parent;
	        for (var propertyName in Parent.prototype) {
	            if (hasProp.call(Parent.prototype, propertyName) &&
	                propertyName.charAt(propertyName.length-1) !== "$"
	           ) {
	                this[propertyName + "$"] = Parent.prototype[propertyName];
	            }
	        }
	    }
	    T.prototype = Parent.prototype;
	    Child.prototype = new T();
	    return Child.prototype;
	};
	
	
	function isPrimitive(val) {
	    return val == null || val === true || val === false ||
	        typeof val === "string" || typeof val === "number";
	
	}
	
	function isObject(value) {
	    return typeof value === "function" ||
	           typeof value === "object" && value !== null;
	}
	
	function maybeWrapAsError(maybeError) {
	    if (!isPrimitive(maybeError)) return maybeError;
	
	    return new Error(safeToString(maybeError));
	}
	
	function withAppended(target, appendee) {
	    var len = target.length;
	    var ret = new Array(len + 1);
	    var i;
	    for (i = 0; i < len; ++i) {
	        ret[i] = target[i];
	    }
	    ret[i] = appendee;
	    return ret;
	}
	
	function getDataPropertyOrDefault(obj, key, defaultValue) {
	    if (es5.isES5) {
	        var desc = Object.getOwnPropertyDescriptor(obj, key);
	
	        if (desc != null) {
	            return desc.get == null && desc.set == null
	                    ? desc.value
	                    : defaultValue;
	        }
	    } else {
	        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
	    }
	}
	
	function notEnumerableProp(obj, name, value) {
	    if (isPrimitive(obj)) return obj;
	    var descriptor = {
	        value: value,
	        configurable: true,
	        enumerable: false,
	        writable: true
	    };
	    es5.defineProperty(obj, name, descriptor);
	    return obj;
	}
	
	function thrower(r) {
	    throw r;
	}
	
	var inheritedDataKeys = (function() {
	    var excludedPrototypes = [
	        Array.prototype,
	        Object.prototype,
	        Function.prototype
	    ];
	
	    var isExcludedProto = function(val) {
	        for (var i = 0; i < excludedPrototypes.length; ++i) {
	            if (excludedPrototypes[i] === val) {
	                return true;
	            }
	        }
	        return false;
	    };
	
	    if (es5.isES5) {
	        var getKeys = Object.getOwnPropertyNames;
	        return function(obj) {
	            var ret = [];
	            var visitedKeys = Object.create(null);
	            while (obj != null && !isExcludedProto(obj)) {
	                var keys;
	                try {
	                    keys = getKeys(obj);
	                } catch (e) {
	                    return ret;
	                }
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (visitedKeys[key]) continue;
	                    visitedKeys[key] = true;
	                    var desc = Object.getOwnPropertyDescriptor(obj, key);
	                    if (desc != null && desc.get == null && desc.set == null) {
	                        ret.push(key);
	                    }
	                }
	                obj = es5.getPrototypeOf(obj);
	            }
	            return ret;
	        };
	    } else {
	        var hasProp = {}.hasOwnProperty;
	        return function(obj) {
	            if (isExcludedProto(obj)) return [];
	            var ret = [];
	
	            /*jshint forin:false */
	            enumeration: for (var key in obj) {
	                if (hasProp.call(obj, key)) {
	                    ret.push(key);
	                } else {
	                    for (var i = 0; i < excludedPrototypes.length; ++i) {
	                        if (hasProp.call(excludedPrototypes[i], key)) {
	                            continue enumeration;
	                        }
	                    }
	                    ret.push(key);
	                }
	            }
	            return ret;
	        };
	    }
	
	})();
	
	var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
	function isClass(fn) {
	    try {
	        if (typeof fn === "function") {
	            var keys = es5.names(fn.prototype);
	
	            var hasMethods = es5.isES5 && keys.length > 1;
	            var hasMethodsOtherThanConstructor = keys.length > 0 &&
	                !(keys.length === 1 && keys[0] === "constructor");
	            var hasThisAssignmentAndStaticMethods =
	                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;
	
	            if (hasMethods || hasMethodsOtherThanConstructor ||
	                hasThisAssignmentAndStaticMethods) {
	                return true;
	            }
	        }
	        return false;
	    } catch (e) {
	        return false;
	    }
	}
	
	function toFastProperties(obj) {
	    /*jshint -W027,-W055,-W031*/
	    function FakeConstructor() {}
	    FakeConstructor.prototype = obj;
	    var l = 8;
	    while (l--) new FakeConstructor();
	    return obj;
	    eval(obj);
	}
	
	var rident = /^[a-z$_][a-z$_0-9]*$/i;
	function isIdentifier(str) {
	    return rident.test(str);
	}
	
	function filledRange(count, prefix, suffix) {
	    var ret = new Array(count);
	    for(var i = 0; i < count; ++i) {
	        ret[i] = prefix + i + suffix;
	    }
	    return ret;
	}
	
	function safeToString(obj) {
	    try {
	        return obj + "";
	    } catch (e) {
	        return "[no string representation]";
	    }
	}
	
	function isError(obj) {
	    return obj !== null &&
	           typeof obj === "object" &&
	           typeof obj.message === "string" &&
	           typeof obj.name === "string";
	}
	
	function markAsOriginatingFromRejection(e) {
	    try {
	        notEnumerableProp(e, "isOperational", true);
	    }
	    catch(ignore) {}
	}
	
	function originatesFromRejection(e) {
	    if (e == null) return false;
	    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
	        e["isOperational"] === true);
	}
	
	function canAttachTrace(obj) {
	    return isError(obj) && es5.propertyIsWritable(obj, "stack");
	}
	
	var ensureErrorObject = (function() {
	    if (!("stack" in new Error())) {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            try {throw new Error(safeToString(value));}
	            catch(err) {return err;}
	        };
	    } else {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            return new Error(safeToString(value));
	        };
	    }
	})();
	
	function classString(obj) {
	    return {}.toString.call(obj);
	}
	
	function copyDescriptors(from, to, filter) {
	    var keys = es5.names(from);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        if (filter(key)) {
	            try {
	                es5.defineProperty(to, key, es5.getDescriptor(from, key));
	            } catch (ignore) {}
	        }
	    }
	}
	
	var asArray = function(v) {
	    if (es5.isArray(v)) {
	        return v;
	    }
	    return null;
	};
	
	if (typeof Symbol !== "undefined" && Symbol.iterator) {
	    var ArrayFrom = typeof Array.from === "function" ? function(v) {
	        return Array.from(v);
	    } : function(v) {
	        var ret = [];
	        var it = v[Symbol.iterator]();
	        var itResult;
	        while (!((itResult = it.next()).done)) {
	            ret.push(itResult.value);
	        }
	        return ret;
	    };
	
	    asArray = function(v) {
	        if (es5.isArray(v)) {
	            return v;
	        } else if (v != null && typeof v[Symbol.iterator] === "function") {
	            return ArrayFrom(v);
	        }
	        return null;
	    };
	}
	
	var isNode = typeof process !== "undefined" &&
	        classString(process).toLowerCase() === "[object process]";
	
	function env(key, def) {
	    return isNode ? process.env[key] : def;
	}
	
	function getNativePromise() {
	    if (typeof Promise === "function") {
	        try {
	            var promise = new Promise(function(){});
	            if ({}.toString.call(promise) === "[object Promise]") {
	                return Promise;
	            }
	        } catch (e) {}
	    }
	}
	
	function domainBind(self, cb) {
	    return self.bind(cb);
	}
	
	var ret = {
	    isClass: isClass,
	    isIdentifier: isIdentifier,
	    inheritedDataKeys: inheritedDataKeys,
	    getDataPropertyOrDefault: getDataPropertyOrDefault,
	    thrower: thrower,
	    isArray: es5.isArray,
	    asArray: asArray,
	    notEnumerableProp: notEnumerableProp,
	    isPrimitive: isPrimitive,
	    isObject: isObject,
	    isError: isError,
	    canEvaluate: canEvaluate,
	    errorObj: errorObj,
	    tryCatch: tryCatch,
	    inherits: inherits,
	    withAppended: withAppended,
	    maybeWrapAsError: maybeWrapAsError,
	    toFastProperties: toFastProperties,
	    filledRange: filledRange,
	    toString: safeToString,
	    canAttachTrace: canAttachTrace,
	    ensureErrorObject: ensureErrorObject,
	    originatesFromRejection: originatesFromRejection,
	    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	    classString: classString,
	    copyDescriptors: copyDescriptors,
	    hasDevTools: typeof chrome !== "undefined" && chrome &&
	                 typeof chrome.loadTimes === "function",
	    isNode: isNode,
	    env: env,
	    global: globalObject,
	    getNativePromise: getNativePromise,
	    domainBind: domainBind
	};
	ret.isRecentNode = ret.isNode && (function() {
	    var version = process.versions.node.split(".").map(Number);
	    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
	})();
	
	if (ret.isNode) ret.toFastProperties(process);
	
	try {throw new Error(); } catch (e) {ret.lastLineError = e;}
	module.exports = ret;
	
	},{"./es5":13}]},{},[4])(4)
	});                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 245), (function() { return this; }()), __webpack_require__(/*! ./~/timers-browserify/main.js */ 246).setImmediate))

/***/ },
/* 245 */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 246 */
/*!*************************************!*\
  !*** ./~/timers-browserify/main.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(/*! process/browser.js */ 245).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/timers-browserify/main.js */ 246).setImmediate, __webpack_require__(/*! ./~/timers-browserify/main.js */ 246).clearImmediate))

/***/ },
/* 247 */
/*!***************************************!*\
  !*** ./~/superagent-promise/index.js ***!
  \***************************************/
/***/ function(module, exports) {

	/**
	 * Promise wrapper for superagent
	 */
	
	function wrap(superagent, Promise) {
	  /**
	   * Request object similar to superagent.Request, but with end() returning
	   * a promise.
	   */
	  function PromiseRequest() {
	    superagent.Request.apply(this, arguments);
	  }
	
	  // Inherit form superagent.Request
	  PromiseRequest.prototype = Object.create(superagent.Request.prototype);
	
	  /** Send request and get a promise that `end` was emitted */
	  PromiseRequest.prototype.end = function(cb) {
	    var _end = superagent.Request.prototype.end;
	    var self = this;
	
	    return new Promise(function(accept, reject) {
	      _end.call(self, function(err, response) {
	        if (cb) {
	          cb(err, response);
	        }
	
	        if (err) {
	          err.response = response;
	          reject(err);
	        } else {
	          accept(response);
	        }
	      });
	    });
	  };
	
	  /** Provide a more promise-y interface */
	  PromiseRequest.prototype.then = function(resolve, reject) {
	    var _end = superagent.Request.prototype.end;
	    var self = this;
	
	    return new Promise(function(accept, reject) {
	      _end.call(self, function(err, response) {
	        if (err) {
	          err.response = response;
	          reject(err);
	        } else {
	          accept(response);
	        }
	      });
	    }).then(resolve, reject);
	  };
	
	  /**
	   * Request builder with same interface as superagent.
	   * It is convenient to import this as `request` in place of superagent.
	   */
	  var request = function(method, url) {
	    return new PromiseRequest(method, url);
	  };
	
	  /** Helper for making an options request */
	  request.options = function(url) {
	    return request('OPTIONS', url);
	  }
	
	  /** Helper for making a head request */
	  request.head = function(url, data) {
	    var req = request('HEAD', url);
	    if (data) {
	      req.send(data);
	    }
	    return req;
	  };
	
	  /** Helper for making a get request */
	  request.get = function(url, data) {
	    var req = request('GET', url);
	    if (data) {
	      req.query(data);
	    }
	    return req;
	  };
	
	  /** Helper for making a post request */
	  request.post = function(url, data) {
	    var req = request('POST', url);
	    if (data) {
	      req.send(data);
	    }
	    return req;
	  };
	
	  /** Helper for making a put request */
	  request.put = function(url, data) {
	    var req = request('PUT', url);
	    if (data) {
	      req.send(data);
	    }
	    return req;
	  };
	
	  /** Helper for making a patch request */
	  request.patch = function(url, data) {
	    var req = request('PATCH', url);
	    if (data) {
	      req.send(data);
	    }
	    return req;
	  };
	
	  /** Helper for making a delete request */
	  request.del = function(url) {
	    return request('DELETE', url);
	  };
	
	  // Export the request builder
	  return request;
	}
	
	module.exports = wrap;


/***/ },
/* 248 */
/*!************************************!*\
  !*** ./~/superagent/lib/client.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var Emitter = __webpack_require__(/*! emitter */ 249);
	var reduce = __webpack_require__(/*! reduce */ 250);
	var requestBase = __webpack_require__(/*! ./request-base */ 251);
	var isObject = __webpack_require__(/*! ./is-object */ 252);
	
	/**
	 * Root reference for iframes.
	 */
	
	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  root = this;
	}
	
	/**
	 * Noop.
	 */
	
	function noop(){};
	
	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isHost(obj) {
	  var str = {}.toString.call(obj);
	
	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Expose `request`.
	 */
	
	var request = module.exports = __webpack_require__(/*! ./request */ 253).bind(null, Request);
	
	/**
	 * Determine XHR.
	 */
	
	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  return false;
	};
	
	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */
	
	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };
	
	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */
	
	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    if (null != obj[key]) {
	      pushEncodedKeyValuePair(pairs, key, obj[key]);
	        }
	      }
	  return pairs.join('&');
	}
	
	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */
	
	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (Array.isArray(val)) {
	    return val.forEach(function(v) {
	      pushEncodedKeyValuePair(pairs, key, v);
	    });
	  }
	  pairs.push(encodeURIComponent(key)
	    + '=' + encodeURIComponent(val));
	}
	
	/**
	 * Expose serialization method.
	 */
	
	 request.serializeObject = serialize;
	
	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */
	
	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var parts;
	  var pair;
	
	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    parts = pair.split('=');
	    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
	  }
	
	  return obj;
	}
	
	/**
	 * Expose parser.
	 */
	
	request.parseString = parseString;
	
	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */
	
	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};
	
	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */
	
	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };
	
	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */
	
	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};
	
	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;
	
	  lines.pop(); // trailing CRLF
	
	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }
	
	  return fields;
	}
	
	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */
	
	function isJSON(mime) {
	  return /[\/+]json\b/.test(mime);
	}
	
	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */
	
	function type(str){
	  return str.split(/ *; */).shift();
	};
	
	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function params(str){
	  return reduce(str.split(/ *; */), function(obj, str){
	    var parts = str.split(/ *= */)
	      , key = parts.shift()
	      , val = parts.shift();
	
	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};
	
	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */
	
	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this.setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this.setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this.parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}
	
	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};
	
	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */
	
	Response.prototype.setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);
	
	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};
	
	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */
	
	Response.prototype.parseBody = function(str){
	  var parse = request.parse[this.type];
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};
	
	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */
	
	Response.prototype.setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }
	
	  var type = status / 100 | 0;
	
	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;
	
	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;
	
	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};
	
	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */
	
	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;
	
	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;
	
	  return err;
	};
	
	/**
	 * Expose `Response`.
	 */
	
	request.Response = Response;
	
	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */
	
	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function(){
	    var err = null;
	    var res = null;
	
	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      // issue #876: return the http status code if the response parsing fails
	      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
	      return self.callback(err);
	    }
	
	    self.emit('response', res);
	
	    if (err) {
	      return self.callback(err, res);
	    }
	
	    if (res.status >= 200 && res.status < 300) {
	      return self.callback(err, res);
	    }
	
	    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	    new_err.original = err;
	    new_err.response = res;
	    new_err.status = res.status;
	
	    self.callback(new_err, res);
	  });
	}
	
	/**
	 * Mixin `Emitter` and `requestBase`.
	 */
	
	Emitter(Request.prototype);
	for (var key in requestBase) {
	  Request.prototype[key] = requestBase[key];
	}
	
	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */
	
	Request.prototype.abort = function(){
	  if (this.aborted) return;
	  this.aborted = true;
	  this.xhr && this.xhr.abort();
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};
	
	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set responseType to `val`. Presently valid responseTypes are 'blob' and 
	 * 'arraybuffer'.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.responseType = function(val){
	  this._responseType = val;
	  return this;
	};
	
	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.auth = function(user, pass, options){
	  if (!options) {
	    options = {
	      type: 'basic'
	    }
	  }
	
	  switch (options.type) {
	    case 'basic':
	      var str = btoa(user + ':' + pass);
	      this.set('Authorization', 'Basic ' + str);
	    break;
	
	    case 'auto':
	      this.username = user;
	      this.password = pass;
	    break;
	  }
	  return this;
	};
	
	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/
	
	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};
	
	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.attach = function(field, file, filename){
	  this._getFormData().append(field, file, filename || file.name);
	  return this;
	};
	
	Request.prototype._getFormData = function(){
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};
	
	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	  *      request.post('/user')
	  *        .send('name=tobi')
	  *        .send('species=ferret')
	  *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.send = function(data){
	  var obj = isObject(data);
	  var type = this._header['content-type'];
	
	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }
	
	  if (!obj || isHost(data)) return this;
	  if (!type) this.type('json');
	  return this;
	};
	
	/**
	 * @deprecated
	 */
	Response.prototype.parse = function serialize(fn){
	  if (root.console) {
	    console.warn("Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0");
	  }
	  this.serialize(fn);
	  return this;
	};
	
	Response.prototype.serialize = function serialize(fn){
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */
	
	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};
	
	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */
	
	Request.prototype.crossDomainError = function(){
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;
	
	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;
	
	  this.callback(err);
	};
	
	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */
	
	Request.prototype.timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};
	
	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */
	
	Request.prototype.withCredentials = function(){
	  this._withCredentials = true;
	  return this;
	};
	
	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var query = this._query.join('&');
	  var timeout = this._timeout;
	  var data = this._formData || this._data;
	
	  // store callback
	  this._callback = fn || noop;
	
	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;
	
	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }
	
	    if (0 == status) {
	      if (self.timedout) return self.timeoutError();
	      if (self.aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };
	
	  // progress
	  var handleProgress = function(e){
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = 'download';
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    xhr.onprogress = handleProgress;
	  }
	  try {
	    if (xhr.upload && this.hasListeners('progress')) {
	      xhr.upload.onprogress = handleProgress;
	    }
	  } catch(e) {
	    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	    // Reported here:
	    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	  }
	
	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }
	
	  // querystring
	  if (query) {
	    query = request.serializeObject(query);
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }
	
	  // initiate request
	  if (this.username && this.password) {
	    xhr.open(this.method, this.url, true, this.username, this.password);
	  } else {
	    xhr.open(this.method, this.url, true);
	  }
	
	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;
	
	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }
	
	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }
	
	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }
	
	  // send stuff
	  this.emit('request', this);
	
	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};
	
	
	/**
	 * Expose `Request`.
	 */
	
	request.Request = Request;
	
	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};
	
	request['del'] = del;
	request['delete'] = del;
	
	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};


/***/ },
/* 249 */
/*!**************************************!*\
  !*** ./~/component-emitter/index.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	if (true) {
	  module.exports = Emitter;
	}
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 250 */
/*!*************************************!*\
  !*** ./~/reduce-component/index.js ***!
  \*************************************/
/***/ function(module, exports) {

	
	/**
	 * Reduce `arr` with `fn`.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Mixed} initial
	 *
	 * TODO: combatible error handling?
	 */
	
	module.exports = function(arr, fn, initial){  
	  var idx = 0;
	  var len = arr.length;
	  var curr = arguments.length == 3
	    ? initial
	    : arr[idx++];
	
	  while (idx < len) {
	    curr = fn.call(null, curr, arr[idx], ++idx, arr);
	  }
	  
	  return curr;
	};

/***/ },
/* 251 */
/*!******************************************!*\
  !*** ./~/superagent/lib/request-base.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(/*! ./is-object */ 252);
	
	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.clearTimeout = function _clearTimeout(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};
	
	/**
	 * Force given parser
	 *
	 * Sets the body parser no matter type.
	 *
	 * @param {Function}
	 * @api public
	 */
	
	exports.parse = function parse(fn){
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.timeout = function timeout(ms){
	  this._timeout = ms;
	  return this;
	};
	
	/**
	 * Faux promise support
	 *
	 * @param {Function} fulfill
	 * @param {Function} reject
	 * @return {Request}
	 */
	
	exports.then = function then(fulfill, reject) {
	  return this.end(function(err, res) {
	    err ? reject(err) : fulfill(res);
	  });
	}
	
	/**
	 * Allow for extension
	 */
	
	exports.use = function use(fn) {
	  fn(this);
	  return this;
	}
	
	
	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	exports.get = function(field){
	  return this._header[field.toLowerCase()];
	};
	
	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */
	
	exports.getHeader = exports.get;
	
	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};
	
	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	exports.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};
	
	/**
	 * Write the field `name` and `val` for "multipart/form-data"
	 * request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	exports.field = function(name, val) {
	  this._getFormData().append(name, val);
	  return this;
	};


/***/ },
/* 252 */
/*!***************************************!*\
  !*** ./~/superagent/lib/is-object.js ***!
  \***************************************/
/***/ function(module, exports) {

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isObject(obj) {
	  return null != obj && 'object' == typeof obj;
	}
	
	module.exports = isObject;


/***/ },
/* 253 */
/*!*************************************!*\
  !*** ./~/superagent/lib/request.js ***!
  \*************************************/
/***/ function(module, exports) {

	// The node and browser modules expose versions of this with the
	// appropriate constructor function bound as first argument
	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */
	
	function request(RequestConstructor, method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new RequestConstructor('GET', method).end(url);
	  }
	
	  // url first
	  if (2 == arguments.length) {
	    return new RequestConstructor('GET', method);
	  }
	
	  return new RequestConstructor(method, url);
	}
	
	module.exports = request;


/***/ },
/* 254 */
/*!************************!*\
  !*** ./~/util/util.js ***!
  \************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ 255);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(/*! inherits */ 256);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! ./~/process/browser.js */ 245)))

/***/ },
/* 255 */
/*!*******************************************!*\
  !*** ./~/util/support/isBufferBrowser.js ***!
  \*******************************************/
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 256 */
/*!***********************************************!*\
  !*** ./~/util/~/inherits/inherits_browser.js ***!
  \***********************************************/
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }
/******/ ]);
//# sourceMappingURL=gauges.js.map